"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[23171],{28051:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>o,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tutorials/hmac/hmac-basics","title":"Understanding HMAC-SHA256","description":"Learn about HMAC-SHA256 and how it works with a practical example.","source":"@site/docs/tutorials/hmac/01-hmac-basics.mdx","sourceDirName":"tutorials/hmac","slug":"/tutorials/hmac/hmac-basics","permalink":"/o1js/tutorials/hmac/hmac-basics","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/tutorials/hmac/01-hmac-basics.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Understanding HMAC-SHA256","sidebar_label":"Understanding the Algorithm","description":"Learn about HMAC-SHA256 and how it works with a practical example.","pagination_next":"tutorials/hmac/implementation"},"sidebar":"docs","previous":{"title":"Sideloading","permalink":"/o1js/advanced-concepts/sideloaded-vks"},"next":{"title":"Implementation","permalink":"/o1js/tutorials/hmac/implementation"}}');var s=i(74848),a=i(28453);i(58069);const l={title:"Understanding HMAC-SHA256",sidebar_label:"Understanding the Algorithm",description:"Learn about HMAC-SHA256 and how it works with a practical example.",pagination_next:"tutorials/hmac/implementation"},r=void 0,d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"What You&#39;ll Learn",id:"what-youll-learn",level:3},{value:"What is HMAC?",id:"what-is-hmac",level:2},{value:"Why Use HMAC?",id:"why-use-hmac",level:3},{value:"Why HMAC-SHA256 Specifically?",id:"why-hmac-sha256-specifically",level:3},{value:"HMAC-SHA256: Under the Hood",id:"hmac-sha256-under-the-hood",level:2},{value:"The Algorithm",id:"the-algorithm",level:3},{value:"The Process Step by Step",id:"the-process-step-by-step",level:3},{value:"Interactive Example",id:"interactive-example",level:2},{value:"Our Input Values",id:"our-input-values",level:3},{value:"Step-by-Step Calculation",id:"step-by-step-calculation",level:3},{value:"Next Steps",id:"next-steps",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"Welcome to this guide on HMAC-SHA256! Before diving into implementation, let's understand what HMAC is, why it's important, and how it works. This foundational knowledge will help you better understand the zero-knowledge implementation."}),"\n",(0,s.jsx)(n.h3,{id:"what-youll-learn",children:"What You'll Learn"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implementing HMAC-SHA256 in a zero-knowledge circuit using o1js"}),"\n",(0,s.jsx)(n.li,{children:"Working with provable arrays and bit manipulation in ZkPrograms"}),"\n",(0,s.jsx)(n.li,{children:"Using cryptographic gadgets like SHA256 in o1js"}),"\n",(0,s.jsx)(n.li,{children:"Applying metaprogramming patterns to shape circuit structure - using static control flow to shape circuit structure"}),"\n",(0,s.jsx)(n.li,{children:"Best practices for writing complex zero-knowledge circuits"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"New to o1js?",type:"tip",children:(0,s.jsxs)(n.p,{children:["If you're just getting started, check out the ",(0,s.jsx)(n.a,{href:"/o1js/",children:"o1js basics"})," first."]})}),"\n",(0,s.jsx)(n.h2,{id:"what-is-hmac",children:"What is HMAC?"}),"\n",(0,s.jsx)(n.p,{children:"HMAC (Hash-based Message Authentication Code) is a specific type of message authentication code that combines:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A cryptographic hash function"}),"\n",(0,s.jsx)(n.li,{children:"A secret key"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"It provides a way to verify both:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Data integrity (message hasn't been modified)"}),"\n",(0,s.jsx)(n.li,{children:"Message authenticity (sender is verified)"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Historical Note",type:"info",children:(0,s.jsx)(n.p,{children:"The HMAC construction was first published in 1996 by Mihir Bellare, Ran Canetti, and Hugo Krawczyk. It has since become a fundamental building block in standards like TLS, JWT, and many others."})}),"\n",(0,s.jsx)(n.h3,{id:"why-use-hmac",children:"Why Use HMAC?"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Message Integrity"}),": Ensures the message hasn't been tampered with"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authentication"}),": Verifies the sender's identity through the shared secret key"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Non-repudiation"}),": The sender cannot deny sending the message (when combined with other cryptographic primitives)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"why-hmac-sha256-specifically",children:"Why HMAC-SHA256 Specifically?"}),"\n",(0,s.jsx)(n.p,{children:"HMAC-SHA256 uses SHA-256 as its underlying hash function. It's widely used because:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SHA-256 is cryptographically secure"}),"\n",(0,s.jsx)(n.li,{children:"The 256-bit output size provides strong security against collision attacks"}),"\n",(0,s.jsx)(n.li,{children:"It's relatively fast to compute"}),"\n",(0,s.jsx)(n.li,{children:"It's widely supported across different platforms and languages"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"hmac-sha256-under-the-hood",children:"HMAC-SHA256: Under the Hood"}),"\n",(0,s.jsx)(n.h3,{id:"the-algorithm",children:"The Algorithm"}),"\n",(0,s.jsx)(n.p,{children:"The HMAC algorithm can be expressed as:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"HMAC(k,m) = H((k_0 ^ opad) || H((k_0 ^ ipad) || m))\n"})}),"\n",(0,s.jsx)(n.p,{children:"Where:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Symbol"}),(0,s.jsx)(n.th,{children:"Meaning"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"k"}),(0,s.jsx)(n.td,{children:"Secret key"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"m"}),(0,s.jsx)(n.td,{children:"Message to authenticate"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"H"}),(0,s.jsx)(n.td,{children:"Hash function (SHA-256)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"k_0"}),(0,s.jsx)(n.td,{children:"Derived key (padded/hashed key)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"opad"}),(0,s.jsx)(n.td,{children:"Outer padding (0x5c repeated)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ipad"}),(0,s.jsx)(n.td,{children:"Inner padding (0x36 repeated)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"||"}),(0,s.jsx)(n.td,{children:"Concatenation"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"^"}),(0,s.jsx)(n.td,{children:"XOR operation"})]})]})]}),"\n",(0,s.jsxs)(n.admonition,{title:"Block Size",type:"note",children:[(0,s.jsxs)(n.p,{children:["Since we're using SHA-256 as our hash function, the block size is 64 bytes (512 bits). This is a property of SHA-256's internal block processing. The key ",(0,s.jsx)(n.code,{children:"k"})," is processed into ",(0,s.jsx)(n.code,{children:"k_0"})," based on its length:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If key length < 64 bytes: Padded with zeros to 64 bytes"}),"\n",(0,s.jsx)(n.li,{children:"If key length = 64 bytes: Used as-is without modification"}),"\n",(0,s.jsx)(n.li,{children:"If key length > 64 bytes: Hashed using SHA-256 (producing 32 bytes) and then padded with zeros to 64 bytes"}),"\n"]})]}),"\n",(0,s.jsx)(n.h3,{id:"the-process-step-by-step",children:"The Process Step by Step"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key Preparation"})," \ud83d\udd11"]}),"\n",(0,s.jsx)(n.mermaid,{value:"graph LR\nA[Input Key] --\x3e B{Key Length?}:::secondary\nB --\x3e|\\> 64 bytes| C[Hash Key] --\x3e D[Pad with Zeros] --\x3e E[k_0]\nB --\x3e|= 64 bytes| E\nB --\x3e|< 64 bytes| D\n\nclassDef secondary fill:#000000,color:#ffffff"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Inner Hash"})," \ud83d\udd04"]}),"\n",(0,s.jsx)(n.mermaid,{value:"graph LR\nA[k_0] --\x3e B[XOR with ipad]\nB --\x3e C[Concatenate Message]\nC --\x3e D[SHA-256]"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Outer Hash"})," \ud83d\udd04"]}),"\n",(0,s.jsx)(n.mermaid,{value:"graph LR\nA[k_0] --\x3e B[XOR with opad]\nB --\x3e C[Concatenate Inner Hash]\nC --\x3e D[SHA-256]"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"interactive-example",children:"Interactive Example"}),"\n",(0,s.jsx)(n.p,{children:"Let's walk through a real HMAC-SHA256 calculation. You can follow along using these online tools:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.rapidtables.com/convert/number/ascii-to-hex.html",children:"ASCII to Hex Converter"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://toolslick.com/math/bitwise/xor-calculator",children:"XOR Calculator"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://emn178.github.io/online-tools/sha256.html",children:"SHA-256 Calculator"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"our-input-values",children:"Our Input Values"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:'const key = "key123";              // Our secret key\nconst message = "Hello, World!";    // Message to authenticate\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-by-step-calculation",children:"Step-by-Step Calculation"}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:"1\ufe0f\u20e3 Convert Inputs to Hex"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:'// Key in hex\n"key123" \u2192 6B6579313233\n\n// Message in hex\n"Hello, World!" \u2192 48656C6C6F2C20576F726C6421\n'})})]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:"2\ufe0f\u20e3 Prepare the Key"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"// Original key (6 bytes)\n6B6579313233\n\n// Padded to 64 bytes\n6B657931323300000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n00000000000000000000000000000000\n"})})]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:"3\ufe0f\u20e3 Create Padding Values"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"// ipad - 0x36 repeated 64 times\n36363636363636363636363636363636\n36363636363636363636363636363636\n36363636363636363636363636363636\n36363636363636363636363636363636\n\n// opad - 0x5C repeated 64 times\n5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C\n5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C\n5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C\n5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C\n"})})]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:"4\ufe0f\u20e3 Calculate Inner Hash"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"// 1. XOR key with ipad\nk_0 ^ ipad = 5D534F0704053636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636\n\n// 2. Concatenate with message\n(k_0 ^ ipad) || m =  5D534F0704053636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363648656C6C6F2C20576F726C6421\n\n// 3. SHA-256 result\nH((k_0 ^ ipad) || m) = 9d9c48d074304040cb5efa94008a719d95773a778cae5ff52fae84f89fa7dd45\n"})})]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:"5\ufe0f\u20e3 Calculate Outer Hash"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"// 1. XOR key with opad\nk_0 ^ opad = 3739256D6E6F5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C\n\n// 2. Concatenate with inner hash\n(k_0 ^ opad) || H((k_0 ^ ipad) || m) = 3739256D6E6F5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C9d9c48d074304040cb5efa94008a719d95773a778cae5ff52fae84f89fa7dd45\n\n// 3. Final HMAC-SHA256\nH((k_0 ^ opad) || H((k_0 ^ ipad) || m)) = 81c362d8cfc25d551d72d86cc700e6d5574191d49dc55dd500086840e34563b8\n"})})]}),"\n",(0,s.jsxs)(n.admonition,{title:"Verify Your Result",type:"tip",children:[(0,s.jsxs)(n.p,{children:["You can verify this result using the ",(0,s.jsx)(n.a,{href:"https://cryptotools.net/hmac",children:"HMAC Calculator"}),":"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Algorithm: SHA-256"}),"\n",(0,s.jsx)(n.li,{children:"Key: key123"}),"\n",(0,s.jsx)(n.li,{children:"Message: Hello, World!"}),"\n"]})]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Now that you understand how HMAC-SHA256 works, you're ready to learn how to implement it in o1js! In the next section, we'll cover how to handle write zk-circuits in o1js"})]})}function o(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);