"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[57905],{28453:(e,s,a)=>{a.d(s,{R:()=>d,x:()=>i});var n=a(96540);const r={},l=n.createContext(r);function d(e){const s=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),n.createElement(l.Provider,{value:s},e.children)}},34090:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>h,contentTitle:()=>i,default:()=>o,frontMatter:()=>d,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"api-reference/classes/Hashed","title":"Hashed","description":"Defined in195","source":"@site/docs/api-reference/classes/Hashed.mdx","sourceDirName":"api-reference/classes","slug":"/api-reference/classes/Hashed","permalink":"/o1js/api-reference/classes/Hashed","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/api-reference/classes/Hashed.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Group","permalink":"/o1js/api-reference/classes/Group"},"next":{"title":"Int64","permalink":"/o1js/api-reference/classes/Int64"}}');var r=a(74848),l=a(28453);const d={},i=void 0,h={},c=[{value:"Type Parameters",id:"type-parameters",level:2},{value:"Constructors",id:"constructors",level:2},{value:"new Hashed()",id:"new-hashed",level:3},{value:"Parameters",id:"parameters",level:4},{value:"hash",id:"hash",level:5},{value:"value",id:"value",level:5},{value:"Returns",id:"returns",level:4},{value:"Properties",id:"properties",level:2},{value:"hash",id:"hash-1",level:3},{value:"value",id:"value-1",level:3},{value:"_innerProvable",id:"_innerprovable",level:3},{value:"_provable",id:"_provable",level:3},{value:"Accessors",id:"accessors",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Get Signature",id:"get-signature",level:4},{value:"Returns",id:"returns-1",level:5},{value:"innerProvable",id:"innerprovable",level:3},{value:"Get Signature",id:"get-signature-1",level:4},{value:"Returns",id:"returns-2",level:5},{value:"Methods",id:"methods",level:2},{value:"toFields()",id:"tofields",level:3},{value:"Returns",id:"returns-3",level:4},{value:"unhash()",id:"unhash",level:3},{value:"Returns",id:"returns-4",level:4},{value:"_hash()",id:"_hash",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"_",id:"_",level:5},{value:"Returns",id:"returns-5",level:4},{value:"create()",id:"create",level:3},{value:"Type Parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"type",id:"type",level:5},{value:"hash?",id:"hash-2",level:5},{value:"Returns",id:"returns-6",level:4},{value:"hash()",id:"hash-3",level:3},{value:"Type Parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"value",id:"value-2",level:5},{value:"hash?",id:"hash-4",level:5},{value:"Returns",id:"returns-7",level:4}];function t(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/packed.ts#L195",children:"lib/provable/packed.ts:195"})]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"Hashed<T>"})," represents a type ",(0,r.jsx)(s.code,{children:"T"})," by its hash."]}),"\n",(0,r.jsx)(s.p,{children:"Since a hash is only a single field element, this can be more efficient in provable code\nwhere the number of constraints depends on the number of field elements per value."}),"\n",(0,r.jsxs)(s.p,{children:["For example, ",(0,r.jsx)(s.code,{children:"Provable.if(bool, x, y)"})," takes O(n) constraints, where n is the number of field\nelements in x and y. With Hashed, this is reduced to O(1)."]}),"\n",(0,r.jsx)(s.p,{children:"The downside is that you will pay the overhead of hashing your values, so it helps to experiment\nin which parts of your code a hashed representation is beneficial."}),"\n",(0,r.jsx)(s.p,{children:"Usage:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"// define a hashed type from a type\nlet HashedType = Hashed.create(MyType);\n\n// hash a value\nlet hashed = HashedType.hash(value);\n\n// ... operations on hashes, more efficient than on plain values ...\n\n// unhash to get the original value\nlet value = hashed.unhash();\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": When wrapping a type with ",(0,r.jsx)(s.code,{children:"Hashed"}),", make sure that that type is safe to automatically ",(0,r.jsx)(s.em,{children:"pack"}),"\nand ",(0,r.jsx)(s.em,{children:"unpack"})," in provable code. In particular, do not use ",(0,r.jsx)(s.code,{children:"Hashed"})," with types that define a custom ",(0,r.jsx)(s.code,{children:"toInput()"}),"\n(specifying a certain bit packing) but no corresponding ",(0,r.jsx)(s.code,{children:"check()"})," method  (that constrains the bit lengths of the packed parts)."]}),"\n",(0,r.jsx)(s.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,r.jsxs)(s.p,{children:["\u2022 ",(0,r.jsx)(s.strong,{children:"T"})]}),"\n",(0,r.jsx)(s.h2,{id:"constructors",children:"Constructors"}),"\n",(0,r.jsx)(s.h3,{id:"new-hashed",children:"new Hashed()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"new Hashed<T>(hash: Field, value: Unconstrained<T>): Hashed<T>\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/packed.ts#L233",children:"lib/provable/packed.ts:233"})]}),"\n",(0,r.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"hash",children:"hash"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsx)(s.h5,{id:"value",children:"value"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Unconstrained",children:(0,r.jsx)(s.code,{children:"Unconstrained"})}),"<",(0,r.jsx)(s.code,{children:"T"}),">"]}),"\n",(0,r.jsx)(s.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Hashed",children:(0,r.jsx)(s.code,{children:"Hashed"})}),"<",(0,r.jsx)(s.code,{children:"T"}),">"]}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"hash-1",children:"hash"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"hash: Field;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/packed.ts#L196",children:"lib/provable/packed.ts:196"})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"value-1",children:"value"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"value: Unconstrained<T>;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/packed.ts#L197",children:"lib/provable/packed.ts:197"})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"_innerprovable",children:"_innerProvable"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static _innerProvable: \n  | undefined\n| ProvableHashable<any>;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/packed.ts#L276",children:"lib/provable/packed.ts:276"})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"_provable",children:"_provable"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static _provable: \n  | undefined\n| ProvableHashable<Hashed<any>>;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/packed.ts#L275",children:"lib/provable/packed.ts:275"})]}),"\n",(0,r.jsx)(s.h2,{id:"accessors",children:"Accessors"}),"\n",(0,r.jsx)(s.h3,{id:"constructor",children:"Constructor"}),"\n",(0,r.jsx)(s.h4,{id:"get-signature",children:"Get Signature"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"get Constructor(): typeof Hashed\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/packed.ts#L278",children:"lib/provable/packed.ts:278"})]}),"\n",(0,r.jsx)(s.h5,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"typeof"})," ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Hashed",children:(0,r.jsx)(s.code,{children:"Hashed"})})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"innerprovable",children:"innerProvable"}),"\n",(0,r.jsx)(s.h4,{id:"get-signature-1",children:"Get Signature"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"get static innerProvable(): ProvableHashable<any>\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/packed.ts#L282",children:"lib/provable/packed.ts:282"})]}),"\n",(0,r.jsx)(s.h5,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/ProvableHashable",children:(0,r.jsx)(s.code,{children:"ProvableHashable"})}),"<",(0,r.jsx)(s.code,{children:"any"}),">"]}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"tofields",children:"toFields()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"toFields(): Field[]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/packed.ts#L270",children:"lib/provable/packed.ts:270"})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})}),"[]"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"unhash",children:"unhash()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"unhash(): T\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/packed.ts#L260",children:"lib/provable/packed.ts:260"})]}),"\n",(0,r.jsx)(s.p,{children:"Unwrap a value from its hashed variant."}),"\n",(0,r.jsx)(s.h4,{id:"returns-4",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"T"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"_hash",children:"_hash()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static _hash(_: any): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/packed.ts#L238",children:"lib/provable/packed.ts:238"})]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"_",children:"_"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"any"})}),"\n",(0,r.jsx)(s.h4,{id:"returns-5",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"create",children:"create()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static create<T>(type: WithProvable<ProvableHashable<T>>, hash?: (t: T) => Field): typeof Hashed & {\n  provable: ProvableHashable<Hashed<T>>;\n  empty: Hashed<T>;\n}\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/packed.ts#L202",children:"lib/provable/packed.ts:202"})]}),"\n",(0,r.jsxs)(s.p,{children:["Create a hashed representation of ",(0,r.jsx)(s.code,{children:"type"}),". You can then use ",(0,r.jsx)(s.code,{children:"HashedType.hash(x)"})," to wrap a value in a ",(0,r.jsx)(s.code,{children:"Hashed"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"type-parameters-1",children:"Type Parameters"}),"\n",(0,r.jsxs)(s.p,{children:["\u2022 ",(0,r.jsx)(s.strong,{children:"T"})]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"type",children:"type"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/WithProvable",children:(0,r.jsx)(s.code,{children:"WithProvable"})}),"<",(0,r.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/ProvableHashable",children:(0,r.jsx)(s.code,{children:"ProvableHashable"})}),"<",(0,r.jsx)(s.code,{children:"T"}),">>"]}),"\n",(0,r.jsx)(s.h5,{id:"hash-2",children:"hash?"}),"\n",(0,r.jsxs)(s.p,{children:["(",(0,r.jsx)(s.code,{children:"t"}),": ",(0,r.jsx)(s.code,{children:"T"}),") => ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-6",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"typeof"})," ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Hashed",children:(0,r.jsx)(s.code,{children:"Hashed"})})," & {\n",(0,r.jsx)(s.code,{children:"provable"}),": ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/ProvableHashable",children:(0,r.jsx)(s.code,{children:"ProvableHashable"})}),"<",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Hashed",children:(0,r.jsx)(s.code,{children:"Hashed"})}),"<",(0,r.jsx)(s.code,{children:"T"}),">>;\n",(0,r.jsx)(s.code,{children:"empty"}),": ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Hashed",children:(0,r.jsx)(s.code,{children:"Hashed"})}),"<",(0,r.jsx)(s.code,{children:"T"}),">;\n}"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"hash-3",children:"hash()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static hash<T>(value: T, hash?: Field): Hashed<T>\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/packed.ts#L251",children:"lib/provable/packed.ts:251"})]}),"\n",(0,r.jsx)(s.p,{children:"Wrap a value, and represent it by its hash in provable code."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"let hashed = HashedType.hash(value);\n"})}),"\n",(0,r.jsx)(s.p,{children:"Optionally, if you already have the hash, you can pass it in and avoid recomputing it."}),"\n",(0,r.jsx)(s.h4,{id:"type-parameters-2",children:"Type Parameters"}),"\n",(0,r.jsxs)(s.p,{children:["\u2022 ",(0,r.jsx)(s.strong,{children:"T"})]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"value-2",children:"value"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"T"})}),"\n",(0,r.jsx)(s.h5,{id:"hash-4",children:"hash?"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsx)(s.h4,{id:"returns-7",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Hashed",children:(0,r.jsx)(s.code,{children:"Hashed"})}),"<",(0,r.jsx)(s.code,{children:"T"}),">"]})]})}function o(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}}}]);