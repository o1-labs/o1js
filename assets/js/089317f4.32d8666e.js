"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[42537],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var a=t(96540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}},96469:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"api-reference/namespaces/Experimental/functions/IndexedMerkleMap","title":"IndexedMerkleMap","description":"Defined in169","source":"@site/docs/api-reference/namespaces/Experimental/functions/IndexedMerkleMap.mdx","sourceDirName":"api-reference/namespaces/Experimental/functions","slug":"/api-reference/namespaces/Experimental/functions/IndexedMerkleMap","permalink":"/o1js/api-reference/namespaces/Experimental/functions/IndexedMerkleMap","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/api-reference/namespaces/Experimental/functions/IndexedMerkleMap.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"ActionBatch","permalink":"/o1js/api-reference/namespaces/Experimental/functions/ActionBatch"},"next":{"title":"OffchainState","permalink":"/o1js/api-reference/namespaces/Experimental/functions/OffchainState"}}');var s=t(74848),r=t(28453);const i={},c=void 0,d={},l=[{value:"Parameters",id:"parameters",level:2},{value:"height",id:"height",level:3},{value:"Returns",id:"returns",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function IndexedMerkleMap(height: number): typeof IndexedMerkleMapBase\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Defined in: ",(0,s.jsx)(n.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/index.ts#L169",children:"index.ts:169"})]}),"\n",(0,s.jsx)(n.p,{children:"Class factory for an Indexed Merkle Map with a given height."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"class MerkleMap extends IndexedMerkleMap(33) {}\n\nlet map = new MerkleMap();\n\nmap.insert(2n, 14n);\nmap.insert(1n, 13n);\n\nlet x = map.get(2n); // 14\n"})}),"\n",(0,s.jsx)(n.p,{children:"Indexed Merkle maps can be used directly in provable code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"ZkProgram({\n  methods: {\n    test: {\n      privateInputs: [MerkleMap, Field],\n\n      method(map: MerkleMap, key: Field) {\n        // get the value associated with `key`\n        let value = map.getOption(key).orElse(0n);\n\n        // increment the value by 1\n        map.set(key, value.add(1));\n      }\n    }\n  }\n})\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Initially, every ",(0,s.jsx)(n.code,{children:"IndexedMerkleMap"})," is populated by a single key-value pair: ",(0,s.jsx)(n.code,{children:"(0, 0)"}),". The value for key ",(0,s.jsx)(n.code,{children:"0"})," can be updated like any other.\nWhen keys and values are hash outputs, ",(0,s.jsx)(n.code,{children:"(0, 0)"})," can serve as a convenient way to represent a dummy update to the tree, since 0 is not\neffciently computable as a hash image, and this update doesn't affect the Merkle root."]}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.h3,{id:"height",children:"height"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"number"})}),"\n",(0,s.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"typeof"})," ",(0,s.jsx)(n.code,{children:"IndexedMerkleMapBase"})]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);