"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[52007],{2849:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"api-reference/type-aliases/ProvablePure","title":"ProvablePure","description":"Defined in114","source":"@site/docs/api-reference/type-aliases/ProvablePure.mdx","sourceDirName":"api-reference/type-aliases","slug":"/api-reference/type-aliases/ProvablePure","permalink":"/o1js/api-reference/type-aliases/ProvablePure","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/api-reference/type-aliases/ProvablePure.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"ProvableHashable","permalink":"/o1js/api-reference/type-aliases/ProvableHashable"},"next":{"title":"ProvablePureExtended","permalink":"/o1js/api-reference/type-aliases/ProvablePureExtended"}}');var a=s(74848),i=s(28453);const t={},l=void 0,o={},d=[{value:"Type declaration",id:"type-declaration",level:2},{value:"fromFields()",id:"fromfields",level:3},{value:"Parameters",id:"parameters",level:4},{value:"fields",id:"fields",level:5},{value:"Returns",id:"returns",level:4},{value:"Type Parameters",id:"type-parameters",level:2}];function c(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ts",children:'type ProvablePure<T, TValue> = Omit<Provable<T, TValue>, "fromFields"> & {\n  fromFields: (fields: Field[]) => T;\n};\n'})}),"\n",(0,a.jsxs)(r.p,{children:["Defined in: ",(0,a.jsx)(r.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/types/provable-intf.ts#L114",children:"lib/provable/types/provable-intf.ts:114"})]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.code,{children:"ProvablePure<T>"})," is a special kind of ",(0,a.jsx)(r.a,{href:"/o1js/api-reference/type-aliases/Provable",children:"Provable"}),' interface, where the "auxiliary" (non-provable) data is empty.\nThis means the type consists only of field elements, in that sense it is "pure".\nAny instance of ',(0,a.jsx)(r.code,{children:"ProvablePure<T>"})," is also an instance of ",(0,a.jsx)(r.code,{children:"Provable<T>"}),' where the "auxiliary" data is empty.']}),"\n",(0,a.jsxs)(r.p,{children:["Examples where ",(0,a.jsx)(r.code,{children:"ProvablePure<T>"})," is required are types of on-chain state, events and actions."]}),"\n",(0,a.jsx)(r.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,a.jsx)(r.h3,{id:"fromfields",children:"fromFields()"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ts",children:"fromFields: (fields: Field[]) => T;\n"})}),"\n",(0,a.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsx)(r.h5,{id:"fields",children:"fields"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.a,{href:"/o1js/api-reference/classes/Field",children:(0,a.jsx)(r.code,{children:"Field"})}),"[]"]}),"\n",(0,a.jsx)(r.h4,{id:"returns",children:"Returns"}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.code,{children:"T"})}),"\n",(0,a.jsx)(r.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,a.jsxs)(r.p,{children:["\u2022 ",(0,a.jsx)(r.strong,{children:"T"})]}),"\n",(0,a.jsxs)(r.p,{children:["\u2022 ",(0,a.jsx)(r.strong,{children:"TValue"})," = ",(0,a.jsx)(r.code,{children:"any"})]})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>t,x:()=>l});var n=s(96540);const a={},i=n.createContext(a);function t(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);