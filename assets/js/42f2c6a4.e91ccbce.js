"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[97873],{28453:(e,s,i)=>{i.d(s,{R:()=>d,x:()=>a});var l=i(96540);const r={},n=l.createContext(r);function d(e){const s=l.useContext(n);return l.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),l.createElement(n.Provider,{value:s},e.children)}},97707:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>t,contentTitle:()=>a,default:()=>o,frontMatter:()=>d,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"api-reference/classes/Field","title":"Field","description":"Defined in74","source":"@site/docs/api-reference/classes/Field.mdx","sourceDirName":"api-reference/classes","slug":"/api-reference/classes/Field","permalink":"/o1js/api-reference/classes/Field","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/api-reference/classes/Field.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"EcdsaSignature","permalink":"/o1js/api-reference/classes/EcdsaSignature"},"next":{"title":"ForeignCurve","permalink":"/o1js/api-reference/classes/ForeignCurve"}}');var r=i(74848),n=i(28453);const d={},a=void 0,t={},c=[{value:"Examples",id:"examples",level:2},{value:"Param",id:"param",level:2},{value:"Constructors",id:"constructors",level:2},{value:"new Field()",id:"new-field",level:3},{value:"Parameters",id:"parameters",level:4},{value:"x",id:"x",level:5},{value:"Returns",id:"returns",level:4},{value:"Properties",id:"properties",level:2},{value:"value",id:"value",level:3},{value:"ORDER",id:"order",level:3},{value:"sizeInBits",id:"sizeinbits",level:3},{value:"sizeInBytes",id:"sizeinbytes",level:3},{value:"Methods",id:"methods",level:2},{value:"add()",id:"add",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"y",id:"y",level:5},{value:"Returns",id:"returns-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"assertBool()",id:"assertbool",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"message?",id:"message",level:5},{value:"Returns",id:"returns-2",level:4},{value:"assertEquals()",id:"assertequals",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"y",id:"y-1",level:5},{value:"message?",id:"message-1",level:5},{value:"Returns",id:"returns-3",level:4},{value:"assertGreaterThan()",id:"assertgreaterthan",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"y",id:"y-2",level:5},{value:"message?",id:"message-2",level:5},{value:"Returns",id:"returns-4",level:4},{value:"assertGreaterThanOrEqual()",id:"assertgreaterthanorequal",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"y",id:"y-3",level:5},{value:"message?",id:"message-3",level:5},{value:"Returns",id:"returns-5",level:4},{value:"assertLessThan()",id:"assertlessthan",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"y",id:"y-4",level:5},{value:"message?",id:"message-4",level:5},{value:"Returns",id:"returns-6",level:4},{value:"assertLessThanOrEqual()",id:"assertlessthanorequal",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"y",id:"y-5",level:5},{value:"message?",id:"message-5",level:5},{value:"Returns",id:"returns-7",level:4},{value:"assertNotEquals()",id:"assertnotequals",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"y",id:"y-6",level:5},{value:"message?",id:"message-6",level:5},{value:"Returns",id:"returns-8",level:4},{value:"Example",id:"example",level:4},{value:"div()",id:"div",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"y",id:"y-7",level:5},{value:"Returns",id:"returns-9",level:4},{value:"Examples",id:"examples-2",level:4},{value:"equals()",id:"equals",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"y",id:"y-8",level:5},{value:"Returns",id:"returns-10",level:4},{value:"Example",id:"example-1",level:4},{value:"greaterThan()",id:"greaterthan",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"y",id:"y-9",level:5},{value:"Returns",id:"returns-11",level:4},{value:"Examples",id:"examples-3",level:4},{value:"greaterThanOrEqual()",id:"greaterthanorequal",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"y",id:"y-10",level:5},{value:"Returns",id:"returns-12",level:4},{value:"Examples",id:"examples-4",level:4},{value:"inv()",id:"inv",level:3},{value:"Returns",id:"returns-13",level:4},{value:"Example",id:"example-2",level:4},{value:"isConstant()",id:"isconstant",level:3},{value:"Returns",id:"returns-14",level:4},{value:"Examples",id:"examples-5",level:4},{value:"isEven()",id:"iseven",level:3},{value:"Returns",id:"returns-15",level:4},{value:"Example",id:"example-3",level:4},{value:"isOdd()",id:"isodd",level:3},{value:"Returns",id:"returns-16",level:4},{value:"lessThan()",id:"lessthan",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"y",id:"y-11",level:5},{value:"Returns",id:"returns-17",level:4},{value:"Examples",id:"examples-6",level:4},{value:"lessThanOrEqual()",id:"lessthanorequal",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"y",id:"y-12",level:5},{value:"Returns",id:"returns-18",level:4},{value:"Examples",id:"examples-7",level:4},{value:"mul()",id:"mul",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"y",id:"y-13",level:5},{value:"Returns",id:"returns-19",level:4},{value:"Example",id:"example-4",level:4},{value:"neg()",id:"neg",level:3},{value:"Returns",id:"returns-20",level:4},{value:"Examples",id:"examples-8",level:4},{value:"seal()",id:"seal",level:3},{value:"Returns",id:"returns-21",level:4},{value:"sqrt()",id:"sqrt",level:3},{value:"Returns",id:"returns-22",level:4},{value:"Example",id:"example-5",level:4},{value:"square()",id:"square",level:3},{value:"Returns",id:"returns-23",level:4},{value:"Example",id:"example-6",level:4},{value:"sub()",id:"sub",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"y",id:"y-14",level:5},{value:"Returns",id:"returns-24",level:4},{value:"Examples",id:"examples-9",level:4},{value:"toAuxiliary()",id:"toauxiliary",level:3},{value:"Returns",id:"returns-25",level:4},{value:"toBigInt()",id:"tobigint",level:3},{value:"Returns",id:"returns-26",level:4},{value:"Example",id:"example-7",level:4},{value:"toBits()",id:"tobits",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"length",id:"length",level:5},{value:"Returns",id:"returns-27",level:4},{value:"toConstant()",id:"toconstant",level:3},{value:"Returns",id:"returns-28",level:4},{value:"Example",id:"example-8",level:4},{value:"toFields()",id:"tofields",level:3},{value:"Returns",id:"returns-29",level:4},{value:"toJSON()",id:"tojson",level:3},{value:"Returns",id:"returns-30",level:4},{value:"Example",id:"example-9",level:4},{value:"toString()",id:"tostring",level:3},{value:"Returns",id:"returns-31",level:4},{value:"Example",id:"example-10",level:4},{value:"check()",id:"check",level:3},{value:"Returns",id:"returns-32",level:4},{value:"empty()",id:"empty",level:3},{value:"Returns",id:"returns-33",level:4},{value:"from()",id:"from",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"x",id:"x-1",level:5},{value:"Returns",id:"returns-34",level:4},{value:"fromBits()",id:"frombits",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"bits",id:"bits",level:5},{value:"Returns",id:"returns-35",level:4},{value:"fromBytes()",id:"frombytes",level:3},{value:"Parameters",id:"parameters-20",level:4},{value:"bytes",id:"bytes",level:5},{value:"Returns",id:"returns-36",level:4},{value:"fromFields()",id:"fromfields",level:3},{value:"Parameters",id:"parameters-21",level:4},{value:"fields",id:"fields",level:5},{value:"Returns",id:"returns-37",level:4},{value:"fromJSON()",id:"fromjson",level:3},{value:"Parameters",id:"parameters-22",level:4},{value:"json",id:"json",level:5},{value:"Returns",id:"returns-38",level:4},{value:"fromValue()",id:"fromvalue",level:3},{value:"Parameters",id:"parameters-23",level:4},{value:"x",id:"x-2",level:5},{value:"Returns",id:"returns-39",level:4},{value:"random()",id:"random",level:3},{value:"Returns",id:"returns-40",level:4},{value:"Example",id:"example-11",level:4},{value:"readBytes()",id:"readbytes",level:3},{value:"Type Parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-24",level:4},{value:"bytes",id:"bytes-1",level:5},{value:"offset",id:"offset",level:5},{value:"Returns",id:"returns-41",level:4},{value:"sizeInFields()",id:"sizeinfields",level:3},{value:"Returns",id:"returns-42",level:4},{value:"Example",id:"example-12",level:4},{value:"toAuxiliary()",id:"toauxiliary-1",level:3},{value:"Returns",id:"returns-43",level:4},{value:"toBigint()",id:"tobigint-1",level:3},{value:"Parameters",id:"parameters-25",level:4},{value:"x",id:"x-3",level:5},{value:"Returns",id:"returns-44",level:4},{value:"toBytes()",id:"tobytes",level:3},{value:"Parameters",id:"parameters-26",level:4},{value:"value",id:"value-1",level:5},{value:"Returns",id:"returns-45",level:4},{value:"toFields()",id:"tofields-1",level:3},{value:"Parameters",id:"parameters-27",level:4},{value:"value",id:"value-2",level:5},{value:"Returns",id:"returns-46",level:4},{value:"toInput()",id:"toinput",level:3},{value:"Parameters",id:"parameters-28",level:4},{value:"value",id:"value-3",level:5},{value:"Returns",id:"returns-47",level:4},{value:"fields",id:"fields-1",level:5},{value:"toJSON()",id:"tojson-1",level:3},{value:"Parameters",id:"parameters-29",level:4},{value:"value",id:"value-4",level:5},{value:"Returns",id:"returns-48",level:4},{value:"Example",id:"example-13",level:4},{value:"toValue()",id:"tovalue",level:3},{value:"Parameters",id:"parameters-30",level:4},{value:"x",id:"x-4",level:5},{value:"Returns",id:"returns-49",level:4}];function h(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L74",children:"lib/provable/field.ts:74"})]}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," is an element of a prime order ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Finite_field",children:"finite field"}),".\nEvery other provable type is built using the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type."]}),"\n",(0,r.jsxs)(s.p,{children:["The field is the ",(0,r.jsx)(s.a,{href:"https://electriccoin.co/blog/the-pasta-curves-for-halo-2-and-beyond/",children:"pasta base field"})," of order 2^254 + 0x224698fc094cf91b992d30ed00000001 (",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field#order",children:"Field.ORDER"}),")."]}),"\n",(0,r.jsxs)(s.p,{children:['You can create a new Field from everything "field-like" (',(0,r.jsx)(s.code,{children:"bigint"}),", integer ",(0,r.jsx)(s.code,{children:"number"}),", decimal ",(0,r.jsx)(s.code,{children:"string"}),", ",(0,r.jsx)(s.code,{children:"Field"}),")."]}),"\n",(0,r.jsx)(s.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:'Field(10n); // Field construction from a big integer\nField(100); // Field construction from a number\nField("1"); // Field construction from a decimal string\n'})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Beware"}),": Fields ",(0,r.jsx)(s.em,{children:"cannot"})," be constructed from fractional numbers or alphanumeric strings:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:'Field(3.141); // ERROR: Cannot convert a float to a field element\nField("abc"); // ERROR: Invalid argument "abc"\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Creating a Field from a negative number can result in unexpected behavior if you are not familiar with ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Modular_arithmetic",children:"modular arithmetic"}),"."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"const x = Field(-1); // Valid Field construction from negative number\nconst y = Field(Field.ORDER - 1n); // equivalent to `x`\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Important"}),': All the functions defined on a Field (arithmetic, logic, etc.) take their arguments as "field-like". A Field itself is also defined as a "field-like" element.']}),"\n",(0,r.jsx)(s.h2,{id:"param",children:"Param"}),"\n",(0,r.jsxs)(s.p,{children:["the value to convert to a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})]}),"\n",(0,r.jsx)(s.h2,{id:"constructors",children:"Constructors"}),"\n",(0,r.jsx)(s.h3,{id:"new-field",children:"new Field()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"new Field(x: string | number | bigint | FieldConst | FieldVar | Field): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L86",children:"lib/provable/field.ts:86"})]}),"\n",(0,r.jsxs)(s.p,{children:['Coerce anything "field-like" (bigint, number, string, and ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),") to a Field."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"x",children:"x"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.code,{children:"FieldConst"})," | ",(0,r.jsx)(s.code,{children:"FieldVar"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"value",children:"value"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"value: FieldVar;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L75",children:"lib/provable/field.ts:75"})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"order",children:"ORDER"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static ORDER: bigint = Fp.modulus;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L81",children:"lib/provable/field.ts:81"})]}),"\n",(0,r.jsxs)(s.p,{children:["The order of the pasta curve that ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type build on as a ",(0,r.jsx)(s.code,{children:"bigint"}),".\nOrder of the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," is 28948022309329048855892746252171976963363056481941560715954676764349967630337."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"sizeinbits",children:"sizeInBits"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static sizeInBits: number = Fp.sizeInBits;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L1100",children:"lib/provable/field.ts:1100"})]}),"\n",(0,r.jsxs)(s.p,{children:["The size of a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element in bits - 255."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"sizeinbytes",children:"sizeInBytes"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static sizeInBytes: number = BinableFp.sizeInBytes;\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L1095",children:"lib/provable/field.ts:1095"})]}),"\n",(0,r.jsxs)(s.p,{children:["The size of a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element in bytes - 32."]}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"add",children:"add()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"add(y: string | number | bigint | Field): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L239",children:"lib/provable/field.ts:239"})]}),"\n",(0,r.jsxs)(s.p,{children:["Add a field-like value to this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['a "field-like" value to add to the ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element equivalent to the modular addition of the two value."]}),"\n",(0,r.jsx)(s.h4,{id:"examples-1",children:"Examples"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const x = Field(3);\nconst sum = x.add(5);\n\nsum.assertEquals(Field(8));\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This is a modular addition in the pasta field."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const x = Field(1);\nconst sum = x.add(Field(-7));\n\n// If you try to print sum - `console.log(sum.toBigInt())` - you will realize that it prints a very big integer because this is modular arithmetic, and 1 + (-7) circles around the field to become p - 6.\n// You can use the reverse operation of addition (subtraction) to prove the sum is calculated correctly.\n\nsum.sub(x).assertEquals(Field(-7));\nsum.sub(Field(-7)).assertEquals(x);\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"assertbool",children:"assertBool()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"assertBool(message?: string): Bool\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L767",children:"lib/provable/field.ts:767"})]}),"\n",(0,r.jsxs)(s.p,{children:["Prove that this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," is equal to 0 or 1.\nReturns the Field wrapped in a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"If the assertion fails, the code throws an error."}),"\n",(0,r.jsx)(s.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"message",children:"message?"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"string"})}),"\n",(0,r.jsx)(s.p,{children:"a string error message to print if the assertion fails, optional."}),"\n",(0,r.jsx)(s.h4,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:(0,r.jsx)(s.code,{children:"Bool"})})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"assertequals",children:"assertEquals()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"assertEquals(y: string | number | bigint | Field, message?: string): void\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L197",children:"lib/provable/field.ts:197"})]}),"\n",(0,r.jsxs)(s.p,{children:["Assert that this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is equal another "field-like" value.\nCalling this function is equivalent to ',(0,r.jsx)(s.code,{children:"Field(...).equals(...).assertEquals(Bool(true))"}),".\nSee ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field#equals",children:"Field.equals"})," for more details."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Important"}),": If an assertion fails, the code throws an error."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y-1",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['the "field-like" value to compare & assert with this ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h5,{id:"message-1",children:"message?"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"string"})}),"\n",(0,r.jsx)(s.p,{children:"a string error message to print if the assertion fails, optional."}),"\n",(0,r.jsx)(s.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"void"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"assertgreaterthan",children:"assertGreaterThan()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"assertGreaterThan(y: string | number | bigint | Field, message?: string): void\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L701",children:"lib/provable/field.ts:701"})]}),"\n",(0,r.jsxs)(s.p,{children:["Assert that this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is greater than another "field-like" value.']}),"\n",(0,r.jsxs)(s.p,{children:["Note: This uses fewer constraints than ",(0,r.jsx)(s.code,{children:"x.greaterThan(y).assertTrue()"}),".\nSee ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field#greaterthan",children:"Field.greaterThan"})," for more details."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Important"}),": If an assertion fails, the code throws an error."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y-2",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['the "field-like" value to compare & assert with this ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h5,{id:"message-2",children:"message?"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"string"})}),"\n",(0,r.jsx)(s.p,{children:"a string error message to print if the assertion fails, optional."}),"\n",(0,r.jsx)(s.h4,{id:"returns-4",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"void"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"assertgreaterthanorequal",children:"assertGreaterThanOrEqual()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"assertGreaterThanOrEqual(y: string | number | bigint | Field, message?: string): void\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L716",children:"lib/provable/field.ts:716"})]}),"\n",(0,r.jsxs)(s.p,{children:["Assert that this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is greater than or equal to another "field-like" value.']}),"\n",(0,r.jsxs)(s.p,{children:["Note: This uses fewer constraints than ",(0,r.jsx)(s.code,{children:"x.greaterThanOrEqual(y).assertTrue()"}),".\nSee ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field#greaterthanorequal",children:"Field.greaterThanOrEqual"})," for more details."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Important"}),": If an assertion fails, the code throws an error."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y-3",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['the "field-like" value to compare & assert with this ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h5,{id:"message-3",children:"message?"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"string"})}),"\n",(0,r.jsx)(s.p,{children:"a string error message to print if the assertion fails, optional."}),"\n",(0,r.jsx)(s.h4,{id:"returns-5",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"void"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"assertlessthan",children:"assertLessThan()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"assertLessThan(y: string | number | bigint | Field, message?: string): void\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L651",children:"lib/provable/field.ts:651"})]}),"\n",(0,r.jsxs)(s.p,{children:["Assert that this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is less than another "field-like" value.']}),"\n",(0,r.jsxs)(s.p,{children:["Note: This uses fewer constraints than ",(0,r.jsx)(s.code,{children:"x.lessThan(y).assertTrue()"}),".\nSee ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field#lessthan",children:"lessThan"})," for more details."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Important"}),": If an assertion fails, the code throws an error."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y-4",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['the "field-like" value to compare & assert with this ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h5,{id:"message-4",children:"message?"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"string"})}),"\n",(0,r.jsx)(s.p,{children:"a string error message to print if the assertion fails, optional."}),"\n",(0,r.jsx)(s.h4,{id:"returns-6",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"void"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"assertlessthanorequal",children:"assertLessThanOrEqual()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"assertLessThanOrEqual(y: string | number | bigint | Field, message?: string): void\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L676",children:"lib/provable/field.ts:676"})]}),"\n",(0,r.jsxs)(s.p,{children:["Assert that this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is less than or equal to another "field-like" value.']}),"\n",(0,r.jsxs)(s.p,{children:["Note: This uses fewer constraints than ",(0,r.jsx)(s.code,{children:"x.lessThanOrEqual(y).assertTrue()"}),".\nSee ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field#lessthanorequal",children:"Field.lessThanOrEqual"})," for more details."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Important"}),": If an assertion fails, the code throws an error."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y-5",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['the "field-like" value to compare & assert with this ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h5,{id:"message-5",children:"message?"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"string"})}),"\n",(0,r.jsx)(s.p,{children:"a string error message to print if the assertion fails, optional."}),"\n",(0,r.jsx)(s.h4,{id:"returns-7",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"void"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"assertnotequals",children:"assertNotEquals()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"assertNotEquals(y: string | number | bigint | Field, message?: string): void\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L733",children:"lib/provable/field.ts:733"})]}),"\n",(0,r.jsxs)(s.p,{children:["Assert that this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," does not equal another field-like value."]}),"\n",(0,r.jsxs)(s.p,{children:["Note: This uses fewer constraints than ",(0,r.jsx)(s.code,{children:"x.equals(y).assertFalse()"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y-6",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['the "field-like" value to compare & assert with this ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h5,{id:"message-6",children:"message?"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"string"})}),"\n",(0,r.jsx)(s.p,{children:"a string error message to print if the assertion fails, optional."}),"\n",(0,r.jsx)(s.h4,{id:"returns-8",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"void"})}),"\n",(0,r.jsx)(s.h4,{id:"example",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:'x.assertNotEquals(0, "expect x to be non-zero");\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"div",children:"div()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"div(y: string | number | bigint | Field): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L431",children:"lib/provable/field.ts:431"})]}),"\n",(0,r.jsxs)(s.p,{children:['Divide another "field-like" value through this ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsx)(s.p,{children:'Proves that the denominator is non-zero, or throws a "Division by zero" error.'}),"\n",(0,r.jsx)(s.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y-7",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['a "field-like" value to divide with the ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-9",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element equivalent to the modular division of the two value."]}),"\n",(0,r.jsx)(s.h4,{id:"examples-2",children:"Examples"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const x = Field(6);\nconst quotient = x.div(Field(3));\n\nquotient.assertEquals(Field(2));\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This is a modular division in the pasta field. You can think this as the reverse operation of modular multiplication."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const x = Field(2);\nconst y = Field(5);\n\nconst quotient = x.div(y);\n\n// If you try to print quotient - `console.log(quotient.toBigInt())` - you will realize that it prints a very big integer because this is a modular inverse.\n// You can use the reverse operation of division (multiplication) to prove the quotient is calculated correctly.\n\nquotient.mul(y).assertEquals(x);\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"equals",children:"equals()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"equals(y: string | number | bigint | Field): Bool\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L509",children:"lib/provable/field.ts:509"})]}),"\n",(0,r.jsxs)(s.p,{children:["Check if this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is equal another "field-like" value.\nReturns a ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"}),", which is a provable type and can be used to prove the validity of this statement."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y-8",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['the "field-like" value to compare with this ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-10",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:(0,r.jsx)(s.code,{children:"Bool"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"})," representing if this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is equal another "field-like" value.']}),"\n",(0,r.jsx)(s.h4,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"Field(5).equals(5).assertEquals(Bool(true));\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"greaterthan",children:"greaterThan()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"greaterThan(y: string | number | bigint | Field): Bool\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L612",children:"lib/provable/field.ts:612"})]}),"\n",(0,r.jsxs)(s.p,{children:["Check if this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is greater than another "field-like" value.\nReturns a ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"}),", which is a provable type and can be used to prove the validity of this statement."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y-9",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['the "field-like" value to compare with this ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-11",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:(0,r.jsx)(s.code,{children:"Bool"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"})," representing if this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is greater than another "field-like" value.']}),"\n",(0,r.jsx)(s.h4,{id:"examples-3",children:"Examples"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"let isTrue = Field(5).greaterThan(3);\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": As this method compares the bigint value of a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),", it can result in unexpected behaviour when used with negative inputs or modular division."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"let isFalse = Field(1).div(2).greaterThan(Field(1).div(3); // in fact, 1/3 > 1/2\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"greaterthanorequal",children:"greaterThanOrEqual()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"greaterThanOrEqual(y: string | number | bigint | Field): Bool\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L636",children:"lib/provable/field.ts:636"})]}),"\n",(0,r.jsxs)(s.p,{children:["Check if this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is greater than or equal another "field-like" value.\nReturns a ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"}),", which is a provable type and can be used to prove the validity of this statement."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y-10",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['the "field-like" value to compare with this ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-12",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:(0,r.jsx)(s.code,{children:"Bool"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"})," representing if this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is greater than or equal another "field-like" value.']}),"\n",(0,r.jsx)(s.h4,{id:"examples-4",children:"Examples"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"let isTrue = Field(3).greaterThanOrEqual(3);\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": As this method compares the bigint value of a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),", it can result in unexpected behaviour when used with negative inputs or modular division."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"let isFalse = Field(1).div(2).greaterThanOrEqual(Field(1).div(3); // in fact, 1/3 > 1/2\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"inv",children:"inv()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"inv(): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L385",children:"lib/provable/field.ts:385"})]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Modular_multiplicative_inverse",children:"Modular inverse"})," of this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element.\nEquivalent to 1 divided by this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),", in the sense of modular arithmetic."]}),"\n",(0,r.jsx)(s.p,{children:'Proves that this Field is non-zero, or throws a "Division by zero" error.'}),"\n",(0,r.jsx)(s.h4,{id:"returns-13",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element that is equivalent to one divided by this element."]}),"\n",(0,r.jsx)(s.h4,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const someField = Field(42);\nconst inverse = someField.inv();\ninverse.assertEquals(Field(1).div(someField)); // This statement is always true regardless of the value of `someField`\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This is a modular inverse. See ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field#div",children:"div"})," method for more details."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"isconstant",children:"isConstant()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"isConstant(): this is { value: ConstantFieldVar }\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L131",children:"lib/provable/field.ts:131"})]}),"\n",(0,r.jsxs)(s.p,{children:["Check whether this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element is a hard-coded constant in the constraint system.\nIf a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," is constructed outside a zkApp method, it is a constant."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-14",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"this is { value: ConstantFieldVar }"})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.code,{children:"boolean"})," showing if this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," is a constant or not."]}),"\n",(0,r.jsx)(s.h4,{id:"examples-5",children:"Examples"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"console.log(Field(42).isConstant()); // true\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"\\@method myMethod(x: Field) {\n   console.log(x.isConstant()); // false\n}\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"iseven",children:"isEven()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"isEven(): Bool\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L328",children:"lib/provable/field.ts:328"})]}),"\n",(0,r.jsxs)(s.p,{children:["Checks if this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," is even. Returns ",(0,r.jsx)(s.code,{children:"true"})," for even elements and ",(0,r.jsx)(s.code,{children:"false"})," for odd elements."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-15",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:(0,r.jsx)(s.code,{children:"Bool"})})}),"\n",(0,r.jsx)(s.h4,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"let a = Field(5);\na.isEven(); // false\n\nlet b = Field(4);\nb.isEven(); // true\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"isodd",children:"isOdd()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"isOdd(): Bool\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L312",children:"lib/provable/field.ts:312"})]}),"\n",(0,r.jsxs)(s.p,{children:["Checks if this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," is odd. Returns ",(0,r.jsx)(s.code,{children:"true"})," for odd elements and ",(0,r.jsx)(s.code,{children:"false"})," for even elements."]}),"\n",(0,r.jsxs)(s.p,{children:["See ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field#iseven",children:"Field.isEven"})," for examples."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-16",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:(0,r.jsx)(s.code,{children:"Bool"})})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"lessthan",children:"lessThan()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"lessThan(y: string | number | bigint | Field): Bool\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L558",children:"lib/provable/field.ts:558"})]}),"\n",(0,r.jsxs)(s.p,{children:["Check if this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is less than another "field-like" value.\nReturns a ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"}),", which is a provable type and can be used prove to the validity of this statement."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y-11",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['the "field-like" value to compare with this ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-17",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:(0,r.jsx)(s.code,{children:"Bool"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"})," representing if this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is less than another "field-like" value.']}),"\n",(0,r.jsx)(s.h4,{id:"examples-6",children:"Examples"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"let isTrue = Field(2).lessThan(3);\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": As this method compares the bigint value of a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),", it can result in unexpected behavior when used with negative inputs or modular division."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"let isFalse = Field(1).div(3).lessThan(Field(1).div(2)); // in fact, 1/3 > 1/2\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"lessthanorequal",children:"lessThanOrEqual()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"lessThanOrEqual(y: string | number | bigint | Field): Bool\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L585",children:"lib/provable/field.ts:585"})]}),"\n",(0,r.jsxs)(s.p,{children:["Check if this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is less than or equal to another "field-like" value.\nReturns a ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"}),", which is a provable type and can be used to prove the validity of this statement."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y-12",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['the "field-like" value to compare with this ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-18",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:(0,r.jsx)(s.code,{children:"Bool"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"})," representing if this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' is less than or equal another "field-like" value.']}),"\n",(0,r.jsx)(s.h4,{id:"examples-7",children:"Examples"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"let isTrue = Field(3).lessThanOrEqual(3);\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": As this method compares the bigint value of a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),", it can result in unexpected behaviour when used with negative inputs or modular division."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"let isFalse = Field(1).div(3).lessThanOrEqual(Field(1).div(2)); // in fact, 1/3 > 1/2\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"mul",children:"mul()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"mul(y: string | number | bigint | Field): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L347",children:"lib/provable/field.ts:347"})]}),"\n",(0,r.jsxs)(s.p,{children:['Multiply another "field-like" value with this ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y-13",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['a "field-like" value to multiply with the ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-19",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element equivalent to the modular difference of the two value."]}),"\n",(0,r.jsx)(s.h4,{id:"example-4",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const x = Field(3);\nconst product = x.mul(Field(5));\n\nproduct.assertEquals(Field(15));\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"neg",children:"neg()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"neg(): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L267",children:"lib/provable/field.ts:267"})]}),"\n",(0,r.jsxs)(s.p,{children:["Negate a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),". This is equivalent to multiplying the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," by -1."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-20",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element that is equivalent to the element multiplied by -1."]}),"\n",(0,r.jsx)(s.h4,{id:"examples-8",children:"Examples"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const negOne = Field(1).neg();\nnegOne.assertEquals(-1);\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const someField = Field(42);\nsomeField.neg().assertEquals(someField.mul(Field(-1))); // This statement is always true regardless of the value of `someField`\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This is a modular negation. For details, see the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field#sub",children:"sub"})," method."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"seal",children:"seal()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"seal(): \n  | VarField\n  | ConstantField\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L850",children:"lib/provable/field.ts:850"})]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This function is mainly for internal use. Normally it is not intended to be used by a zkApp developer."]}),"\n",(0,r.jsxs)(s.p,{children:["In o1js, addition and scaling (multiplication of variables by a constant) of variables is represented as an AST - ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Abstract_syntax_tree",children:"abstract syntax tree"}),". For example, the expression ",(0,r.jsx)(s.code,{children:"x.add(y).mul(2)"})," is represented as ",(0,r.jsx)(s.code,{children:"Scale(2, Add(x, y))"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["A new internal variable is created only when the variable is needed in a multiplicative or any higher level constraint (for example multiplication of two ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," elements) to represent the operation."]}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"seal()"})," function tells o1js to stop building an AST and create a new variable right away."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-21",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:["| ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/VarField",children:(0,r.jsx)(s.code,{children:"VarField"})}),"\n| ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/ConstantField",children:(0,r.jsx)(s.code,{children:"ConstantField"})})]}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element that is equal to the result of AST that was previously on this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"sqrt",children:"sqrt()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"sqrt(): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L481",children:"lib/provable/field.ts:481"})]}),"\n",(0,r.jsxs)(s.p,{children:["Take the square root of this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element."]}),"\n",(0,r.jsx)(s.p,{children:"Proves that the Field element has a square root in the finite field, or throws if it doesn't."}),"\n",(0,r.jsx)(s.h4,{id:"returns-22",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element equivalent to the square root of the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element."]}),"\n",(0,r.jsx)(s.h4,{id:"example-5",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"let z = x.sqrt();\nz.mul(z).assertEquals(x); // true for every `x`\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This is a modular square root, which is any number z that satisfies z*z = x (mod p).\nNote that, if a square root z exists, there also exists a second one, -z (which is different if z != 0).\nTherefore, this method leaves an adversarial prover the choice between two different values to return."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"square",children:"square()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"square(): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L452",children:"lib/provable/field.ts:452"})]}),"\n",(0,r.jsxs)(s.p,{children:["Square this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-23",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element equivalent to the multiplication of the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element with itself."]}),"\n",(0,r.jsx)(s.h4,{id:"example-6",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const someField = Field(7);\nconst square = someField.square();\n\nsquare.assertEquals(someField.mul(someField)); // This statement is always true regardless of the value of `someField`\n"})}),"\n",(0,r.jsxs)(s.p,{children:["** Warning: This is a modular multiplication. See ",(0,r.jsx)(s.code,{children:"mul()"})," method for more details."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"sub",children:"sub()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"sub(y: string | number | bigint | Field): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L303",children:"lib/provable/field.ts:303"})]}),"\n",(0,r.jsxs)(s.p,{children:['Subtract another "field-like" value from this ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"y-14",children:"y"}),"\n",(0,r.jsxs)(s.p,{children:['a "field-like" value to subtract from the ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-24",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element equivalent to the modular difference of the two value."]}),"\n",(0,r.jsx)(s.h4,{id:"examples-9",children:"Examples"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const x = Field(3);\nconst difference = x.sub(5);\n\ndifference.assertEquals(Field(-2));\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This is a modular subtraction in the pasta field."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const x = Field(1);\nconst difference = x.sub(Field(2));\n\n// If you try to print difference - `console.log(difference.toBigInt())` - you will realize that it prints a very big integer because this is modular arithmetic, and 1 - 2 circles around the field to become p - 1.\n// You can use the reverse operation of subtraction (addition) to prove the difference is calculated correctly.\ndifference.add(Field(2)).assertEquals(x);\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"toauxiliary",children:"toAuxiliary()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"toAuxiliary(): []\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L979",children:"lib/provable/field.ts:979"})]}),"\n",(0,r.jsxs)(s.p,{children:["This function is the implementation of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/Provable#toauxiliary",children:"Provable.toAuxiliary"})," for the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type."]}),"\n",(0,r.jsxs)(s.p,{children:["As the primitive ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type has no auxiliary data associated with it, this function will always return an empty array."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-25",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:"[]"}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"tobigint",children:"toBigInt()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"toBigInt(): bigint\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L165",children:"lib/provable/field.ts:165"})]}),"\n",(0,r.jsxs)(s.p,{children:["Serialize the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," to a bigint, e.g. for printing. Trying to print a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," without this function will directly stringify the Field object, resulting in unreadable output."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This operation does ",(0,r.jsx)(s.em,{children:"not"})," affect the circuit and can't be used to prove anything about the bigint representation of the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),". Use the operation only during debugging."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-26",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"bigint"})}),"\n",(0,r.jsx)(s.p,{children:"A bigint equivalent to the bigint representation of the Field."}),"\n",(0,r.jsx)(s.h4,{id:"example-7",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const someField = Field(42);\nconsole.log(someField.toBigInt());\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"tobits",children:"toBits()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"toBits(length: number): Bool[]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L794",children:"lib/provable/field.ts:794"})]}),"\n",(0,r.jsxs)(s.p,{children:["Returns an array of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"})," elements representing ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Endianness",children:"little endian binary representation"})," of this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element."]}),"\n",(0,r.jsxs)(s.p,{children:["If you use the optional ",(0,r.jsx)(s.code,{children:"length"})," argument, proves that the field element fits in ",(0,r.jsx)(s.code,{children:"length"})," bits.\nThe ",(0,r.jsx)(s.code,{children:"length"})," has to be between 0 and 254 and the method throws if it isn't."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": The cost of this operation in a zk proof depends on the ",(0,r.jsx)(s.code,{children:"length"})," you specify,\nwhich by default is 254 bits. Prefer to pass a smaller ",(0,r.jsx)(s.code,{children:"length"})," if possible."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"length",children:"length"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"number"})," = ",(0,r.jsx)(s.code,{children:"254"})]}),"\n",(0,r.jsxs)(s.p,{children:["the number of bits to fit the element. If the element does not fit in ",(0,r.jsx)(s.code,{children:"length"})," bits, the functions throws an error."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-27",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:(0,r.jsx)(s.code,{children:"Bool"})}),"[]"]}),"\n",(0,r.jsxs)(s.p,{children:["An array of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"})," element representing little endian binary representation of this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"toconstant",children:"toConstant()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"toConstant(): ConstantField\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L148",children:"lib/provable/field.ts:148"})]}),"\n",(0,r.jsxs)(s.p,{children:["Create a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element equivalent to this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element's value,\nbut is a constant.\nSee ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field#isconstant",children:"Field.isConstant"})," for more information about what is a constant ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-28",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/ConstantField",children:(0,r.jsx)(s.code,{children:"ConstantField"})})}),"\n",(0,r.jsxs)(s.p,{children:["A constant ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element equivalent to this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element."]}),"\n",(0,r.jsx)(s.h4,{id:"example-8",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const someField = Field(42);\nsomeField.toConstant().assertEquals(someField); // Always true\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"tofields",children:"toFields()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"toFields(): Field[]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L970",children:"lib/provable/field.ts:970"})]}),"\n",(0,r.jsxs)(s.p,{children:["This function is the implementation of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/Provable#tofields",children:"Provable.toFields"})," for the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type."]}),"\n",(0,r.jsxs)(s.p,{children:["The result will be always an array of length 1, where the first and only element equals the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," itself."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-29",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})}),"[]"]}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," array of length 1 created from this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"tojson",children:"toJSON()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"toJSON(): string\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L1002",children:"lib/provable/field.ts:1002"})]}),"\n",(0,r.jsxs)(s.p,{children:["Serialize the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," to a JSON string, e.g. for printing. Trying to print a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," without this function will directly stringify the Field object, resulting in unreadable output."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This operation does ",(0,r.jsx)(s.em,{children:"not"})," affect the circuit and can't be used to prove anything about the JSON string representation of the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),". Use the operation only during debugging."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-30",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"string"})}),"\n",(0,r.jsxs)(s.p,{children:["A string equivalent to the JSON representation of the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"example-9",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const someField = Field(42);\nconsole.log(someField.toJSON());\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"tostring",children:"toString()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"toString(): string\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L183",children:"lib/provable/field.ts:183"})]}),"\n",(0,r.jsxs)(s.p,{children:["Serialize the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," to a string, e.g. for printing. Trying to print a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," without this function will directly stringify the Field object, resulting in unreadable output."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This operation does ",(0,r.jsx)(s.em,{children:"not"})," affect the circuit and can't be used to prove anything about the string representation of the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),". Use the operation only during debugging."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-31",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"string"})}),"\n",(0,r.jsx)(s.p,{children:"A string equivalent to the string representation of the Field."}),"\n",(0,r.jsx)(s.h4,{id:"example-10",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const someField = Field(42);\nconsole.log(someField.toString());\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"check",children:"check()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static check(): void\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L940",children:"lib/provable/field.ts:940"})]}),"\n",(0,r.jsxs)(s.p,{children:["This function is the implementation of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/Provable#check",children:"Provable.check"})," in ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type."]}),"\n",(0,r.jsxs)(s.p,{children:["As any field element can be a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),", this function does not create any assertions, so it does nothing."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-32",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"void"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"empty",children:"empty()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static empty(): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L985",children:"lib/provable/field.ts:985"})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-33",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"from",children:"from()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static from(x: string | number | bigint | Field): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L108",children:"lib/provable/field.ts:108"})]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-18",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"x-1",children:"x"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-34",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"frombits",children:"fromBits()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static fromBits(bits: (boolean | Bool)[]): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L821",children:"lib/provable/field.ts:821"})]}),"\n",(0,r.jsxs)(s.p,{children:["Convert a bit array into a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element using ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Endianness",children:"little endian binary representation"})]}),"\n",(0,r.jsx)(s.p,{children:"The method throws if the given bits do not fit in a single Field element. In this case, no more than 254 bits are allowed because some 255 bit integers do not fit into a single Field element."}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Important"}),": If the given ",(0,r.jsx)(s.code,{children:"bits"})," array is an array of ",(0,r.jsx)(s.code,{children:"booleans"})," or ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"})," elements that all are ",(0,r.jsx)(s.code,{children:"constant"}),", the resulting ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element will be a constant as well. Or else, if the given array is a mixture of constants and variables of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"})," type, the resulting ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," will be a variable as well."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-19",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"bits",children:"bits"}),"\n",(0,r.jsxs)(s.p,{children:["(",(0,r.jsx)(s.code,{children:"boolean"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:(0,r.jsx)(s.code,{children:"Bool"})}),")[]"]}),"\n",(0,r.jsxs)(s.p,{children:["An array of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"})," or ",(0,r.jsx)(s.code,{children:"boolean"})," type."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-35",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element matching the ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Endianness",children:"little endian binary representation"})," of the given ",(0,r.jsx)(s.code,{children:"bits"})," array."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"frombytes",children:"fromBytes()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static fromBytes(bytes: number[]): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L1088",children:"lib/provable/field.ts:1088"})]}),"\n",(0,r.jsxs)(s.p,{children:["Coerce a new ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element using the ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Endianness",children:"little-endian"})," representation of the given ",(0,r.jsx)(s.code,{children:"bytes"})," array.\nNote that the given ",(0,r.jsx)(s.code,{children:"bytes"})," array may have at most 32 elements as the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," is a ",(0,r.jsx)(s.code,{children:"finite-field"})," in the order of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field#order",children:"Field.ORDER"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This operation does ",(0,r.jsx)(s.em,{children:"not"})," affect the circuit and can't be used to prove anything about the byte representation of the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-20",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"bytes",children:"bytes"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"number"}),"[]"]}),"\n",(0,r.jsxs)(s.p,{children:["The bytes array to coerce the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," from."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-36",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["A new ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element created using the ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Endianness",children:"little-endian"})," representation of the given ",(0,r.jsx)(s.code,{children:"bytes"})," array."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"fromfields",children:"fromFields()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static fromFields(fields: Field[]): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L931",children:"lib/provable/field.ts:931"})]}),"\n",(0,r.jsxs)(s.p,{children:["Implementation of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/Provable#fromfields",children:"Provable.fromFields"})," for the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This function is designed for internal use. It is not intended to be used by a zkApp developer."]}),"\n",(0,r.jsxs)(s.p,{children:["Creates a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," from an array of Fields of length 1."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-21",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"fields",children:"fields"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})}),"[]"]}),"\n",(0,r.jsxs)(s.p,{children:["an array of length 1 serialized from ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," elements."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-37",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["The first ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element of the given array."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"fromjson",children:"fromJSON()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static fromJSON(json: string): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L1034",children:"lib/provable/field.ts:1034"})]}),"\n",(0,r.jsxs)(s.p,{children:['Deserialize a JSON string containing a "field-like" value into a ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This operation does ",(0,r.jsx)(s.em,{children:"not"})," affect the circuit and can't be used to prove anything about the string representation of the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-22",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"json",children:"json"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"string"})}),"\n",(0,r.jsxs)(s.p,{children:['the "field-like" value to coerce the ',(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," from."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-38",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," coerced from the given JSON string."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"fromvalue",children:"fromValue()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static fromValue(x: string | number | bigint | Field): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L959",children:"lib/provable/field.ts:959"})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"Provable<Field>.fromValue()"})}),"\n",(0,r.jsx)(s.h4,{id:"parameters-23",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"x-2",children:"x"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"string"})," | ",(0,r.jsx)(s.code,{children:"number"})," | ",(0,r.jsx)(s.code,{children:"bigint"})," | ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-39",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"random",children:"random()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static random(): Field\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L872",children:"lib/provable/field.ts:872"})]}),"\n",(0,r.jsxs)(s.p,{children:["A random ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-40",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["A random ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element."]}),"\n",(0,r.jsx)(s.h4,{id:"example-11",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"console.log(Field.random().toBigInt()); // Run this code twice!\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"readbytes",children:"readBytes()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static readBytes<N>(bytes: number[], offset: NonNegativeInteger<N>): [Field, number]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L1074",children:"lib/provable/field.ts:1074"})]}),"\n",(0,r.jsxs)(s.p,{children:["Part of the ",(0,r.jsx)(s.code,{children:"Binable"})," interface."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This function is for internal use. It is not intended to be used by a zkApp developer."]}),"\n",(0,r.jsx)(s.h4,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,r.jsxs)(s.p,{children:["\u2022 ",(0,r.jsx)(s.strong,{children:"N"})," ",(0,r.jsx)(s.em,{children:"extends"})," ",(0,r.jsx)(s.code,{children:"number"})]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-24",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"bytes-1",children:"bytes"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"number"}),"[]"]}),"\n",(0,r.jsx)(s.h5,{id:"offset",children:"offset"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"NonNegativeInteger"}),"<",(0,r.jsx)(s.code,{children:"N"}),">"]}),"\n",(0,r.jsx)(s.h4,{id:"returns-41",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:["[",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})}),", ",(0,r.jsx)(s.code,{children:"number"}),"]"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"sizeinfields",children:"sizeInFields()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static sizeInFields(): number\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L916",children:"lib/provable/field.ts:916"})]}),"\n",(0,r.jsxs)(s.p,{children:["This function is the implementation of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/Provable#sizeinfields",children:"Provable.sizeInFields"})," for the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type."]}),"\n",(0,r.jsxs)(s.p,{children:["Size of the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type is 1, as it is the primitive type.\nThis function returns a regular number, so you cannot use it to prove something on chain. You can use it during debugging or to understand the memory complexity of some type."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-42",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"number"})}),"\n",(0,r.jsxs)(s.p,{children:["A number representing the size of the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type in terms of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type itself."]}),"\n",(0,r.jsx)(s.h4,{id:"example-12",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"console.log(Field.sizeInFields()); // Prints 1\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"toauxiliary-1",children:"toAuxiliary()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static toAuxiliary(): []\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L899",children:"lib/provable/field.ts:899"})]}),"\n",(0,r.jsxs)(s.p,{children:["This function is the implementation of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/Provable#toauxiliary",children:"Provable.toAuxiliary"})," for the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type."]}),"\n",(0,r.jsxs)(s.p,{children:["As the primitive ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type has no auxiliary data associated with it, this function will always return an empty array."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-43",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:"[]"}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"tobigint-1",children:"toBigint()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static toBigint(x: Field): bigint\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L952",children:"lib/provable/field.ts:952"})]}),"\n",(0,r.jsxs)(s.p,{children:["Convert a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element to a bigint."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-25",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"x-3",children:"x"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsx)(s.h4,{id:"returns-44",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"bigint"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"tobytes",children:"toBytes()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static toBytes(value: Field): number[]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L1065",children:"lib/provable/field.ts:1065"})]}),"\n",(0,r.jsxs)(s.p,{children:["Create an array of digits equal to the ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Endianness",children:"little-endian"})," byte order of the given ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element.\nNote that the array has always 32 elements as the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," is a ",(0,r.jsx)(s.code,{children:"finite-field"})," in the order of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field#order",children:"Field.ORDER"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This operation does ",(0,r.jsx)(s.em,{children:"not"})," affect the circuit and can't be used to prove anything about the byte representation of the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-26",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"value-1",children:"value"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element to generate the array of bytes of."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-45",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"number"}),"[]"]}),"\n",(0,r.jsxs)(s.p,{children:["An array of digits equal to the ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Endianness",children:"little-endian"})," byte order of the given ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"tofields-1",children:"toFields()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static toFields(value: Field): Field[]\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L890",children:"lib/provable/field.ts:890"})]}),"\n",(0,r.jsxs)(s.p,{children:["This function is the implementation of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/Provable#tofields",children:"Provable.toFields"})," for the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type."]}),"\n",(0,r.jsxs)(s.p,{children:["Static function to serializes a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," into an array of ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," elements.\nThis will be always an array of length 1, where the first and only element equals the given parameter itself."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-27",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"value-2",children:"value"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element to cast the array from."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-46",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})}),"[]"]}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," array of length 1 created from this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"toinput",children:"toInput()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static toInput(value: Field): {\n  fields: Field[];\n}\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L1048",children:"lib/provable/field.ts:1048"})]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This function is mainly for internal use. Normally it is not intended to be used by a zkApp developer."]}),"\n",(0,r.jsxs)(s.p,{children:["This function is the implementation of ",(0,r.jsx)(s.code,{children:"ProvableExtended.toInput()"})," for the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-28",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"value-3",children:"value"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element to get the ",(0,r.jsx)(s.code,{children:"input"})," array."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-47",children:"Returns"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"{\n  fields: Field[];\n}\n"})}),"\n",(0,r.jsxs)(s.p,{children:["An object where the ",(0,r.jsx)(s.code,{children:"fields"})," key is a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," array of length 1 created from this ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsx)(s.h5,{id:"fields-1",children:"fields"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"fields: Field[];\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"tojson-1",children:"toJSON()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static toJSON(value: Field): string\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L1021",children:"lib/provable/field.ts:1021"})]}),"\n",(0,r.jsxs)(s.p,{children:["Serialize the given ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," element to a JSON string, e.g. for printing. Trying to print a ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," without this function will directly stringify the Field object, resulting in unreadable output."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Warning"}),": This operation does ",(0,r.jsx)(s.em,{children:"not"})," affect the circuit and can't be used to prove anything about the JSON string representation of the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),". Use the operation only during debugging."]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-29",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"value-4",children:"value"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsxs)(s.p,{children:["The JSON string to coerce the ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," from."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-48",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"string"})}),"\n",(0,r.jsxs)(s.p,{children:["A string equivalent to the JSON representation of the given ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"example-13",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"const someField = Field(42);\nconsole.log(Field.toJSON(someField));\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"tovalue",children:"toValue()"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"static toValue(x: Field): bigint\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Defined in: ",(0,r.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/field.ts#L945",children:"lib/provable/field.ts:945"})]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"Provable<Field>.toValue()"})}),"\n",(0,r.jsx)(s.h4,{id:"parameters-30",children:"Parameters"}),"\n",(0,r.jsx)(s.h5,{id:"x-4",children:"x"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(s.code,{children:"Field"})})}),"\n",(0,r.jsx)(s.h4,{id:"returns-49",children:"Returns"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"bigint"})})]})}function o(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);