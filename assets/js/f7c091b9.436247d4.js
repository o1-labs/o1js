"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[6914],{28453:(e,s,r)=>{r.d(s,{R:()=>l,x:()=>c});var n=r(96540);const i={},a=n.createContext(i);function l(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(a.Provider,{value:s},e.children)}},40878:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"api-reference/classes/EcdsaSignature","title":"EcdsaSignature","description":"Defined in25","source":"@site/docs/api-reference/classes/EcdsaSignature.mdx","sourceDirName":"api-reference/classes","slug":"/api-reference/classes/EcdsaSignature","permalink":"/o1js/api-reference/classes/EcdsaSignature","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/api-reference/classes/EcdsaSignature.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"DynamicProof","permalink":"/o1js/api-reference/classes/DynamicProof"},"next":{"title":"Field","permalink":"/o1js/api-reference/classes/Field"}}');var i=r(74848),a=r(28453);const l={},c=void 0,t={},d=[{value:"Constructors",id:"constructors",level:2},{value:"new EcdsaSignature()",id:"new-ecdsasignature",level:3},{value:"Parameters",id:"parameters",level:4},{value:"signature",id:"signature",level:5},{value:"r",id:"r",level:6},{value:"s",id:"s",level:6},{value:"Returns",id:"returns",level:4},{value:"Properties",id:"properties",level:2},{value:"r",id:"r-1",level:3},{value:"s",id:"s-1",level:3},{value:"_Curve?",id:"_curve",level:3},{value:"_provable?",id:"_provable",level:3},{value:"Accessors",id:"accessors",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Get Signature",id:"get-signature",level:4},{value:"Returns",id:"returns-1",level:5},{value:"Curve",id:"curve",level:3},{value:"Get Signature",id:"get-signature-1",level:4},{value:"Returns",id:"returns-2",level:5},{value:"provable",id:"provable",level:3},{value:"Get Signature",id:"get-signature-2",level:4},{value:"Returns",id:"returns-3",level:5},{value:"Methods",id:"methods",level:2},{value:"toBigInt()",id:"tobigint",level:3},{value:"Returns",id:"returns-4",level:4},{value:"r",id:"r-2",level:5},{value:"s",id:"s-2",level:5},{value:"verify()",id:"verify",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"message",id:"message",level:5},{value:"publicKey",id:"publickey",level:5},{value:"Returns",id:"returns-5",level:4},{value:"Throws",id:"throws",level:4},{value:"Example",id:"example",level:4},{value:"verifyEthers()",id:"verifyethers",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"message",id:"message-1",level:5},{value:"publicKey",id:"publickey-1",level:5},{value:"Returns",id:"returns-6",level:4},{value:"Throws",id:"throws-1",level:4},{value:"Example",id:"example-1",level:4},{value:"verifySignedHash()",id:"verifysignedhash",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"msgHash",id:"msghash",level:5},{value:"publicKey",id:"publickey-2",level:5},{value:"Returns",id:"returns-7",level:4},{value:"check()",id:"check",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"signature",id:"signature-1",level:5},{value:"Returns",id:"returns-8",level:4},{value:"from()",id:"from",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"signature",id:"signature-2",level:5},{value:"Returns",id:"returns-9",level:4},{value:"fromHex()",id:"fromhex",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"rawSignature",id:"rawsignature",level:5},{value:"Returns",id:"returns-10",level:4},{value:"sign()",id:"sign",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"message",id:"message-2",level:5},{value:"privateKey",id:"privatekey",level:5},{value:"Returns",id:"returns-11",level:4},{value:"signHash()",id:"signhash",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"msgHash",id:"msghash-1",level:5},{value:"privateKey",id:"privatekey-1",level:5},{value:"Returns",id:"returns-12",level:4}];function o(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L25",children:"lib/provable/crypto/foreign-ecdsa.ts:25"})]}),"\n",(0,i.jsx)(s.h2,{id:"constructors",children:"Constructors"}),"\n",(0,i.jsx)(s.h3,{id:"new-ecdsasignature",children:"new EcdsaSignature()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"new EcdsaSignature(signature: {\n  r: number | bigint | Field3 | AlmostForeignField;\n  s: number | bigint | Field3 | AlmostForeignField;\n }): EcdsaSignature\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L34",children:"lib/provable/crypto/foreign-ecdsa.ts:34"})]}),"\n",(0,i.jsxs)(s.p,{children:["Create a new ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature",children:"EcdsaSignature"})," from an object containing the scalars r and s."]}),"\n",(0,i.jsxs)(s.p,{children:["Note: Inputs must be range checked if they originate from a different field with a different modulus or if they are not constants. Please refer to the ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/ForeignField",children:"ForeignField"})," constructor comments for more details."]}),"\n",(0,i.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsx)(s.h5,{id:"signature",children:"signature"}),"\n",(0,i.jsx)(s.h6,{id:"r",children:"r"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"number"})," | ",(0,i.jsx)(s.code,{children:"bigint"})," | ",(0,i.jsx)(s.code,{children:"Field3"})," | ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/AlmostForeignField",children:(0,i.jsx)(s.code,{children:"AlmostForeignField"})})]}),"\n",(0,i.jsx)(s.h6,{id:"s",children:"s"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"number"})," | ",(0,i.jsx)(s.code,{children:"bigint"})," | ",(0,i.jsx)(s.code,{children:"Field3"})," | ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/AlmostForeignField",children:(0,i.jsx)(s.code,{children:"AlmostForeignField"})})]}),"\n",(0,i.jsx)(s.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature",children:(0,i.jsx)(s.code,{children:"EcdsaSignature"})})}),"\n",(0,i.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(s.h3,{id:"r-1",children:"r"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"r: AlmostForeignField;\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L26",children:"lib/provable/crypto/foreign-ecdsa.ts:26"})]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"s-1",children:"s"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"s: AlmostForeignField;\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L27",children:"lib/provable/crypto/foreign-ecdsa.ts:27"})]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"_curve",children:"_Curve?"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"static optional _Curve: typeof ForeignCurve;\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L215",children:"lib/provable/crypto/foreign-ecdsa.ts:215"})]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"_provable",children:"_provable?"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"static optional _provable: ProvablePureExtended<EcdsaSignature, {\n  r: bigint;\n  s: bigint;\n }, {\n  r: string;\n  s: string;\n}>;\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L216",children:"lib/provable/crypto/foreign-ecdsa.ts:216"})]}),"\n",(0,i.jsx)(s.h2,{id:"accessors",children:"Accessors"}),"\n",(0,i.jsx)(s.h3,{id:"constructor",children:"Constructor"}),"\n",(0,i.jsx)(s.h4,{id:"get-signature",children:"Get Signature"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"get Constructor(): typeof EcdsaSignature\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L212",children:"lib/provable/crypto/foreign-ecdsa.ts:212"})]}),"\n",(0,i.jsx)(s.h5,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"typeof"})," ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature",children:(0,i.jsx)(s.code,{children:"EcdsaSignature"})})]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"curve",children:"Curve"}),"\n",(0,i.jsx)(s.h4,{id:"get-signature-1",children:"Get Signature"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"get static Curve(): typeof ForeignCurve\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L225",children:"lib/provable/crypto/foreign-ecdsa.ts:225"})]}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/ForeignCurve",children:"ForeignCurve"})," on which the ECDSA signature is defined."]}),"\n",(0,i.jsx)(s.h5,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.em,{children:"typeof"})," ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/ForeignCurve",children:(0,i.jsx)(s.code,{children:"ForeignCurve"})})]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"provable",children:"provable"}),"\n",(0,i.jsx)(s.h4,{id:"get-signature-2",children:"Get Signature"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"get static provable(): ProvablePureExtended<EcdsaSignature, {\n  r: bigint;\n  s: bigint;\n }, {\n  r: string;\n  s: string;\n}>\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L232",children:"lib/provable/crypto/foreign-ecdsa.ts:232"})]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"Provable<EcdsaSignature>"})}),"\n",(0,i.jsx)(s.h5,{id:"returns-3",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/ProvablePureExtended",children:(0,i.jsx)(s.code,{children:"ProvablePureExtended"})}),"<",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature",children:(0,i.jsx)(s.code,{children:"EcdsaSignature"})}),", {\n",(0,i.jsx)(s.code,{children:"r"}),": ",(0,i.jsx)(s.code,{children:"bigint"}),";\n",(0,i.jsx)(s.code,{children:"s"}),": ",(0,i.jsx)(s.code,{children:"bigint"}),";\n}, {\n",(0,i.jsx)(s.code,{children:"r"}),": ",(0,i.jsx)(s.code,{children:"string"}),";\n",(0,i.jsx)(s.code,{children:"s"}),": ",(0,i.jsx)(s.code,{children:"string"}),";\n}>"]}),"\n",(0,i.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(s.h3,{id:"tobigint",children:"toBigInt()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"toBigInt(): {\n  r: bigint;\n  s: bigint;\n}\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L62",children:"lib/provable/crypto/foreign-ecdsa.ts:62"})]}),"\n",(0,i.jsx)(s.p,{children:"Convert this signature to an object with bigint fields."}),"\n",(0,i.jsx)(s.h4,{id:"returns-4",children:"Returns"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"{\n  r: bigint;\n  s: bigint;\n}\n"})}),"\n",(0,i.jsx)(s.h5,{id:"r-2",children:"r"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"r: bigint;\n"})}),"\n",(0,i.jsx)(s.h5,{id:"s-2",children:"s"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"s: bigint;\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"verify",children:"verify()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"verify(message: Bytes, publicKey: FlexiblePoint): Bool\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L100",children:"lib/provable/crypto/foreign-ecdsa.ts:100"})]}),"\n",(0,i.jsxs)(s.p,{children:["Verify the ECDSA signature given the message (an array of bytes) and public key (a ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature#curve",children:"Curve"})," point)."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Important:"})," This method returns a ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"})," which indicates whether the signature is valid.\nSo, to actually prove validity of a signature, you need to assert that the result is true."]}),"\n",(0,i.jsx)(s.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsx)(s.h5,{id:"message",children:"message"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"Bytes"})}),"\n",(0,i.jsx)(s.h5,{id:"publickey",children:"publicKey"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/FlexiblePoint",children:(0,i.jsx)(s.code,{children:"FlexiblePoint"})})}),"\n",(0,i.jsx)(s.h4,{id:"returns-5",children:"Returns"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:(0,i.jsx)(s.code,{children:"Bool"})})}),"\n",(0,i.jsx)(s.h4,{id:"throws",children:"Throws"}),"\n",(0,i.jsx)(s.p,{children:"if one of the signature scalars is zero or if the public key is not on the curve."}),"\n",(0,i.jsx)(s.h4,{id:"example",children:"Example"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"// create classes for your curve\nclass Secp256k1 extends createForeignCurve(Crypto.CurveParams.Secp256k1) {}\nclass Scalar extends Secp256k1.Scalar {}\nclass Ecdsa extends createEcdsa(Secp256k1) {}\n\nlet message = 'my message';\nlet messageBytes = new TextEncoder().encode(message);\n\n// outside provable code: create inputs\nlet privateKey = Scalar.random();\nlet publicKey = Secp256k1.generator.scale(privateKey);\nlet signature = Ecdsa.sign(messageBytes, privateKey.toBigInt());\n\n// ...\n// in provable code: create input witnesses (or use method inputs, or constants)\nlet pk = Provable.witness(Secp256k1, () => publicKey);\nlet msg = Provable.witness(Provable.Array(Field, 9), () => messageBytes.map(Field));\nlet sig = Provable.witness(Ecdsa, () => signature);\n\n// verify signature\nlet isValid = sig.verify(msg, pk);\nisValid.assertTrue('signature verifies');\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"verifyethers",children:"verifyEthers()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"verifyEthers(message: Bytes, publicKey: FlexiblePoint): Bool\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L145",children:"lib/provable/crypto/foreign-ecdsa.ts:145"})]}),"\n",(0,i.jsxs)(s.p,{children:["Verify an ECDSA signature generated by the ethers.js library, given the message (as a byte array) and a public key (a ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature#curve",children:"Curve"})," point).\nThe message digest used for signing follows the format defined in EIP-191, with the Ethereum-specific prefix."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Important:"})," This method returns a ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"})," which indicates whether the signature is valid.\nSo, to actually prove validity of a signature, you need to assert that the result is true."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Note:"})," This method is specifically designed to verify signatures generated by ethers.js.\nEnsure that the curve being used is Secp256k1, as demonstrated in the example."]}),"\n",(0,i.jsx)(s.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsx)(s.h5,{id:"message-1",children:"message"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"Bytes"})}),"\n",(0,i.jsx)(s.p,{children:"The original message as a byte array."}),"\n",(0,i.jsx)(s.h5,{id:"publickey-1",children:"publicKey"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/FlexiblePoint",children:(0,i.jsx)(s.code,{children:"FlexiblePoint"})})}),"\n",(0,i.jsx)(s.p,{children:"The public key as a point on the Secp256k1 elliptic curve."}),"\n",(0,i.jsx)(s.h4,{id:"returns-6",children:"Returns"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:(0,i.jsx)(s.code,{children:"Bool"})})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["A ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"})," indicating the validity of the signature."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"throws-1",children:"Throws"}),"\n",(0,i.jsx)(s.p,{children:"An error will be thrown if one of the signature scalars is zero or if the public key does not lie on the curve."}),"\n",(0,i.jsx)(s.h4,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"import { Wallet } from 'ethers';\n\n// create the class for Secp256k1 curve\nclass Secp256k1 extends createForeignCurve(Crypto.CurveParams.Secp256k1) {}\nclass Ecdsa extends createEcdsa(Secp256k1) {}\n\n// outside provable code: create inputs\nlet message = 'my message';\nlet signatureRaw = await wallet.signMessage(message);\nlet compressedPublicKey = wallet.signingKey.compressedPublicKey;\n\n// this also works for uncompressed public keys (wallet.signingKey.publicKey)\nlet publicKey = Secp256k1.fromEthers(compressedPublicKey.slice(2));\nlet signature = Ecdsa.fromHex(signatureRaw);\n\n// ...\n// in provable code: create input witnesses (or use method inputs, or constants)\n// and verify the signature\nlet isValid = signature.verifyEthers(Bytes.fromString(message), publicKey);\nisValid.assertTrue('signature verifies');\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"verifysignedhash",children:"verifySignedHash()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"verifySignedHash(msgHash: bigint | Bytes | AlmostForeignField, publicKey: FlexiblePoint): Bool\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L162",children:"lib/provable/crypto/foreign-ecdsa.ts:162"})]}),"\n",(0,i.jsxs)(s.p,{children:["Verify the ECDSA signature given the message hash (a ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/Scalar",children:"Scalar"}),") and public key (a ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature#curve",children:"Curve"})," point)."]}),"\n",(0,i.jsxs)(s.p,{children:["This is a building block of ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature#verify",children:"EcdsaSignature.verify"}),", where the input message is also hashed.\nIn contrast, this method just takes the message hash (a curve scalar, or the output bytes of a hash function)\nas input, giving you flexibility in choosing the hashing algorithm."]}),"\n",(0,i.jsx)(s.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,i.jsx)(s.h5,{id:"msghash",children:"msgHash"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"bigint"})," | ",(0,i.jsx)(s.code,{children:"Bytes"})," | ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/AlmostForeignField",children:(0,i.jsx)(s.code,{children:"AlmostForeignField"})})]}),"\n",(0,i.jsx)(s.h5,{id:"publickey-2",children:"publicKey"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"/o1js/api-reference/type-aliases/FlexiblePoint",children:(0,i.jsx)(s.code,{children:"FlexiblePoint"})})}),"\n",(0,i.jsx)(s.h4,{id:"returns-7",children:"Returns"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/Bool",children:(0,i.jsx)(s.code,{children:"Bool"})})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"check",children:"check()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"static check(signature: EcdsaSignature): void\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L204",children:"lib/provable/crypto/foreign-ecdsa.ts:204"})]}),"\n",(0,i.jsx)(s.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,i.jsx)(s.h5,{id:"signature-1",children:"signature"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature",children:(0,i.jsx)(s.code,{children:"EcdsaSignature"})})}),"\n",(0,i.jsx)(s.h4,{id:"returns-8",children:"Returns"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"void"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"from",children:"from()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"static from(signature: FlexibleSignature): EcdsaSignature\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L45",children:"lib/provable/crypto/foreign-ecdsa.ts:45"})]}),"\n",(0,i.jsxs)(s.p,{children:["Coerce the input to a ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature",children:"EcdsaSignature"}),"."]}),"\n",(0,i.jsx)(s.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,i.jsx)(s.h5,{id:"signature-2",children:"signature"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"FlexibleSignature"})}),"\n",(0,i.jsx)(s.h4,{id:"returns-9",children:"Returns"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature",children:(0,i.jsx)(s.code,{children:"EcdsaSignature"})})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"fromhex",children:"fromHex()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"static fromHex(rawSignature: string): EcdsaSignature\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L54",children:"lib/provable/crypto/foreign-ecdsa.ts:54"})]}),"\n",(0,i.jsxs)(s.p,{children:["Create an ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature",children:"EcdsaSignature"})," from a raw 130-char hex string as used in\n",(0,i.jsx)(s.a,{href:"https://ethereum.org/en/developers/docs/transactions/#typed-transaction-envelope",children:"Ethereum transactions"}),"."]}),"\n",(0,i.jsx)(s.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,i.jsx)(s.h5,{id:"rawsignature",children:"rawSignature"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"string"})}),"\n",(0,i.jsx)(s.h4,{id:"returns-10",children:"Returns"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature",children:(0,i.jsx)(s.code,{children:"EcdsaSignature"})})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"sign",children:"sign()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"static sign(message: Uint8Array | (number | bigint)[], privateKey: bigint): EcdsaSignature\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L181",children:"lib/provable/crypto/foreign-ecdsa.ts:181"})]}),"\n",(0,i.jsxs)(s.p,{children:["Create an ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature",children:"EcdsaSignature"})," by signing a message with a private key."]}),"\n",(0,i.jsx)(s.p,{children:"Note: This method is not provable, and only takes JS bigints as input."}),"\n",(0,i.jsx)(s.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,i.jsx)(s.h5,{id:"message-2",children:"message"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"Uint8Array"})," | (",(0,i.jsx)(s.code,{children:"number"})," | ",(0,i.jsx)(s.code,{children:"bigint"}),")[]"]}),"\n",(0,i.jsx)(s.h5,{id:"privatekey",children:"privateKey"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"bigint"})}),"\n",(0,i.jsx)(s.h4,{id:"returns-11",children:"Returns"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature",children:(0,i.jsx)(s.code,{children:"EcdsaSignature"})})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"signhash",children:"signHash()"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ts",children:"static signHash(msgHash: bigint | Bytes, privateKey: bigint): EcdsaSignature\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Defined in: ",(0,i.jsx)(s.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/crypto/foreign-ecdsa.ts#L196",children:"lib/provable/crypto/foreign-ecdsa.ts:196"})]}),"\n",(0,i.jsxs)(s.p,{children:["Create an ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature",children:"EcdsaSignature"})," by signing a message hash with a private key."]}),"\n",(0,i.jsxs)(s.p,{children:["This is a building block of ",(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature#sign",children:"EcdsaSignature.sign"}),", where the input message is also hashed.\nIn contrast, this method just takes the message hash (a curve scalar, or the output bytes of a hash function)\nas input, giving you flexibility in choosing the hashing algorithm."]}),"\n",(0,i.jsx)(s.p,{children:"Note: This method is not provable, and only takes JS bigints or constant Bytes as input."}),"\n",(0,i.jsx)(s.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,i.jsx)(s.h5,{id:"msghash-1",children:"msgHash"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"bigint"})," | ",(0,i.jsx)(s.code,{children:"Bytes"})]}),"\n",(0,i.jsx)(s.h5,{id:"privatekey-1",children:"privateKey"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.code,{children:"bigint"})}),"\n",(0,i.jsx)(s.h4,{id:"returns-12",children:"Returns"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"/o1js/api-reference/classes/EcdsaSignature",children:(0,i.jsx)(s.code,{children:"EcdsaSignature"})})})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);