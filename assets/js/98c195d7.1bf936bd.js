"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[10385],{6606:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>o,frontMatter:()=>d,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"api-reference/variables/Gadgets","title":"Gadgets","description":"Defined in42","source":"@site/docs/api-reference/variables/Gadgets.mdx","sourceDirName":"api-reference/variables","slug":"/api-reference/variables/Gadgets","permalink":"/o1js/api-reference/variables/Gadgets","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/api-reference/variables/Gadgets.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Field","permalink":"/o1js/api-reference/variables/Field"},"next":{"title":"Group","permalink":"/o1js/api-reference/variables/Group"}}');var r=i(74848),l=i(28453);const d={},a=void 0,t={},h=[{value:"Type declaration",id:"type-declaration",level:2},{value:"addMod32()",id:"addmod32",level:3},{value:"Parameters",id:"parameters",level:4},{value:"x",id:"x",level:5},{value:"y",id:"y",level:5},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:4},{value:"addMod64()",id:"addmod64",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"x",id:"x-1",level:5},{value:"y",id:"y-1",level:5},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:4},{value:"arrayGet()",id:"arrayget",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"array",id:"array",level:5},{value:"index",id:"index",level:5},{value:"Returns",id:"returns-2",level:4},{value:"arrayGetGeneric()",id:"arraygetgeneric",level:3},{value:"Type Parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"type",id:"type",level:5},{value:"array",id:"array-1",level:5},{value:"index",id:"index-1",level:5},{value:"Returns",id:"returns-3",level:4},{value:"BLAKE2B",id:"blake2b",level:3},{value:"Param",id:"param",level:4},{value:"BLAKE2B.IV",id:"blake2biv",level:4},{value:"Get Signature",id:"get-signature",level:5},{value:"Returns",id:"returns-4",level:6},{value:"BLAKE2B.hash()",id:"blake2bhash",level:4},{value:"Parameters",id:"parameters-4",level:5},{value:"data",id:"data",level:6},{value:"digestLength",id:"digestlength",level:6},{value:"Returns",id:"returns-5",level:5},{value:"Constants",id:"constants",level:3},{value:"Constants.l",id:"constantsl",level:4},{value:"Constants.l2",id:"constantsl2",level:4},{value:"Constants.l2Mask",id:"constantsl2mask",level:4},{value:"Constants.l3",id:"constantsl3",level:4},{value:"Constants.lMask",id:"constantslmask",level:4},{value:"divMod32()",id:"divmod32",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"n",id:"n",level:5},{value:"nBits",id:"nbits",level:5},{value:"Returns",id:"returns-6",level:4},{value:"quotient",id:"quotient",level:5},{value:"remainder",id:"remainder",level:5},{value:"Example",id:"example-2",level:4},{value:"divMod64()",id:"divmod64",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"n",id:"n-1",level:5},{value:"nBits",id:"nbits-1",level:5},{value:"Returns",id:"returns-7",level:4},{value:"quotient",id:"quotient-1",level:5},{value:"remainder",id:"remainder-1",level:5},{value:"Example",id:"example-3",level:4},{value:"Field3",id:"field3",level:3},{value:"Field3.provable",id:"field3provable",level:4},{value:"Field3.provable.fromValue()",id:"field3provablefromvalue",level:4},{value:"Parameters",id:"parameters-7",level:5},{value:"x",id:"x-2",level:6},{value:"Returns",id:"returns-8",level:5},{value:"Field3.provable.toValue()",id:"field3provabletovalue",level:4},{value:"Parameters",id:"parameters-8",level:5},{value:"x",id:"x-3",level:6},{value:"Returns",id:"returns-9",level:5},{value:"Field3.split()",id:"field3split",level:4},{value:"Parameters",id:"parameters-9",level:5},{value:"x",id:"x-4",level:6},{value:"Returns",id:"returns-10",level:5},{value:"Field3.from()",id:"field3from",level:4},{value:"Parameters",id:"parameters-10",level:5},{value:"x",id:"x-5",level:6},{value:"Returns",id:"returns-11",level:5},{value:"Field3.isConstant()",id:"field3isconstant",level:4},{value:"Parameters",id:"parameters-11",level:5},{value:"x",id:"x-6",level:6},{value:"Returns",id:"returns-12",level:5},{value:"Field3.toBigint()",id:"field3tobigint",level:4},{value:"Parameters",id:"parameters-12",level:5},{value:"x",id:"x-7",level:6},{value:"Returns",id:"returns-13",level:5},{value:"Field3.toBigints()",id:"field3tobigints",level:4},{value:"Type Parameters",id:"type-parameters-1",level:5},{value:"Parameters",id:"parameters-13",level:5},{value:"xs",id:"xs",level:6},{value:"Returns",id:"returns-14",level:5},{value:"ForeignField",id:"foreignfield",level:3},{value:"ForeignField.sliceField3()",id:"foreignfieldslicefield3",level:4},{value:"Parameters",id:"parameters-14",level:5},{value:"__namedParameters",id:"__namedparameters",level:6},{value:"__namedParameters",id:"__namedparameters-1",level:6},{value:"chunkSize",id:"chunksize",level:6},{value:"maxBits",id:"maxbits",level:6},{value:"Returns",id:"returns-15",level:5},{value:"ForeignField.add()",id:"foreignfieldadd",level:4},{value:"Parameters",id:"parameters-15",level:5},{value:"x",id:"x-8",level:6},{value:"y",id:"y-2",level:6},{value:"f",id:"f",level:6},{value:"Returns",id:"returns-16",level:5},{value:"Example",id:"example-4",level:5},{value:"ForeignField.assertEquals()",id:"foreignfieldassertequals",level:4},{value:"Parameters",id:"parameters-16",level:5},{value:"x",id:"x-9",level:6},{value:"y",id:"y-3",level:6},{value:"Returns",id:"returns-17",level:5},{value:"ForeignField.assertLessThan()",id:"foreignfieldassertlessthan",level:4},{value:"Parameters",id:"parameters-17",level:5},{value:"x",id:"x-10",level:6},{value:"f",id:"f-1",level:6},{value:"Returns",id:"returns-18",level:5},{value:"Throws",id:"throws",level:5},{value:"Example",id:"example-5",level:5},{value:"ForeignField.assertLessThanOrEqual()",id:"foreignfieldassertlessthanorequal",level:4},{value:"Parameters",id:"parameters-18",level:5},{value:"x",id:"x-11",level:6},{value:"f",id:"f-2",level:6},{value:"Returns",id:"returns-19",level:5},{value:"ForeignField.equals()",id:"foreignfieldequals",level:4},{value:"Parameters",id:"parameters-19",level:5},{value:"x",id:"x-12",level:6},{value:"c",id:"c",level:6},{value:"f",id:"f-3",level:6},{value:"Returns",id:"returns-20",level:5},{value:"ForeignField.neg()",id:"foreignfieldneg",level:4},{value:"Parameters",id:"parameters-20",level:5},{value:"x",id:"x-13",level:6},{value:"f",id:"f-4",level:6},{value:"Returns",id:"returns-21",level:5},{value:"Throws",id:"throws-1",level:5},{value:"ForeignField.sub()",id:"foreignfieldsub",level:4},{value:"Parameters",id:"parameters-21",level:5},{value:"x",id:"x-14",level:6},{value:"y",id:"y-4",level:6},{value:"f",id:"f-5",level:6},{value:"Returns",id:"returns-22",level:5},{value:"Throws",id:"throws-2",level:5},{value:"ForeignField.sum()",id:"foreignfieldsum",level:4},{value:"Parameters",id:"parameters-22",level:5},{value:"xs",id:"xs-1",level:6},{value:"signs",id:"signs",level:6},{value:"f",id:"f-6",level:6},{value:"Returns",id:"returns-23",level:5},{value:"Example",id:"example-6",level:5},{value:"ForeignField.toCanonical()",id:"foreignfieldtocanonical",level:4},{value:"Parameters",id:"parameters-23",level:5},{value:"x",id:"x-15",level:6},{value:"f",id:"f-7",level:6},{value:"Returns",id:"returns-24",level:5},{value:"SHA2",id:"sha2",level:3},{value:"Param",id:"param-1",level:4},{value:"Param",id:"param-2",level:4},{value:"SHA2.compression()",id:"sha2compression",level:4},{value:"Type Parameters",id:"type-parameters-2",level:5},{value:"Parameters",id:"parameters-24",level:5},{value:"length",id:"length",level:6},{value:"H",id:"h",level:6},{value:"W",id:"w",level:6},{value:"Returns",id:"returns-25",level:5},{value:"SHA2.messageSchedule()",id:"sha2messageschedule",level:4},{value:"Type Parameters",id:"type-parameters-3",level:5},{value:"Parameters",id:"parameters-25",level:5},{value:"length",id:"length-1",level:6},{value:"M",id:"m",level:6},{value:"Returns",id:"returns-26",level:5},{value:"SHA2.padding()",id:"sha2padding",level:4},{value:"Type Parameters",id:"type-parameters-4",level:5},{value:"Parameters",id:"parameters-26",level:5},{value:"length",id:"length-2",level:6},{value:"data",id:"data-1",level:6},{value:"Returns",id:"returns-27",level:5},{value:"SHA2.hash()",id:"sha2hash",level:4},{value:"Type Parameters",id:"type-parameters-5",level:5},{value:"Parameters",id:"parameters-27",level:5},{value:"length",id:"length-3",level:6},{value:"data",id:"data-2",level:6},{value:"Returns",id:"returns-28",level:5},{value:"SHA2.initialState()",id:"sha2initialstate",level:4},{value:"Type Parameters",id:"type-parameters-6",level:5},{value:"Parameters",id:"parameters-28",level:5},{value:"length",id:"length-4",level:6},{value:"Returns",id:"returns-29",level:5},{value:"<del>SHA256</del>",id:"sha256",level:3},{value:"Param",id:"param-3",level:4},{value:"Deprecated",id:"deprecated",level:4},{value:"SHA256.compression()",id:"sha256compression",level:4},{value:"Parameters",id:"parameters-29",level:5},{value:"H",id:"h-1",level:6},{value:"W",id:"w-1",level:6},{value:"Returns",id:"returns-30",level:5},{value:"SHA256.createMessageSchedule()",id:"sha256createmessageschedule",level:4},{value:"Parameters",id:"parameters-30",level:5},{value:"M",id:"m-1",level:6},{value:"Returns",id:"returns-31",level:5},{value:"SHA256.padding()",id:"sha256padding",level:4},{value:"Parameters",id:"parameters-31",level:5},{value:"data",id:"data-3",level:6},{value:"Returns",id:"returns-32",level:5},{value:"SHA256.initialState",id:"sha256initialstate",level:4},{value:"Get Signature",id:"get-signature-1",level:5},{value:"Returns",id:"returns-33",level:6},{value:"SHA256.hash()",id:"sha256hash",level:4},{value:"Parameters",id:"parameters-32",level:5},{value:"data",id:"data-4",level:6},{value:"Returns",id:"returns-34",level:5},{value:"and()",id:"and",level:3},{value:"Parameters",id:"parameters-33",level:4},{value:"a",id:"a",level:5},{value:"b",id:"b",level:5},{value:"length",id:"length-5",level:5},{value:"Returns",id:"returns-35",level:4},{value:"Example",id:"example-7",level:4},{value:"compactMultiRangeCheck()",id:"compactmultirangecheck",level:3},{value:"Parameters",id:"parameters-34",level:4},{value:"xy",id:"xy",level:5},{value:"z",id:"z",level:5},{value:"Returns",id:"returns-36",level:4},{value:"Example",id:"example-8",level:4},{value:"Throws",id:"throws-3",level:4},{value:"inTable()",id:"intable",level:3},{value:"Parameters",id:"parameters-35",level:4},{value:"id",id:"id",level:5},{value:"pair0",id:"pair0",level:5},{value:"pair1?",id:"pair1",level:5},{value:"pair2?",id:"pair2",level:5},{value:"Returns",id:"returns-37",level:4},{value:"isDefinitelyInRangeN()",id:"isdefinitelyinrangen",level:3},{value:"Parameters",id:"parameters-36",level:4},{value:"n",id:"n-2",level:5},{value:"x",id:"x-16",level:5},{value:"Returns",id:"returns-38",level:4},{value:"Example",id:"example-9",level:4},{value:"leftShift32()",id:"leftshift32",level:3},{value:"Parameters",id:"parameters-37",level:4},{value:"field",id:"field",level:5},{value:"bits",id:"bits",level:5},{value:"Returns",id:"returns-39",level:4},{value:"Example",id:"example-10",level:4},{value:"leftShift64()",id:"leftshift64",level:3},{value:"Parameters",id:"parameters-38",level:4},{value:"field",id:"field-1",level:5},{value:"bits",id:"bits-1",level:5},{value:"Returns",id:"returns-40",level:4},{value:"Throws",id:"throws-4",level:4},{value:"Example",id:"example-11",level:4},{value:"multiRangeCheck()",id:"multirangecheck",level:3},{value:"Parameters",id:"parameters-39",level:4},{value:"limbs",id:"limbs",level:5},{value:"Returns",id:"returns-41",level:4},{value:"Example",id:"example-12",level:4},{value:"Throws",id:"throws-5",level:4},{value:"not()",id:"not",level:3},{value:"Parameters",id:"parameters-40",level:4},{value:"a",id:"a-1",level:5},{value:"length",id:"length-6",level:5},{value:"checked",id:"checked",level:5},{value:"Returns",id:"returns-42",level:4},{value:"Example",id:"example-13",level:4},{value:"Throws",id:"throws-6",level:4},{value:"or()",id:"or",level:3},{value:"Parameters",id:"parameters-41",level:4},{value:"a",id:"a-2",level:5},{value:"b",id:"b-1",level:5},{value:"length",id:"length-7",level:5},{value:"Returns",id:"returns-43",level:4},{value:"Example",id:"example-14",level:4},{value:"rangeCheck16()",id:"rangecheck16",level:3},{value:"Parameters",id:"parameters-42",level:4},{value:"x",id:"x-17",level:5},{value:"Returns",id:"returns-44",level:4},{value:"rangeCheck32()",id:"rangecheck32",level:3},{value:"Parameters",id:"parameters-43",level:4},{value:"x",id:"x-18",level:5},{value:"Returns",id:"returns-45",level:4},{value:"Throws",id:"throws-7",level:4},{value:"Example",id:"example-15",level:4},{value:"rangeCheck3x12()",id:"rangecheck3x12",level:3},{value:"Parameters",id:"parameters-44",level:4},{value:"v0",id:"v0",level:5},{value:"v1",id:"v1",level:5},{value:"v2",id:"v2",level:5},{value:"Returns",id:"returns-46",level:4},{value:"Throws",id:"throws-8",level:4},{value:"Example",id:"example-16",level:4},{value:"rangeCheck64()",id:"rangecheck64",level:3},{value:"Parameters",id:"parameters-45",level:4},{value:"x",id:"x-19",level:5},{value:"Returns",id:"returns-47",level:4},{value:"Throws",id:"throws-9",level:4},{value:"Example",id:"example-17",level:4},{value:"rangeCheck8()",id:"rangecheck8",level:3},{value:"Parameters",id:"parameters-46",level:4},{value:"x",id:"x-20",level:5},{value:"Returns",id:"returns-48",level:4},{value:"rangeCheckN()",id:"rangecheckn",level:3},{value:"Parameters",id:"parameters-47",level:4},{value:"n",id:"n-3",level:5},{value:"x",id:"x-21",level:5},{value:"message?",id:"message",level:5},{value:"Returns",id:"returns-49",level:4},{value:"Throws",id:"throws-10",level:4},{value:"Example",id:"example-18",level:4},{value:"rightShift64()",id:"rightshift64",level:3},{value:"Parameters",id:"parameters-48",level:4},{value:"field",id:"field-2",level:5},{value:"bits",id:"bits-2",level:5},{value:"Returns",id:"returns-50",level:4},{value:"Throws",id:"throws-11",level:4},{value:"Example",id:"example-19",level:4},{value:"rotate32()",id:"rotate32",level:3},{value:"Parameters",id:"parameters-49",level:4},{value:"field",id:"field-3",level:5},{value:"bits",id:"bits-3",level:5},{value:"direction",id:"direction",level:5},{value:"Returns",id:"returns-51",level:4},{value:"Throws",id:"throws-12",level:4},{value:"Example",id:"example-20",level:4},{value:"rotate64()",id:"rotate64",level:3},{value:"Parameters",id:"parameters-50",level:4},{value:"field",id:"field-4",level:5},{value:"bits",id:"bits-4",level:5},{value:"direction",id:"direction-1",level:5},{value:"Returns",id:"returns-52",level:4},{value:"Throws",id:"throws-13",level:4},{value:"Example",id:"example-21",level:4},{value:"xor()",id:"xor",level:3},{value:"Parameters",id:"parameters-51",level:4},{value:"a",id:"a-3",level:5},{value:"b",id:"b-2",level:5},{value:"length",id:"length-8",level:5},{value:"Returns",id:"returns-53",level:4},{value:"Throws",id:"throws-14",level:4},{value:"Example",id:"example-22",level:4}];function c(e){const n={a:"a",br:"br",code:"code",del:"del",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const Gadgets: {\n  addMod32: (x: Field, y: Field) => Field;\n  addMod64: (x: Field, y: Field) => Field;\n  arrayGet: (array: Field[], index: Field) => Field;\n  arrayGetGeneric: <T>(type: ProvableType<T>, array: T[], index: Field) => T;\n  BLAKE2B: {\n     get IV: UInt64[];\n     hash: Bytes;\n    };\n  Constants: {\n     l: bigint;\n     l2: bigint;\n     l2Mask: bigint;\n     l3: bigint;\n     lMask: bigint;\n    };\n  divMod32: (n: Field, nBits: number) => {\n     quotient: Field;\n     remainder: Field;\n    };\n  divMod64: (n: Field, nBits: number) => {\n     quotient: Field;\n     remainder: Field;\n    };\n  Field3: {\n     provable: {\n        fromValue: Field3;\n        toValue: bigint;\n       };\n     split: (x: bigint) => bigint3;\n     from: Field3;\n     isConstant: boolean;\n     toBigint: bigint;\n     toBigints: [...{ [i in string | number | symbol]: bigint }[]];\n    };\n  ForeignField: {\n     sliceField3: (__namedParameters: Field3, __namedParameters: {\n        chunkSize: number;\n        maxBits: number;\n       }) => Field[];\n     add: Field3;\n     assertEquals: void;\n     assertLessThan: void;\n     assertLessThanOrEqual: void;\n     equals: Bool;\n     neg: Field3;\n     sub: Field3;\n     sum: Field3;\n     toCanonical: Field3;\n    };\n  SHA2: {\n     compression: <T>(length: Length, H: T[], W: T[]) => T[];\n     messageSchedule: <T>(length: Length, M: T[]) => T[];\n     padding: <T>(length: Length, data: FlexibleBytes) => T[][];\n     hash: Bytes;\n     initialState: T[];\n    };\n  SHA256: {\n     compression: (H: UInt32[], W: UInt32[]) => UInt32[];\n     createMessageSchedule: (M: UInt32[]) => UInt32[];\n     padding: (data: FlexibleBytes) => UInt32[][];\n     get initialState: UInt32[];\n     hash: Bytes;\n    };\n  and: Field;\n  compactMultiRangeCheck: [Field, Field, Field];\n  inTable: void;\n  isDefinitelyInRangeN: Bool;\n  leftShift32: Field;\n  leftShift64: Field;\n  multiRangeCheck: void;\n  not: Field;\n  or: Field;\n  rangeCheck16: void;\n  rangeCheck32: void;\n  rangeCheck3x12: void;\n  rangeCheck64: [Field, Field, Field, Field];\n  rangeCheck8: void;\n  rangeCheckN: void;\n  rightShift64: Field;\n  rotate32: Field;\n  rotate64: Field;\n  xor: Field;\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Defined in: ",(0,r.jsx)(n.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/gadgets/gadgets.ts#L42",children:"lib/provable/gadgets/gadgets.ts:42"})]}),"\n",(0,r.jsx)(n.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,r.jsx)(n.h3,{id:"addmod32",children:"addMod32()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"addMod32: (x: Field, y: Field) => Field;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Addition modulo 2^32. The operation adds two ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," elements in the range [0, 2^32) and returns the result modulo 2^32."]}),"\n",(0,r.jsxs)(n.p,{children:["Asserts that the result is in the range [0, 2^32) using ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#rangecheck32",children:"Gadgets.rangeCheck32"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["It uses ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#divmod32",children:"Gadgets.divMod32"})," internally by adding the two ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," elements and then decomposing the result into ",(0,r.jsx)(n.code,{children:"remainder"})," and ",(0,r.jsx)(n.code,{children:"quotient"})," and returning the ",(0,r.jsx)(n.code,{children:"remainder"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," The gadget assumes both inputs to be in the range [0, 2^64). When called with non-range-checked inputs, be aware that the sum ",(0,r.jsx)(n.code,{children:"a + b"})," can overflow the native field and the gadget can succeed but return an invalid result."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"x",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h5,{id:"y",children:"y"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let a = Field(8n);\nlet b = Field(1n << 32n);\n\nGadgets.addMod32(a, b).assertEquals(Field(8n));\n"})}),"\n",(0,r.jsx)(n.h3,{id:"addmod64",children:"addMod64()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"addMod64: (x: Field, y: Field) => Field;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Addition modulo 2^64. The operation adds two ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," elements in the range [0, 2^64) and returns the result modulo 2^64."]}),"\n",(0,r.jsxs)(n.p,{children:["Asserts that the result is in the range [0, 2^64) using ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#rangecheck64",children:"Gadgets.rangeCheck64"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["It uses ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#divmod64",children:"Gadgets.divMod64"})," internally by adding the two ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," elements and then decomposing the result into ",(0,r.jsx)(n.code,{children:"remainder"})," and ",(0,r.jsx)(n.code,{children:"quotient"})," and returning the ",(0,r.jsx)(n.code,{children:"remainder"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," The gadget assumes both inputs to be in the range [0, 2^64). When called with non-range-checked inputs, be aware that the sum ",(0,r.jsx)(n.code,{children:"a + b"})," can overflow the native field and the gadget can succeed but return an invalid result."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"x-1",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h5,{id:"y-1",children:"y"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let a = Field(8n);\nlet b = Field(1n << 64n);\n\nGadgets.addMod64(a, b).assertEquals(Field(8n));\n"})}),"\n",(0,r.jsx)(n.h3,{id:"arrayget",children:"arrayGet()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"arrayGet: (array: Field[], index: Field) => Field;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get value from array at a Field element index, in O(n) constraints, where n is the array length."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Warning"}),": This gadget assumes that the index is within the array bounds ",(0,r.jsx)(n.code,{children:"[0, n)"}),",\nand returns an unconstrained result otherwise.\nTo use it with an index that is not already guaranteed to be within the array bounds, you should add a suitable range check."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let array = Provable.witnessFields(3, () => [1n, 2n, 3n]);\nlet index = Provable.witness(Field, () => 1n);\n\nlet value = Gadgets.arrayGet(array, index);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": This saves n constraints compared to ",(0,r.jsx)(n.code,{children:"Provable.switch(array.map((_, i) => index.equals(i)), type, array)"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Get value from array in O(n) rows."}),"\n",(0,r.jsx)(n.p,{children:"Assumes that index is in [0, n), returns an unconstrained result otherwise."}),"\n",(0,r.jsx)(n.p,{children:"Note: This saves 0.5*n constraints compared to equals() + switch() even if equals() were implemented optimally."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"array",children:"array"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})}),"[]"]}),"\n",(0,r.jsx)(n.h5,{id:"index",children:"index"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h3,{id:"arraygetgeneric",children:"arrayGetGeneric()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"arrayGetGeneric: <T>(type: ProvableType<T>, array: T[], index: Field) => T;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Get value from array in O(n) constraints."}),"\n",(0,r.jsx)(n.p,{children:"Assumes that index is in [0, n), returns an unconstrained result otherwise."}),"\n",(0,r.jsx)(n.p,{children:"Get value from array in O(n) constraints."}),"\n",(0,r.jsx)(n.p,{children:"Assumes that index is in [0, n), returns an unconstrained result otherwise."}),"\n",(0,r.jsx)(n.h4,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,r.jsxs)(n.p,{children:["\u2022 ",(0,r.jsx)(n.strong,{children:"T"})]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"type",children:"type"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/ProvableType",children:(0,r.jsx)(n.code,{children:"ProvableType"})}),"<",(0,r.jsx)(n.code,{children:"T"}),">"]}),"\n",(0,r.jsx)(n.h5,{id:"array-1",children:"array"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"T"}),"[]"]}),"\n",(0,r.jsx)(n.h5,{id:"index-1",children:"index"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"T"})}),"\n",(0,r.jsx)(n.h3,{id:"blake2b",children:"BLAKE2B"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"BLAKE2B: {\n  get IV: UInt64[];\n  hash: Bytes;\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Implementation of the ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/BLAKE_(hash_function)#BLAKE2",children:"BLAKE2b hash function."})," Hash function with arbitrary length output."]}),"\n",(0,r.jsx)(n.p,{children:"Applies the BLAKE2b hash function to a list of byte-sized elements."}),"\n",(0,r.jsxs)(n.p,{children:["The function accepts ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/Bytes",children:"Bytes"})," as the input message, which is a type that represents a static-length list of byte-sized field elements (range-checked using ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#rangecheck8",children:"Gadgets.rangeCheck8"}),").\nAlternatively, you can pass plain ",(0,r.jsx)(n.code,{children:"number[]"}),", ",(0,r.jsx)(n.code,{children:"bigint[]"})," or ",(0,r.jsx)(n.code,{children:"Uint8Array"})," to perform a hash outside provable code."]}),"\n",(0,r.jsxs)(n.p,{children:["Produces an output of ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/Bytes",children:"Bytes"})," that conforms to the chosen digest length."]}),"\n",(0,r.jsx)(n.h4,{id:"param",children:"Param"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/Bytes",children:"Bytes"})," representing the message to hash."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'let preimage = Bytes.fromString("hello world");\nlet digest = Gadgets.BLAKE2b.hash(preimage);\n'})}),"\n",(0,r.jsx)(n.h4,{id:"blake2biv",children:"BLAKE2B.IV"}),"\n",(0,r.jsx)(n.h5,{id:"get-signature",children:"Get Signature"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"get IV(): UInt64[]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Defined in: ",(0,r.jsx)(n.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/gadgets/blake2b.ts#L77",children:"lib/provable/gadgets/blake2b.ts:77"})]}),"\n",(0,r.jsx)(n.h6,{id:"returns-4",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt64",children:(0,r.jsx)(n.code,{children:"UInt64"})}),"[]"]}),"\n",(0,r.jsx)(n.h4,{id:"blake2bhash",children:"BLAKE2B.hash()"}),"\n",(0,r.jsx)(n.h5,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"data",children:"data"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/FlexibleBytes",children:(0,r.jsx)(n.code,{children:"FlexibleBytes"})})}),"\n",(0,r.jsx)(n.h6,{id:"digestlength",children:"digestLength"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"number"})," = ",(0,r.jsx)(n.code,{children:"64"})]}),"\n",(0,r.jsx)(n.h5,{id:"returns-5",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Bytes"})}),"\n",(0,r.jsx)(n.h3,{id:"constants",children:"Constants"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"Constants: {\n  l: bigint;\n  l2: bigint;\n  l2Mask: bigint;\n  l3: bigint;\n  lMask: bigint;\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"Default limb size constants mostly used in range checks."}),"\n",(0,r.jsx)(n.h4,{id:"constantsl",children:"Constants.l"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"l: bigint;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"constantsl2",children:"Constants.l2"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"l2: bigint;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"constantsl2mask",children:"Constants.l2Mask"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"l2Mask: bigint;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"constantsl3",children:"Constants.l3"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"l3: bigint;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"constantslmask",children:"Constants.lMask"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"lMask: bigint;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"divmod32",children:"divMod32()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"divMod32: (n: Field, nBits: number) => {\n  quotient: Field;\n  remainder: Field;\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Division modulo 2^32. The operation decomposes a ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element in the range [0, 2^64) into two 32-bit limbs, ",(0,r.jsx)(n.code,{children:"remainder"})," and ",(0,r.jsx)(n.code,{children:"quotient"}),", using the following equation: ",(0,r.jsx)(n.code,{children:"n = quotient * 2^32 + remainder"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," The gadget acts as a proof that the input is in the range [0, 2^64). If the input exceeds 64 bits, the gadget fails."]}),"\n",(0,r.jsxs)(n.p,{children:["Asserts that both ",(0,r.jsx)(n.code,{children:"remainder"})," and ",(0,r.jsx)(n.code,{children:"quotient"})," are in the range [0, 2^32) using ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#rangecheck32",children:"Gadgets.rangeCheck32"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"n",children:"n"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h5,{id:"nbits",children:"nBits"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"number"})," = ",(0,r.jsx)(n.code,{children:"64"})]}),"\n",(0,r.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"{\n  quotient: Field;\n  remainder: Field;\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"quotient",children:"quotient"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"quotient: Field;\n"})}),"\n",(0,r.jsx)(n.h5,{id:"remainder",children:"remainder"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"remainder: Field;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let n = Field((1n << 32n) + 8n)\nlet { remainder, quotient } = Gadgets.divMod32(n);\n// remainder = 8, quotient = 1\n\nn.assertEquals(quotient.mul(1n << 32n).add(remainder));\n"})}),"\n",(0,r.jsx)(n.h3,{id:"divmod64",children:"divMod64()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"divMod64: (n: Field, nBits: number) => {\n  quotient: Field;\n  remainder: Field;\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Division modulo 2^64. The operation decomposes a ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element in the range [0, 2^128) into two 64-bit limbs, ",(0,r.jsx)(n.code,{children:"remainder"})," and ",(0,r.jsx)(n.code,{children:"quotient"}),", using the following equation: ",(0,r.jsx)(n.code,{children:"n = quotient * 2^64 + remainder"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," The gadget acts as a proof that the input is in the range [0, 2^128). If the input exceeds 128 bits, the gadget fails."]}),"\n",(0,r.jsxs)(n.p,{children:["Asserts that both ",(0,r.jsx)(n.code,{children:"remainder"})," and ",(0,r.jsx)(n.code,{children:"quotient"})," are in the range [0, 2^64) using ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#rangecheck64",children:"Gadgets.rangeCheck64"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"n-1",children:"n"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h5,{id:"nbits-1",children:"nBits"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"number"})," = ",(0,r.jsx)(n.code,{children:"128"})]}),"\n",(0,r.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"{\n  quotient: Field;\n  remainder: Field;\n}\n"})}),"\n",(0,r.jsx)(n.h5,{id:"quotient-1",children:"quotient"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"quotient: Field;\n"})}),"\n",(0,r.jsx)(n.h5,{id:"remainder-1",children:"remainder"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"remainder: Field;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let n = Field((1n << 64n) + 8n)\nlet { remainder, quotient } = Gadgets.divMod64(n);\n// remainder = 8, quotient = 1\n\nn.assertEquals(quotient.mul(1n << 64n).add(remainder));\n"})}),"\n",(0,r.jsx)(n.h3,{id:"field3",children:"Field3"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"Field3: {\n  provable: {\n     fromValue: Field3;\n     toValue: bigint;\n    };\n  split: (x: bigint) => bigint3;\n  from: Field3;\n  isConstant: boolean;\n  toBigint: bigint;\n  toBigints: [...{ [i in string | number | symbol]: bigint }[]];\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"Helper methods to interact with 3-limb vectors of Fields."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," This interface does not contain any provable methods."]}),"\n",(0,r.jsx)(n.h4,{id:"field3provable",children:"Field3.provable"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"provable: {\n  fromValue: Field3;\n  toValue: bigint;\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Provable<T>"})," interface for ",(0,r.jsx)(n.code,{children:"Field3 = [Field, Field, Field]"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Note: Witnessing this creates a plain tuple of field elements without any implicit\nrange checks."}),"\n",(0,r.jsx)(n.h4,{id:"field3provablefromvalue",children:"Field3.provable.fromValue()"}),"\n",(0,r.jsx)(n.h5,{id:"parameters-7",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"x-2",children:"x"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"bigint"})," | ",(0,r.jsx)(n.code,{children:"Field3"})]}),"\n",(0,r.jsx)(n.h5,{id:"returns-8",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h4,{id:"field3provabletovalue",children:"Field3.provable.toValue()"}),"\n",(0,r.jsx)(n.h5,{id:"parameters-8",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"x-3",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h5,{id:"returns-9",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"bigint"})}),"\n",(0,r.jsx)(n.h4,{id:"field3split",children:"Field3.split()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"split: (x: bigint) => bigint3;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Splits a bigint into three limbs using bitwise operations."}),"\n",(0,r.jsx)(n.h5,{id:"parameters-9",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"x-4",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"bigint"})}),"\n",(0,r.jsx)(n.h5,{id:"returns-10",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"bigint3"})}),"\n",(0,r.jsx)(n.h4,{id:"field3from",children:"Field3.from()"}),"\n",(0,r.jsx)(n.p,{children:"Turn a bigint into a 3-tuple of Fields"}),"\n",(0,r.jsx)(n.h5,{id:"parameters-10",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"x-5",children:"x"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"bigint"})," | ",(0,r.jsx)(n.code,{children:"Field3"})]}),"\n",(0,r.jsx)(n.h5,{id:"returns-11",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h4,{id:"field3isconstant",children:"Field3.isConstant()"}),"\n",(0,r.jsx)(n.p,{children:"Check whether a 3-tuple of Fields is constant"}),"\n",(0,r.jsx)(n.h5,{id:"parameters-11",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"x-6",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h5,{id:"returns-12",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"boolean"})}),"\n",(0,r.jsx)(n.h4,{id:"field3tobigint",children:"Field3.toBigint()"}),"\n",(0,r.jsx)(n.p,{children:"Turn a 3-tuple of Fields into a bigint"}),"\n",(0,r.jsx)(n.h5,{id:"parameters-12",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"x-7",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h5,{id:"returns-13",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"bigint"})}),"\n",(0,r.jsx)(n.h4,{id:"field3tobigints",children:"Field3.toBigints()"}),"\n",(0,r.jsx)(n.p,{children:"Turn several 3-tuples of Fields into bigints"}),"\n",(0,r.jsx)(n.h5,{id:"type-parameters-1",children:"Type Parameters"}),"\n",(0,r.jsxs)(n.p,{children:["\u2022 ",(0,r.jsx)(n.strong,{children:"T"})," ",(0,r.jsx)(n.em,{children:"extends"})," ",(0,r.jsx)(n.code,{children:"Tuple"}),"<",(0,r.jsx)(n.code,{children:"Field3"}),">"]}),"\n",(0,r.jsx)(n.h5,{id:"parameters-13",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"xs",children:"xs"}),"\n",(0,r.jsxs)(n.p,{children:["...",(0,r.jsx)(n.code,{children:"T"})]}),"\n",(0,r.jsx)(n.h5,{id:"returns-14",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:"[...{ [i in string | number | symbol]: bigint }[]]"}),"\n",(0,r.jsx)(n.h3,{id:"foreignfield",children:"ForeignField"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"ForeignField: {\n  sliceField3: (__namedParameters: Field3, __namedParameters: {\n     chunkSize: number;\n     maxBits: number;\n    }) => Field[];\n  add: Field3;\n  assertEquals: void;\n  assertLessThan: void;\n  assertLessThanOrEqual: void;\n  equals: Bool;\n  neg: Field3;\n  sub: Field3;\n  sum: Field3;\n  toCanonical: Field3;\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"Gadgets for foreign field operations."}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.em,{children:"foreign field"})," is a finite field different from the native field of the proof system."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ForeignField"})," namespace exposes operations like modular addition and multiplication,\nwhich work for any finite field of size less than 2^259."]}),"\n",(0,r.jsx)(n.p,{children:"Foreign field elements are represented as 3 limbs of native field elements.\nEach limb holds 88 bits of the total, in little-endian order."}),"\n",(0,r.jsxs)(n.p,{children:["All ",(0,r.jsx)(n.code,{children:"ForeignField"})," gadgets expect that their input limbs are constrained to the range [0, 2^88).\nRange checks on outputs are added by the gadget itself."]}),"\n",(0,r.jsx)(n.h4,{id:"foreignfieldslicefield3",children:"ForeignField.sliceField3()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"sliceField3: (__namedParameters: Field3, __namedParameters: {\n  chunkSize: number;\n  maxBits: number;\n }) => Field[];\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Provable method for slicing a 3x88-bit bigint into smaller bit chunks of length ",(0,r.jsx)(n.code,{children:"chunkSize"})]}),"\n",(0,r.jsx)(n.p,{children:"This serves as a range check that the input is in [0, 2^maxBits)"}),"\n",(0,r.jsxs)(n.p,{children:["Provable method for slicing a 3x88-bit bigint into smaller bit chunks of length ",(0,r.jsx)(n.code,{children:"chunkSize"})]}),"\n",(0,r.jsx)(n.p,{children:"This serves as a range check that the input is in [0, 2^maxBits)"}),"\n",(0,r.jsx)(n.h5,{id:"parameters-14",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"__namedparameters",children:"__namedParameters"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h6,{id:"__namedparameters-1",children:"__namedParameters"}),"\n",(0,r.jsx)(n.h6,{id:"chunksize",children:"chunkSize"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.h6,{id:"maxbits",children:"maxBits"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.h5,{id:"returns-15",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})}),"[]"]}),"\n",(0,r.jsx)(n.h4,{id:"foreignfieldadd",children:"ForeignField.add()"}),"\n",(0,r.jsxs)(n.p,{children:["Foreign field addition: ",(0,r.jsx)(n.code,{children:"x + y mod f"})]}),"\n",(0,r.jsxs)(n.p,{children:["The modulus ",(0,r.jsx)(n.code,{children:"f"})," does not need to be prime."]}),"\n",(0,r.jsx)(n.p,{children:"Inputs and outputs are 3-tuples of native Fields.\nEach input limb is assumed to be in the range [0, 2^88), and the gadget is invalid if this is not the case.\nThe result limbs are guaranteed to be in the same range."}),"\n",(0,r.jsx)(n.h5,{id:"parameters-15",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"x-8",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.p,{children:"left summand"}),"\n",(0,r.jsx)(n.h6,{id:"y-2",children:"y"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.p,{children:"right summand"}),"\n",(0,r.jsx)(n.h6,{id:"f",children:"f"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"bigint"})}),"\n",(0,r.jsx)(n.p,{children:"modulus"}),"\n",(0,r.jsx)(n.h5,{id:"returns-16",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.p,{children:"x + y mod f"}),"\n",(0,r.jsx)(n.h5,{id:"example-4",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let x = Provable.witness(Field3, () => 9n);\nlet y = Provable.witness(Field3, () => 10n);\n\n// range check x and y\nGadgets.multiRangeCheck(x);\nGadgets.multiRangeCheck(y);\n\n// compute x + y mod 17\nlet z = ForeignField.add(x, y, 17n);\n\nProvable.log(z); // ['2', '0', '0'] = limb representation of 2 = 9 + 10 mod 17\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Warning"}),": The gadget does not assume that inputs are reduced modulo f,\nand does not prove that the result is reduced modulo f.\nIt only guarantees that the result is in the correct residue class."]}),"\n",(0,r.jsx)(n.h4,{id:"foreignfieldassertequals",children:"ForeignField.assertEquals()"}),"\n",(0,r.jsx)(n.p,{children:"Proves that x is equal to y."}),"\n",(0,r.jsx)(n.h5,{id:"parameters-16",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"x-9",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h6,{id:"y-3",children:"y"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h5,{id:"returns-17",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"void"})}),"\n",(0,r.jsx)(n.h4,{id:"foreignfieldassertlessthan",children:"ForeignField.assertLessThan()"}),"\n",(0,r.jsxs)(n.p,{children:["Prove that x < f for any constant f < 2^264, or for another ",(0,r.jsx)(n.code,{children:"Field3"})," f."]}),"\n",(0,r.jsxs)(n.p,{children:["If f is a finite field modulus, this means that the given field element is fully reduced modulo f.\nThis is a stronger statement than ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/ForeignField#assertalmostreduced-2",children:"ForeignField.assertAlmostReduced"}),"\nand also uses more constraints; it should not be needed in most use cases."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": This assumes that the limbs of x are in the range [0, 2^88), in contrast to\n",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/ForeignField#assertalmostreduced-2",children:"ForeignField.assertAlmostReduced"})," which adds that check itself."]}),"\n",(0,r.jsx)(n.h5,{id:"parameters-17",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"x-10",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h6,{id:"f-1",children:"f"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"bigint"})," | ",(0,r.jsx)(n.code,{children:"Field3"})]}),"\n",(0,r.jsx)(n.h5,{id:"returns-18",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"void"})}),"\n",(0,r.jsx)(n.h5,{id:"throws",children:"Throws"}),"\n",(0,r.jsx)(n.p,{children:"if x is greater or equal to f."}),"\n",(0,r.jsx)(n.h5,{id:"example-5",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let x = Provable.witness(Field3, () => 0x1235n);\n\n // range check limbs of x\nGadgets.multiRangeCheck(x);\n\n// prove that x is fully reduced mod f\nGadgets.ForeignField.assertLessThan(x, f);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"foreignfieldassertlessthanorequal",children:"ForeignField.assertLessThanOrEqual()"}),"\n",(0,r.jsxs)(n.p,{children:["Prove that x ",(0,r.jsx)(n.code,{children:"<="})," f for any constant f < 2^264, or for another ",(0,r.jsx)(n.code,{children:"Field3"})," f."]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/ForeignField#assertlessthan",children:"ForeignField.assertLessThan"})," for details and usage examples."]}),"\n",(0,r.jsx)(n.h5,{id:"parameters-18",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"x-11",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h6,{id:"f-2",children:"f"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"bigint"})," | ",(0,r.jsx)(n.code,{children:"Field3"})]}),"\n",(0,r.jsx)(n.h5,{id:"returns-19",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"void"})}),"\n",(0,r.jsx)(n.h4,{id:"foreignfieldequals",children:"ForeignField.equals()"}),"\n",(0,r.jsxs)(n.p,{children:["Check whether ",(0,r.jsx)(n.code,{children:"x = c mod f"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"c"})," is a constant, and we require ",(0,r.jsx)(n.code,{children:"c"})," in ",(0,r.jsx)(n.code,{children:"[0, f)"})]}),"\n",(0,r.jsxs)(n.p,{children:["Assumes that ",(0,r.jsx)(n.code,{children:"x"})," is almost reduced modulo ",(0,r.jsx)(n.code,{children:"f"}),", so we know that ",(0,r.jsx)(n.code,{children:"x"})," might be ",(0,r.jsx)(n.code,{children:"c"})," or ",(0,r.jsx)(n.code,{children:"c + f"}),", but not ",(0,r.jsx)(n.code,{children:"c + 2f"}),", ",(0,r.jsx)(n.code,{children:"c + 3f"}),", ..."]}),"\n",(0,r.jsx)(n.h5,{id:"parameters-19",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"x-12",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h6,{id:"c",children:"c"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"bigint"})}),"\n",(0,r.jsx)(n.h6,{id:"f-3",children:"f"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"bigint"})}),"\n",(0,r.jsx)(n.h5,{id:"returns-20",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Bool",children:(0,r.jsx)(n.code,{children:"Bool"})})}),"\n",(0,r.jsx)(n.h4,{id:"foreignfieldneg",children:"ForeignField.neg()"}),"\n",(0,r.jsxs)(n.p,{children:["Foreign field negation: ",(0,r.jsx)(n.code,{children:"-x mod f = f - x"})]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/ForeignField#add",children:"ForeignField.add"})," for assumptions and usage examples."]}),"\n",(0,r.jsx)(n.h5,{id:"parameters-20",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"x-13",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h6,{id:"f-4",children:"f"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"bigint"})}),"\n",(0,r.jsx)(n.h5,{id:"returns-21",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h5,{id:"throws-1",children:"Throws"}),"\n",(0,r.jsxs)(n.p,{children:["fails if ",(0,r.jsx)(n.code,{children:"x > f"}),", where ",(0,r.jsx)(n.code,{children:"f - x < 0"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"foreignfieldsub",children:"ForeignField.sub()"}),"\n",(0,r.jsxs)(n.p,{children:["Foreign field subtraction: ",(0,r.jsx)(n.code,{children:"x - y mod f"})]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#add",children:"Gadgets.ForeignField.add"})," for assumptions and usage examples."]}),"\n",(0,r.jsx)(n.h5,{id:"parameters-21",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"x-14",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h6,{id:"y-4",children:"y"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h6,{id:"f-5",children:"f"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"bigint"})}),"\n",(0,r.jsx)(n.h5,{id:"returns-22",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h5,{id:"throws-2",children:"Throws"}),"\n",(0,r.jsxs)(n.p,{children:["fails if ",(0,r.jsx)(n.code,{children:"x - y < -f"}),", where the result cannot be brought back to a positive number by adding ",(0,r.jsx)(n.code,{children:"f"})," once."]}),"\n",(0,r.jsx)(n.h4,{id:"foreignfieldsum",children:"ForeignField.sum()"}),"\n",(0,r.jsxs)(n.p,{children:["Foreign field sum: ",(0,r.jsx)(n.code,{children:"xs[0] + signs[0] * xs[1] + ... + signs[n-1] * xs[n] mod f"})]}),"\n",(0,r.jsxs)(n.p,{children:["This gadget takes a list of inputs and a list of signs (of size one less than the inputs),\nand computes a chain of additions or subtractions, depending on the sign.\nA sign is of type ",(0,r.jsx)(n.code,{children:"1n | -1n"}),", where ",(0,r.jsx)(n.code,{children:"1n"})," represents addition and ",(0,r.jsx)(n.code,{children:"-1n"})," represents subtraction."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": For 3 or more inputs, ",(0,r.jsx)(n.code,{children:"sum()"})," uses fewer constraints than a sequence of ",(0,r.jsx)(n.code,{children:"add()"})," and ",(0,r.jsx)(n.code,{children:"sub()"})," calls,\nbecause we can avoid range checks on intermediate results."]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#add",children:"Gadgets.ForeignField.add"})," for assumptions on inputs."]}),"\n",(0,r.jsx)(n.h5,{id:"parameters-22",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"xs-1",children:"xs"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Field3"}),"[]"]}),"\n",(0,r.jsx)(n.h6,{id:"signs",children:"signs"}),"\n",(0,r.jsxs)(n.p,{children:["(",(0,r.jsx)(n.code,{children:"1n"})," | ",(0,r.jsx)(n.code,{children:"-1n"}),")[]"]}),"\n",(0,r.jsx)(n.h6,{id:"f-6",children:"f"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"bigint"})}),"\n",(0,r.jsx)(n.h5,{id:"returns-23",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h5,{id:"example-6",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let x = Provable.witness(Field3, () => 4n);\nlet y = Provable.witness(Field3, () => 5n);\nlet z = Provable.witness(Field3, () => 10n);\n\n// range check x, y, z\nGadgets.multiRangeCheck(x);\nGadgets.multiRangeCheck(y);\nGadgets.multiRangeCheck(z);\n\n// compute x + y - z mod 17\nlet sum = ForeignField.sum([x, y, z], [1n, -1n], 17n);\n\nProvable.log(sum); // ['16', '0', '0'] = limb representation of 16 = 4 + 5 - 10 mod 17\n"})}),"\n",(0,r.jsx)(n.h4,{id:"foreignfieldtocanonical",children:"ForeignField.toCanonical()"}),"\n",(0,r.jsx)(n.p,{children:"Convert x, which may be unreduced, to a canonical representative xR < f\nsuch that x = xR mod f"}),"\n",(0,r.jsx)(n.p,{children:"Note: This method is complete, it works for all unreduced field elements.\nIt can therefore be used to protect against incompleteness of field operations in other places."}),"\n",(0,r.jsx)(n.h5,{id:"parameters-23",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"x-15",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h6,{id:"f-7",children:"f"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"bigint"})}),"\n",(0,r.jsx)(n.h5,{id:"returns-24",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h3,{id:"sha2",children:"SHA2"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"SHA2: {\n  compression: <T>(length: Length, H: T[], W: T[]) => T[];\n  messageSchedule: <T>(length: Length, M: T[]) => T[];\n  padding: <T>(length: Length, data: FlexibleBytes) => T[][];\n  hash: Bytes;\n  initialState: T[];\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Implementation of the ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/SHA-2",children:"SHA2 hash function."})," Hash function\nwith 224 | 256 | 384 | 512 bit output."]}),"\n",(0,r.jsx)(n.p,{children:"Applies the SHA2 hash function to a list of byte-sized elements."}),"\n",(0,r.jsxs)(n.p,{children:["The function accepts ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/Bytes",children:"Bytes"})," as the input message, which is a type that represents a static-length list of byte-sized field elements (range-checked using ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#rangecheck8",children:"Gadgets.rangeCheck8"}),").\nAlternatively, you can pass plain ",(0,r.jsx)(n.code,{children:"number[]"}),", ",(0,r.jsx)(n.code,{children:"bigint[]"})," or ",(0,r.jsx)(n.code,{children:"Uint8Array"})," to perform a hash outside provable code."]}),"\n",(0,r.jsxs)(n.p,{children:["Produces an output of ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/Bytes",children:"Bytes"})," that conforms to the chosen bit length."]}),"\n",(0,r.jsx)(n.h4,{id:"param-1",children:"Param"}),"\n",(0,r.jsx)(n.p,{children:"224 | 256 | 384 | 512 representing the length of the hash."}),"\n",(0,r.jsx)(n.h4,{id:"param-2",children:"Param"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/Bytes",children:"Bytes"})," representing the message to hash."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'let preimage = Bytes.fromString("hello world");\nlet digest = Gadgets.SHA2.hash(512, preimage);\n'})}),"\n",(0,r.jsx)(n.h4,{id:"sha2compression",children:"SHA2.compression()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"compression: <T>(length: Length, H: T[], W: T[]) => T[];\n"})}),"\n",(0,r.jsx)(n.p,{children:"Performs the SHA-2 compression function on the given hash values and message schedule."}),"\n",(0,r.jsx)(n.h5,{id:"type-parameters-2",children:"Type Parameters"}),"\n",(0,r.jsxs)(n.p,{children:["\u2022 ",(0,r.jsx)(n.strong,{children:"T"})," ",(0,r.jsx)(n.em,{children:"extends"})," ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt64",children:(0,r.jsx)(n.code,{children:"UInt64"})})," | ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt32",children:(0,r.jsx)(n.code,{children:"UInt32"})})]}),"\n",(0,r.jsx)(n.h5,{id:"parameters-24",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"length",children:"length"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Length"})}),"\n",(0,r.jsx)(n.p,{children:"Whether this is a SHA2-224 or SHA2-256 or SHA2-384 or SHA2-512"}),"\n",(0,r.jsx)(n.h6,{id:"h",children:"H"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"T"}),"[]"]}),"\n",(0,r.jsx)(n.p,{children:"The initial or intermediate hash values (8-element array of T)."}),"\n",(0,r.jsx)(n.h6,{id:"w",children:"W"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"T"}),"[]"]}),"\n",(0,r.jsx)(n.p,{children:"The message schedule (64-element array of T)."}),"\n",(0,r.jsx)(n.h5,{id:"returns-25",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"T"}),"[]"]}),"\n",(0,r.jsx)(n.p,{children:"The updated intermediate hash values after compression."}),"\n",(0,r.jsx)(n.h4,{id:"sha2messageschedule",children:"SHA2.messageSchedule()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"messageSchedule: <T>(length: Length, M: T[]) => T[];\n"})}),"\n",(0,r.jsx)(n.p,{children:"Prepares the message schedule for the SHA2 compression function from the given message block."}),"\n",(0,r.jsx)(n.h5,{id:"type-parameters-3",children:"Type Parameters"}),"\n",(0,r.jsxs)(n.p,{children:["\u2022 ",(0,r.jsx)(n.strong,{children:"T"})," ",(0,r.jsx)(n.em,{children:"extends"})," ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt64",children:(0,r.jsx)(n.code,{children:"UInt64"})})," | ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt32",children:(0,r.jsx)(n.code,{children:"UInt32"})})]}),"\n",(0,r.jsx)(n.h5,{id:"parameters-25",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"length-1",children:"length"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Length"})}),"\n",(0,r.jsx)(n.p,{children:"Whether this is a SHA2-224 or SHA2-256 or SHA2-384 or SHA2-512"}),"\n",(0,r.jsx)(n.h6,{id:"m",children:"M"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"T"}),"[]"]}),"\n",(0,r.jsx)(n.p,{children:"The 512-bit message block (16-element array of UInt32)\nor the 1024-bit message block (16-element array of UInt64)."}),"\n",(0,r.jsx)(n.h5,{id:"returns-26",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"T"}),"[]"]}),"\n",(0,r.jsx)(n.p,{children:"The message schedule (64-element array of UInt32 or 80-element array of UInt64)."}),"\n",(0,r.jsx)(n.h4,{id:"sha2padding",children:"SHA2.padding()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"padding: <T>(length: Length, data: FlexibleBytes) => T[][];\n"})}),"\n",(0,r.jsx)(n.p,{children:"Padding function for SHA2, as specified in \xa75.1.1, \xa75.1.2,"}),"\n",(0,r.jsx)(n.h5,{id:"type-parameters-4",children:"Type Parameters"}),"\n",(0,r.jsxs)(n.p,{children:["\u2022 ",(0,r.jsx)(n.strong,{children:"T"})," ",(0,r.jsx)(n.em,{children:"extends"})," ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt64",children:(0,r.jsx)(n.code,{children:"UInt64"})})," | ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt32",children:(0,r.jsx)(n.code,{children:"UInt32"})})]}),"\n",(0,r.jsx)(n.h5,{id:"parameters-26",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"length-2",children:"length"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Length"})}),"\n",(0,r.jsx)(n.p,{children:"Whether this is a SHA2-224 or SHA2-256 or SHA2-384 or SHA2-512"}),"\n",(0,r.jsx)(n.h6,{id:"data-1",children:"data"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/FlexibleBytes",children:(0,r.jsx)(n.code,{children:"FlexibleBytes"})})}),"\n",(0,r.jsx)(n.p,{children:"The message to hash"}),"\n",(0,r.jsx)(n.h5,{id:"returns-27",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"T"}),"[][]"]}),"\n",(0,r.jsx)(n.h4,{id:"sha2hash",children:"SHA2.hash()"}),"\n",(0,r.jsxs)(n.p,{children:["Implementation of ",(0,r.jsx)(n.a,{href:"https://csrc.nist.gov/pubs/fips/180-4/upd1/final",children:"NIST SHA-2"}),"\nhash Function. Supports output lengths of 224, 256, 384, or 512 bits."]}),"\n",(0,r.jsxs)(n.p,{children:["Applies the SHA-2 hash function to a list of big-endian byte-sized ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"}),"\nelements, flexible to handle varying output lengths (224, 256, 384, 512 bits) as specified."]}),"\n",(0,r.jsxs)(n.p,{children:["The function accepts ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/functions/Bytes",children:"Bytes"})," as the input message, which is a type that\nrepresents a static-length list of byte-sized field elements (range-checked\nusing ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#rangecheck8",children:"Gadgets.rangeCheck8"}),").\nAlternatively, you can pass plain ",(0,r.jsx)(n.code,{children:"number[]"})," of ",(0,r.jsx)(n.code,{children:"Uint8Array"})," to perform a hash\noutside provable code."]}),"\n",(0,r.jsxs)(n.p,{children:["Produces an output of ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/functions/Bytes",children:"Bytes"})," that conforms to the chosen bit length.\nBoth input and output bytes are big-endian."]}),"\n",(0,r.jsx)(n.h5,{id:"type-parameters-5",children:"Type Parameters"}),"\n",(0,r.jsxs)(n.p,{children:["\u2022 ",(0,r.jsx)(n.strong,{children:"T"})," ",(0,r.jsx)(n.em,{children:"extends"})," ",(0,r.jsx)(n.code,{children:"Length"})]}),"\n",(0,r.jsx)(n.h5,{id:"parameters-27",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"length-3",children:"length"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"T"})}),"\n",(0,r.jsx)(n.h6,{id:"data-2",children:"data"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/FlexibleBytes",children:(0,r.jsx)(n.code,{children:"FlexibleBytes"})})}),"\n",(0,r.jsx)(n.h5,{id:"returns-28",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Bytes"})}),"\n",(0,r.jsx)(n.h4,{id:"sha2initialstate",children:"SHA2.initialState()"}),"\n",(0,r.jsx)(n.h5,{id:"type-parameters-6",children:"Type Parameters"}),"\n",(0,r.jsxs)(n.p,{children:["\u2022 ",(0,r.jsx)(n.strong,{children:"T"})," ",(0,r.jsx)(n.em,{children:"extends"})," ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt64",children:(0,r.jsx)(n.code,{children:"UInt64"})})," | ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt32",children:(0,r.jsx)(n.code,{children:"UInt32"})})]}),"\n",(0,r.jsx)(n.h5,{id:"parameters-28",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"length-4",children:"length"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Length"})}),"\n",(0,r.jsx)(n.h5,{id:"returns-29",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"T"}),"[]"]}),"\n",(0,r.jsx)(n.h3,{id:"sha256",children:(0,r.jsx)(n.del,{children:"SHA256"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"SHA256: {\n  compression: (H: UInt32[], W: UInt32[]) => UInt32[];\n  createMessageSchedule: (M: UInt32[]) => UInt32[];\n  padding: (data: FlexibleBytes) => UInt32[][];\n  get initialState: UInt32[];\n  hash: Bytes;\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Implementation of the ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/SHA-2",children:"SHA256 hash function."})," Hash function with 256bit output."]}),"\n",(0,r.jsx)(n.p,{children:"Applies the SHA2-256 hash function to a list of byte-sized elements."}),"\n",(0,r.jsxs)(n.p,{children:["The function accepts ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/Bytes",children:"Bytes"})," as the input message, which is a type that represents a static-length list of byte-sized field elements (range-checked using ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#rangecheck8",children:"Gadgets.rangeCheck8"}),").\nAlternatively, you can pass plain ",(0,r.jsx)(n.code,{children:"number[]"}),", ",(0,r.jsx)(n.code,{children:"bigint[]"})," or ",(0,r.jsx)(n.code,{children:"Uint8Array"})," to perform a hash outside provable code."]}),"\n",(0,r.jsxs)(n.p,{children:["Produces an output of ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/Bytes",children:"Bytes"})," that conforms to the chosen bit length."]}),"\n",(0,r.jsx)(n.h4,{id:"param-3",children:"Param"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/Bytes",children:"Bytes"})," representing the message to hash."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'let preimage = Bytes.fromString("hello world");\nlet digest = Gadgets.SHA256.hash(preimage);\n'})}),"\n",(0,r.jsx)(n.h4,{id:"deprecated",children:"Deprecated"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#sha256",children:"SHA256"})," is deprecated in favor of ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#sha2",children:"SHA2"}),", which supports more variants of the hash function."]}),"\n",(0,r.jsx)(n.h4,{id:"sha256compression",children:"SHA256.compression()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"compression: (H: UInt32[], W: UInt32[]) => UInt32[] = sha256Compression;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Performs the SHA-256 compression function on the given hash values and message schedule."}),"\n",(0,r.jsx)(n.h5,{id:"parameters-29",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"h-1",children:"H"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt32",children:(0,r.jsx)(n.code,{children:"UInt32"})}),"[]"]}),"\n",(0,r.jsx)(n.p,{children:"The initial or intermediate hash values (8-element array of UInt32)."}),"\n",(0,r.jsx)(n.h6,{id:"w-1",children:"W"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt32",children:(0,r.jsx)(n.code,{children:"UInt32"})}),"[]"]}),"\n",(0,r.jsx)(n.p,{children:"The message schedule (64-element array of UInt32)."}),"\n",(0,r.jsx)(n.h5,{id:"returns-30",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt32",children:(0,r.jsx)(n.code,{children:"UInt32"})}),"[]"]}),"\n",(0,r.jsx)(n.p,{children:"The updated intermediate hash values after compression."}),"\n",(0,r.jsx)(n.h4,{id:"sha256createmessageschedule",children:"SHA256.createMessageSchedule()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"createMessageSchedule: (M: UInt32[]) => UInt32[];\n"})}),"\n",(0,r.jsx)(n.p,{children:"Prepares the message schedule for the SHA-256 compression function from the given message block."}),"\n",(0,r.jsx)(n.h5,{id:"parameters-30",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"m-1",children:"M"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt32",children:(0,r.jsx)(n.code,{children:"UInt32"})}),"[]"]}),"\n",(0,r.jsx)(n.p,{children:"The 512-bit message block (16-element array of UInt32)."}),"\n",(0,r.jsx)(n.h5,{id:"returns-31",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt32",children:(0,r.jsx)(n.code,{children:"UInt32"})}),"[]"]}),"\n",(0,r.jsx)(n.p,{children:"The message schedule (64-element array of UInt32)."}),"\n",(0,r.jsx)(n.h4,{id:"sha256padding",children:"SHA256.padding()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"padding: (data: FlexibleBytes) => UInt32[][];\n"})}),"\n",(0,r.jsx)(n.h5,{id:"parameters-31",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"data-3",children:"data"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/FlexibleBytes",children:(0,r.jsx)(n.code,{children:"FlexibleBytes"})})}),"\n",(0,r.jsx)(n.h5,{id:"returns-32",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt32",children:(0,r.jsx)(n.code,{children:"UInt32"})}),"[][]"]}),"\n",(0,r.jsx)(n.h4,{id:"sha256initialstate",children:"SHA256.initialState"}),"\n",(0,r.jsx)(n.h5,{id:"get-signature-1",children:"Get Signature"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"get initialState(): UInt32[]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Defined in: ",(0,r.jsx)(n.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/gadgets/sha256.ts#L103",children:"lib/provable/gadgets/sha256.ts:103"})]}),"\n",(0,r.jsx)(n.h6,{id:"returns-33",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/UInt32",children:(0,r.jsx)(n.code,{children:"UInt32"})}),"[]"]}),"\n",(0,r.jsx)(n.h4,{id:"sha256hash",children:"SHA256.hash()"}),"\n",(0,r.jsx)(n.h5,{id:"parameters-32",children:"Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"data-4",children:"data"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/FlexibleBytes",children:(0,r.jsx)(n.code,{children:"FlexibleBytes"})})}),"\n",(0,r.jsx)(n.h5,{id:"returns-34",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Bytes"})}),"\n",(0,r.jsx)(n.h3,{id:"and",children:"and()"}),"\n",(0,r.jsxs)(n.p,{children:["Bitwise AND gadget on ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," elements. Equivalent to the ",(0,r.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND",children:["bitwise AND ",(0,r.jsx)(n.code,{children:"&"})," operator in JavaScript"]}),".\nThe AND gate works by comparing two bits and returning ",(0,r.jsx)(n.code,{children:"1"})," if both bits are ",(0,r.jsx)(n.code,{children:"1"}),", and ",(0,r.jsx)(n.code,{children:"0"})," otherwise."]}),"\n",(0,r.jsxs)(n.p,{children:["It can be checked by a double generic gate that verifies the following relationship between the values\nbelow (in the process it also invokes the ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#xor",children:"Gadgets.xor"})," gadget which will create additional constraints depending on ",(0,r.jsx)(n.code,{children:"length"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["The generic gate verifies:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"a + b = sum"})," and the conjunction equation ",(0,r.jsx)(n.code,{children:"2 * and = sum - xor"}),(0,r.jsx)(n.br,{}),"\n","Where:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"a + b = sum"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"a ^ b = xor"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"a & b = and"})]}),"\n",(0,r.jsxs)(n.p,{children:["You can find more details about the implementation in the ",(0,r.jsx)(n.a,{href:"https://o1-labs.github.io/proof-systems/specs/kimchi.html?highlight=gates#and",children:"Mina book"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"length"})," parameter lets you define how many bits should be compared. ",(0,r.jsx)(n.code,{children:"length"})," is rounded\nto the nearest multiple of 16, ",(0,r.jsx)(n.code,{children:"paddedLength = ceil(length / 16) * 16"}),", and both input values\nare constrained to fit into ",(0,r.jsx)(n.code,{children:"paddedLength"})," bits. The output is guaranteed to have at most ",(0,r.jsx)(n.code,{children:"paddedLength"})," bits as well."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Specifying a larger ",(0,r.jsx)(n.code,{children:"length"})," parameter adds additional constraints."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Both ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," elements need to fit into ",(0,r.jsx)(n.code,{children:"2^paddedLength - 1"}),". Otherwise, an error is thrown and no proof can be generated.\nFor example, with ",(0,r.jsx)(n.code,{children:"length = 2"})," (",(0,r.jsx)(n.code,{children:"paddedLength = 16"}),"), ",(0,r.jsx)(n.code,{children:"and()"})," will fail for any input that is larger than ",(0,r.jsx)(n.code,{children:"2**16"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-33",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"a",children:"a"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h5,{id:"b",children:"b"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h5,{id:"length-5",children:"length"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.h4,{id:"returns-35",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"example-7",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"let a = Field(3);    // ... 000011\nlet b = Field(5);    // ... 000101\n\nlet c = Gadgets.and(a, b, 2);    // ... 000001\nc.assertEquals(1);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"compactmultirangecheck",children:"compactMultiRangeCheck()"}),"\n",(0,r.jsx)(n.p,{children:"Compact multi-range check"}),"\n",(0,r.jsxs)(n.p,{children:["This is a variant of ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#multirangecheck",children:"multiRangeCheck"})," where the first two variables are passed in\ncombined form xy = x + 2^88*y."]}),"\n",(0,r.jsx)(n.p,{children:"The gadget"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"splits up xy into x and y"}),"\n",(0,r.jsx)(n.li,{children:"proves that xy = x + 2^88*y"}),"\n",(0,r.jsx)(n.li,{children:"proves that x, y, z are all in the range [0, 2^88)."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The split form [x, y, z] is returned."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-34",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"xy",children:"xy"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h5,{id:"z",children:"z"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"returns-36",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:["[",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})}),", ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})}),", ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})}),"]"]}),"\n",(0,r.jsx)(n.h4,{id:"example-8",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let [x, y] = Gadgets.compactMultiRangeCheck([xy, z]);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"throws-3",children:"Throws"}),"\n",(0,r.jsxs)(n.p,{children:["Throws an error if ",(0,r.jsx)(n.code,{children:"xy"})," exceeds 2*88 = 176 bits, or if z exceeds 88 bits."]}),"\n",(0,r.jsx)(n.h3,{id:"intable",children:"inTable()"}),"\n",(0,r.jsx)(n.p,{children:"In-circuit check that up to 3 pairs of index and value are in the runtime\ntable given by the identifier. Each given pair is a tuple composed of a\nbigint and a Field."}),"\n",(0,r.jsx)(n.p,{children:"Internally, it creates a lookup gate for the three pairs. If fewer pairs are\ngiven, the remaining pairs are duplicates of the first one."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-35",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"id",children:"id"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.h5,{id:"pair0",children:"pair0"}),"\n",(0,r.jsxs)(n.p,{children:["[",(0,r.jsx)(n.code,{children:"bigint"}),", ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})}),"]"]}),"\n",(0,r.jsx)(n.h5,{id:"pair1",children:"pair1?"}),"\n",(0,r.jsxs)(n.p,{children:["[",(0,r.jsx)(n.code,{children:"bigint"}),", ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})}),"]"]}),"\n",(0,r.jsx)(n.h5,{id:"pair2",children:"pair2?"}),"\n",(0,r.jsxs)(n.p,{children:["[",(0,r.jsx)(n.code,{children:"bigint"}),", ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})}),"]"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-37",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"void"})}),"\n",(0,r.jsx)(n.h3,{id:"isdefinitelyinrangen",children:"isDefinitelyInRangeN()"}),"\n",(0,r.jsx)(n.p,{children:"Returns a boolean which being true proves that x is in the range [0, 2^n)."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Beware"}),": The output being false does ",(0,r.jsx)(n.strong,{children:"not"})," prove that x is not in the range [0, 2^n).\nThis should not be viewed as a standalone provable method but as an advanced helper function\nfor gadgets which need a weakened form of range check."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-36",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"n-2",children:"n"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.p,{children:"The number of bits to be considered for the range check."}),"\n",(0,r.jsx)(n.h5,{id:"x-16",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.p,{children:"The value to be weakly range-checked."}),"\n",(0,r.jsx)(n.h4,{id:"returns-38",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Bool",children:(0,r.jsx)(n.code,{children:"Bool"})})}),"\n",(0,r.jsxs)(n.p,{children:["a Bool that is definitely only true if the input is in the range [0, 2^n),\nbut could also be false ",(0,r.jsx)(n.em,{children:"even if"})," the input is in the range [0, 2^n)."]}),"\n",(0,r.jsx)(n.h4,{id:"example-9",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const x = Provable.witness(Field, () => Field(12345678n));\nlet definitelyInRange = Gadgets.isDefinitelyInRangeN(32, x); // could be true or false\n"})}),"\n",(0,r.jsx)(n.h3,{id:"leftshift32",children:"leftShift32()"}),"\n",(0,r.jsxs)(n.p,{children:["Performs a left shift operation on the provided ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element.\nThis operation is similar to the ",(0,r.jsx)(n.code,{children:"<<"})," shift operation in JavaScript,\nwhere bits are shifted to the left, and the overflowing bits are discarded."]}),"\n",(0,r.jsx)(n.p,{children:"It\u2019s important to note that these operations are performed considering the big-endian 32-bit representation of the number,\nwhere the most significant (32th) bit is on the left end and the least significant bit is on the right end."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important:"})," The gadgets assumes that its input is at most 32 bits in size."]}),"\n",(0,r.jsx)(n.p,{children:"The output is range checked to 32 bits."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-37",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"field",children:"field"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element to shift."]}),"\n",(0,r.jsx)(n.h5,{id:"bits",children:"bits"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsxs)(n.p,{children:["Amount of bits to shift the ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element to the left. The amount should be between 0 and 32 (or else the shift will fail)."]}),"\n",(0,r.jsx)(n.h4,{id:"returns-39",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"example-10",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const x = Provable.witness(Field, () => Field(0b001100)); // 12 in binary\nconst y = Gadgets.leftShift32(x, 2); // left shift by 2 bits\ny.assertEquals(0b110000); // 48 in binary\n"})}),"\n",(0,r.jsx)(n.h3,{id:"leftshift64",children:"leftShift64()"}),"\n",(0,r.jsxs)(n.p,{children:["Performs a left shift operation on the provided ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element.\nThis operation is similar to the ",(0,r.jsx)(n.code,{children:"<<"})," shift operation in JavaScript,\nwhere bits are shifted to the left, and the overflowing bits are discarded."]}),"\n",(0,r.jsx)(n.p,{children:"It\u2019s important to note that these operations are performed considering the big-endian 64-bit representation of the number,\nwhere the most significant (64th) bit is on the left end and the least significant bit is on the right end."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important:"})," The gadgets assumes that its input is at most 64 bits in size."]}),"\n",(0,r.jsxs)(n.p,{children:["If the input exceeds 64 bits, the gadget is invalid and fails to prove correct execution of the shift.\nTherefore, to safely use ",(0,r.jsx)(n.code,{children:"leftShift()"}),", you need to make sure that the values passed in are range checked to 64 bits.\nFor example, this can be done with ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#rangecheck64",children:"Gadgets.rangeCheck64"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-38",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"field-1",children:"field"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element to shift."]}),"\n",(0,r.jsx)(n.h5,{id:"bits-1",children:"bits"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsxs)(n.p,{children:["Amount of bits to shift the ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element to the left. The amount should be between 0 and 64 (or else the shift will fail)."]}),"\n",(0,r.jsx)(n.h4,{id:"returns-40",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"throws-4",children:"Throws"}),"\n",(0,r.jsx)(n.p,{children:"Throws an error if the input value exceeds 64 bits."}),"\n",(0,r.jsx)(n.h4,{id:"example-11",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const x = Provable.witness(Field, () => Field(0b001100)); // 12 in binary\nconst y = Gadgets.leftShift64(x, 2); // left shift by 2 bits\ny.assertEquals(0b110000); // 48 in binary\n\nconst xLarge = Provable.witness(Field, () => Field(12345678901234567890123456789012345678n));\nleftShift64(xLarge, 32); // throws an error since input exceeds 64 bits\n"})}),"\n",(0,r.jsx)(n.h3,{id:"multirangecheck",children:"multiRangeCheck()"}),"\n",(0,r.jsx)(n.p,{children:"Multi-range check."}),"\n",(0,r.jsx)(n.p,{children:"Proves that x, y, z are all in the range [0, 2^88)."}),"\n",(0,r.jsx)(n.p,{children:"This takes 4 rows, so it checks 88*3/4 = 66 bits per row. This is slightly more efficient\nthan 64-bit range checks, which can do 64 bits in 1 row."}),"\n",(0,r.jsx)(n.p,{children:"In particular, the 3x88-bit range check supports bigints up to 264 bits, which in turn is enough\nto support foreign field multiplication with moduli up to 2^259."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-39",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"limbs",children:"limbs"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Field3"})}),"\n",(0,r.jsx)(n.h4,{id:"returns-41",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"void"})}),"\n",(0,r.jsx)(n.h4,{id:"example-12",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"Gadgets.multiRangeCheck([x, y, z]);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"throws-5",children:"Throws"}),"\n",(0,r.jsx)(n.p,{children:"Throws an error if one of the input values exceeds 88 bits."}),"\n",(0,r.jsx)(n.h3,{id:"not",children:"not()"}),"\n",(0,r.jsxs)(n.p,{children:["Bitwise NOT gate on ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," elements. Similar to the [bitwise\nNOT ",(0,r.jsx)(n.code,{children:"~"})," operator in JavaScript](",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/",children:"https://developer.mozilla.org/en-US/docs/"}),"\nWeb/JavaScript/Reference/Operators/Bitwise_NOT)."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," The NOT gate only operates over the amount\nof bits specified by the ",(0,r.jsx)(n.code,{children:"length"})," parameter."]}),"\n",(0,r.jsxs)(n.p,{children:["A NOT gate works by returning ",(0,r.jsx)(n.code,{children:"1"})," in each bit position if the\ncorresponding bit of the operand is ",(0,r.jsx)(n.code,{children:"0"}),", and returning ",(0,r.jsx)(n.code,{children:"0"})," if the\ncorresponding bit of the operand is ",(0,r.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"length"})," parameter lets you define how many bits to NOT."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Specifying a larger ",(0,r.jsx)(n.code,{children:"length"})," parameter adds additional constraints. The operation will fail if the length or the input value is larger than 254."]}),"\n",(0,r.jsxs)(n.p,{children:["NOT is implemented in two different ways. If the ",(0,r.jsx)(n.code,{children:"checked"})," parameter is set to ",(0,r.jsx)(n.code,{children:"true"}),"\nthe ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#xor",children:"Gadgets.xor"})," gadget is reused with a second argument to be an\nall one bitmask the same length. This approach needs as many rows as an XOR would need\nfor a single negation. If the ",(0,r.jsx)(n.code,{children:"checked"})," parameter is set to ",(0,r.jsx)(n.code,{children:"false"}),", NOT is\nimplemented as a subtraction of the input from the all one bitmask. This\nimplementation is returned by default if no ",(0,r.jsx)(n.code,{children:"checked"})," parameter is provided."]}),"\n",(0,r.jsxs)(n.p,{children:["You can find more details about the implementation in the ",(0,r.jsx)(n.a,{href:"https://o1-labs.github.io/proof-systems/specs/kimchi.html?highlight=gates#not",children:"Mina book"})]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-40",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"a-1",children:"a"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.p,{children:"The value to apply NOT to. The operation will fail if the value is larger than 254."}),"\n",(0,r.jsx)(n.h5,{id:"length-6",children:"length"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.p,{children:"The number of bits to be considered for the NOT operation."}),"\n",(0,r.jsx)(n.h5,{id:"checked",children:"checked"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"boolean"})," = ",(0,r.jsx)(n.code,{children:"false"})]}),"\n",(0,r.jsxs)(n.p,{children:["Optional boolean to determine if the checked or unchecked not implementation is used. If it\nis set to ",(0,r.jsx)(n.code,{children:"true"})," the ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#xor",children:"Gadgets.xor"})," gadget is reused. If it is set to ",(0,r.jsx)(n.code,{children:"false"}),", NOT is implemented\nas a subtraction of the input from the all one bitmask. It is set to ",(0,r.jsx)(n.code,{children:"false"})," by default if no parameter is provided."]}),"\n",(0,r.jsx)(n.h4,{id:"returns-42",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"example-13",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// not-ing 4 bits with the unchecked version\nlet a = Field(0b0101);\nlet b = Gadgets.not(a,4,false);\n\nb.assertEquals(0b1010);\n\n// not-ing 4 bits with the checked version utilizing the xor gadget\nlet a = Field(0b0101);\nlet b = Gadgets.not(a,4,true);\n\nb.assertEquals(0b1010);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"throws-6",children:"Throws"}),"\n",(0,r.jsx)(n.p,{children:"Throws an error if the input value exceeds 254 bits."}),"\n",(0,r.jsx)(n.h3,{id:"or",children:"or()"}),"\n",(0,r.jsxs)(n.p,{children:["Bitwise OR gadget on ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," elements. Equivalent to the ",(0,r.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR",children:["bitwise OR ",(0,r.jsx)(n.code,{children:"|"})," operator in JavaScript"]}),".\nThe OR gate works by comparing two bits and returning ",(0,r.jsx)(n.code,{children:"1"})," if at least one bit is ",(0,r.jsx)(n.code,{children:"1"}),", and ",(0,r.jsx)(n.code,{children:"0"})," otherwise."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"length"})," parameter lets you define how many bits should be compared. ",(0,r.jsx)(n.code,{children:"length"})," is rounded\nto the nearest multiple of 16, ",(0,r.jsx)(n.code,{children:"paddedLength = ceil(length / 16) * 16"}),", and both input values\nare constrained to fit into ",(0,r.jsx)(n.code,{children:"paddedLength"})," bits. The output is guaranteed to have at most ",(0,r.jsx)(n.code,{children:"paddedLength"})," bits as well."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Specifying a larger ",(0,r.jsx)(n.code,{children:"length"})," parameter adds additional constraints."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Both ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," elements need to fit into ",(0,r.jsx)(n.code,{children:"2^paddedLength - 1"}),". Otherwise, an error is thrown and no proof can be generated.\nFor example, with ",(0,r.jsx)(n.code,{children:"length = 2"})," (",(0,r.jsx)(n.code,{children:"paddedLength = 16"}),"), ",(0,r.jsx)(n.code,{children:"and()"})," will fail for any input that is larger than ",(0,r.jsx)(n.code,{children:"2**16"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-41",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"a-2",children:"a"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h5,{id:"b-1",children:"b"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h5,{id:"length-7",children:"length"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.h4,{id:"returns-43",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"example-14",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"let a = Field.from(3);    // ... 000011\nlet b = Field.from(5);    // ... 000101\n\nlet c = Gadgets.or(a, b, 16);    // ... 000111\nc.assertEquals(7);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"rangecheck16",children:"rangeCheck16()"}),"\n",(0,r.jsx)(n.h4,{id:"parameters-42",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"x-17",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"returns-44",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"void"})}),"\n",(0,r.jsx)(n.h3,{id:"rangecheck32",children:"rangeCheck32()"}),"\n",(0,r.jsx)(n.p,{children:"Asserts that the input value is in the range [0, 2^32)."}),"\n",(0,r.jsx)(n.p,{children:"This function proves that the provided field element can be represented with 32 bits.\nIf the field element exceeds 32 bits, an error is thrown."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-43",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"x-18",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.p,{children:"The value to be range-checked."}),"\n",(0,r.jsx)(n.h4,{id:"returns-45",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"void"})}),"\n",(0,r.jsx)(n.h4,{id:"throws-7",children:"Throws"}),"\n",(0,r.jsx)(n.p,{children:"Throws an error if the input value exceeds 32 bits."}),"\n",(0,r.jsx)(n.h4,{id:"example-15",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const x = Provable.witness(Field, () => Field(12345678n));\nGadgets.rangeCheck32(x); // successfully proves 32-bit range\n\nconst xLarge = Provable.witness(Field, () => Field(12345678901234567890123456789012345678n));\nGadgets.rangeCheck32(xLarge); // throws an error since input exceeds 32 bits\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),': Small "negative" field element inputs are interpreted as large integers close to the field size,\nand don\'t pass the 32-bit check. If you want to prove that a value lies in the int32 range [-2^31, 2^31),\nyou could use ',(0,r.jsx)(n.code,{children:"rangeCheck32(x.add(1n << 31n))"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"rangecheck3x12",children:"rangeCheck3x12()"}),"\n",(0,r.jsxs)(n.p,{children:["Checks that three ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," elements are in the range [0, 2^12) (using only one row)."]}),"\n",(0,r.jsxs)(n.p,{children:["Internally, this gadget relies on the 12-bit ",(0,r.jsx)(n.a,{href:"https://github.com/o1-labs/proof-systems/blob/master/kimchi/src/circuits/lookup/tables/mod.rs",children:"range check table"}),".\nAll three inputs are checked to be included in that table."]}),"\n",(0,r.jsxs)(n.p,{children:["It's possible to use this as a range check for bit lengths n < 12, by passing in ",(0,r.jsx)(n.em,{children:"two values"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["the value to be checked, ",(0,r.jsx)(n.code,{children:"x"}),", to prove that x in [0, 2^12)"]}),"\n",(0,r.jsxs)(n.li,{children:["x scaled by 2^(12 - n), to prove that either x in [0, 2^n) or ",(0,r.jsx)(n.code,{children:"x * 2^(12 - n)"})," overflows the field size (which is excluded by the first check)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Note that both of these checks are necessary to prove x in [0, 2^n)."}),"\n",(0,r.jsxs)(n.p,{children:["You can find more details about lookups in the ",(0,r.jsx)(n.a,{href:"https://o1-labs.github.io/proof-systems/specs/kimchi.html?highlight=lookup%20gate#lookup",children:"Mina book"})]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-44",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"v0",children:"v0"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsxs)(n.p,{children:["The first ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element to be checked."]}),"\n",(0,r.jsx)(n.h5,{id:"v1",children:"v1"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsxs)(n.p,{children:["The second ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element to be checked."]}),"\n",(0,r.jsx)(n.h5,{id:"v2",children:"v2"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsxs)(n.p,{children:["The third ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element to be checked."]}),"\n",(0,r.jsx)(n.h4,{id:"returns-46",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"void"})}),"\n",(0,r.jsx)(n.h4,{id:"throws-8",children:"Throws"}),"\n",(0,r.jsx)(n.p,{children:"Throws an error if one of the input values exceeds 2^12."}),"\n",(0,r.jsx)(n.h4,{id:"example-16",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"let a = Field(4000);\nrangeCheck3x12(a, Field(0), Field(0)); // works, since `a` is less than 12 bits\n\nlet aScaled = a.mul(1 << 4); // scale `a`, to assert that it's less than 8 bits\nrangeCheck3x12(a, aScaled, Field(0)); // throws an error, since  `a` is greater than 8 bits (and so `aScaled` is greater than 12 bits)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"rangecheck64",children:"rangeCheck64()"}),"\n",(0,r.jsx)(n.p,{children:"Asserts that the input value is in the range [0, 2^64)."}),"\n",(0,r.jsx)(n.p,{children:"This function proves that the provided field element can be represented with 64 bits.\nIf the field element exceeds 64 bits, an error is thrown."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-45",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"x-19",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.p,{children:"The value to be range-checked."}),"\n",(0,r.jsx)(n.h4,{id:"returns-47",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:["[",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})}),", ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})}),", ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})}),", ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})}),"]"]}),"\n",(0,r.jsx)(n.h4,{id:"throws-9",children:"Throws"}),"\n",(0,r.jsx)(n.p,{children:"Throws an error if the input value exceeds 64 bits."}),"\n",(0,r.jsx)(n.h4,{id:"example-17",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const x = Provable.witness(Field, () => Field(12345678n));\nGadgets.rangeCheck64(x); // successfully proves 64-bit range\n\nconst xLarge = Provable.witness(Field, () => Field(12345678901234567890123456789012345678n));\nGadgets.rangeCheck64(xLarge); // throws an error since input exceeds 64 bits\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),': Small "negative" field element inputs are interpreted as large integers close to the field size,\nand don\'t pass the 64-bit check. If you want to prove that a value lies in the int64 range [-2^63, 2^63),\nyou could use ',(0,r.jsx)(n.code,{children:"rangeCheck64(x.add(1n << 63n))"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Advanced usage"}),": This returns the 4 highest limbs of x, in reverse order, i.e. [x52, x40, x28, x16].\nThis is useful if you want to do a range check for 52, 40, 28, or 16 bits instead of 64,\nby constraining some of the returned limbs to be 0."]}),"\n",(0,r.jsx)(n.h3,{id:"rangecheck8",children:"rangeCheck8()"}),"\n",(0,r.jsx)(n.p,{children:"Asserts that the input value is in the range [0, 2^8)."}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#rangecheck64",children:"Gadgets.rangeCheck64"})," for analogous details and usage examples."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-46",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"x-20",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"returns-48",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"void"})}),"\n",(0,r.jsx)(n.h3,{id:"rangecheckn",children:"rangeCheckN()"}),"\n",(0,r.jsxs)(n.p,{children:["Asserts that the input value is in the range [0, 2^n). ",(0,r.jsx)(n.code,{children:"n"})," must be a multiple of 16."]}),"\n",(0,r.jsxs)(n.p,{children:["This function proves that the provided field element can be represented with ",(0,r.jsx)(n.code,{children:"n"})," bits.\nIf the field element exceeds ",(0,r.jsx)(n.code,{children:"n"})," bits, an error is thrown."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-47",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"n-3",children:"n"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.p,{children:"The number of bits to be considered for the range check."}),"\n",(0,r.jsx)(n.h5,{id:"x-21",children:"x"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.p,{children:"The value to be range-checked."}),"\n",(0,r.jsx)(n.h5,{id:"message",children:"message?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"string"})}),"\n",(0,r.jsx)(n.p,{children:"Optional message to be displayed when the range check fails."}),"\n",(0,r.jsx)(n.h4,{id:"returns-49",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"void"})}),"\n",(0,r.jsx)(n.h4,{id:"throws-10",children:"Throws"}),"\n",(0,r.jsxs)(n.p,{children:["Throws an error if the input value exceeds ",(0,r.jsx)(n.code,{children:"n"})," bits."]}),"\n",(0,r.jsx)(n.h4,{id:"example-18",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const x = Provable.witness(Field, () => Field(12345678n));\nGadgets.rangeCheckN(32, x); // successfully proves 32-bit range\n\nconst xLarge = Provable.witness(Field, () => Field(12345678901234567890123456789012345678n));\nGadgets.rangeCheckN(32, xLarge); // throws an error since input exceeds 32 bits\n"})}),"\n",(0,r.jsx)(n.h3,{id:"rightshift64",children:"rightShift64()"}),"\n",(0,r.jsxs)(n.p,{children:["Performs a right shift operation on the provided ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element.\nThis is similar to the ",(0,r.jsx)(n.code,{children:">>"})," shift operation in JavaScript, where bits are moved to the right.\nThe ",(0,r.jsx)(n.code,{children:"rightShift64"})," function utilizes the rotation method internally to implement this operation."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"It\u2019s important to note that these operations are performed considering the big-endian 64-bit representation of the number,\nwhere the most significant (64th) bit is on the left end and the least significant bit is on the right end."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important:"})," The gadgets assumes that its input is at most 64 bits in size."]}),"\n",(0,r.jsxs)(n.p,{children:["If the input exceeds 64 bits, the gadget is invalid and fails to prove correct execution of the shift.\nTo safely use ",(0,r.jsx)(n.code,{children:"rightShift64()"}),", you need to make sure that the value passed in is range-checked to 64 bits;\nfor example, using ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#rangecheck64",children:"Gadgets.rangeCheck64"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-48",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"field-2",children:"field"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element to shift."]}),"\n",(0,r.jsx)(n.h5,{id:"bits-2",children:"bits"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsxs)(n.p,{children:["Amount of bits to shift the ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element to the right. The amount should be between 0 and 64 (or else the shift will fail)."]}),"\n",(0,r.jsx)(n.h4,{id:"returns-50",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"throws-11",children:"Throws"}),"\n",(0,r.jsx)(n.p,{children:"Throws an error if the input value exceeds 64 bits."}),"\n",(0,r.jsx)(n.h4,{id:"example-19",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const x = Provable.witness(Field, () => Field(0b001100)); // 12 in binary\nconst y = Gadgets.rightShift64(x, 2); // right shift by 2 bits\ny.assertEquals(0b000011); // 3 in binary\n\nconst xLarge = Provable.witness(Field, () => Field(12345678901234567890123456789012345678n));\nrightShift64(xLarge, 32); // throws an error since input exceeds 64 bits\n"})}),"\n",(0,r.jsx)(n.h3,{id:"rotate32",children:"rotate32()"}),"\n",(0,r.jsxs)(n.p,{children:["A (left and right) rotation operates similarly to the shift operation (",(0,r.jsx)(n.code,{children:"<<"})," for left and ",(0,r.jsx)(n.code,{children:">>"})," for right) in JavaScript,\nwith the distinction that the bits are circulated to the opposite end of a 32-bit representation rather than being discarded.\nFor a left rotation, this means that bits shifted off the left end reappear at the right end.\nConversely, for a right rotation, bits shifted off the right end reappear at the left end."]}),"\n",(0,r.jsxs)(n.p,{children:["It\u2019s important to note that these operations are performed considering the big-endian 32-bit representation of the number,\nwhere the most significant (32th) bit is on the left end and the least significant bit is on the right end.\nThe ",(0,r.jsx)(n.code,{children:"direction"})," parameter is a string that accepts either ",(0,r.jsx)(n.code,{children:"'left'"})," or ",(0,r.jsx)(n.code,{children:"'right'"}),", determining the direction of the rotation."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important:"})," The gadget assumes that its input is at most 32 bits in size."]}),"\n",(0,r.jsxs)(n.p,{children:["If the input exceeds 32 bits, the gadget is invalid and fails to prove correct execution of the rotation.\nTo safely use ",(0,r.jsx)(n.code,{children:"rotate32()"}),", you need to make sure that the value passed in is range-checked to 32 bits;\nfor example, using ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#rangecheck32",children:"Gadgets.rangeCheck32"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-49",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"field-3",children:"field"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element to rotate."]}),"\n",(0,r.jsx)(n.h5,{id:"bits-3",children:"bits"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsxs)(n.p,{children:["amount of bits to rotate this ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element with."]}),"\n",(0,r.jsx)(n.h5,{id:"direction",children:"direction"}),"\n",(0,r.jsx)(n.p,{children:"left or right rotation direction."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"left"'})," | ",(0,r.jsx)(n.code,{children:'"right"'})]}),"\n",(0,r.jsx)(n.h4,{id:"returns-51",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"throws-12",children:"Throws"}),"\n",(0,r.jsx)(n.p,{children:"Throws an error if the input value exceeds 32 bits."}),"\n",(0,r.jsx)(n.h4,{id:"example-20",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const x = Provable.witness(Field, () => Field(0b001100));\nconst y = Gadgets.rotate32(x, 2, 'left'); // left rotation by 2 bits\nconst z = Gadgets.rotate32(x, 2, 'right'); // right rotation by 2 bits\ny.assertEquals(0b110000);\nz.assertEquals(0b000011);\n\nconst xLarge = Provable.witness(Field, () => Field(12345678901234567890123456789012345678n));\nGadgets.rotate32(xLarge, 32, \"left\"); // throws an error since input exceeds 32 bits\n"})}),"\n",(0,r.jsx)(n.h3,{id:"rotate64",children:"rotate64()"}),"\n",(0,r.jsxs)(n.p,{children:["A (left and right) rotation operates similarly to the shift operation (",(0,r.jsx)(n.code,{children:"<<"})," for left and ",(0,r.jsx)(n.code,{children:">>"})," for right) in JavaScript,\nwith the distinction that the bits are circulated to the opposite end of a 64-bit representation rather than being discarded.\nFor a left rotation, this means that bits shifted off the left end reappear at the right end.\nConversely, for a right rotation, bits shifted off the right end reappear at the left end."]}),"\n",(0,r.jsxs)(n.p,{children:["It\u2019s important to note that these operations are performed considering the big-endian 64-bit representation of the number,\nwhere the most significant (64th) bit is on the left end and the least significant bit is on the right end.\nThe ",(0,r.jsx)(n.code,{children:"direction"})," parameter is a string that accepts either ",(0,r.jsx)(n.code,{children:"'left'"})," or ",(0,r.jsx)(n.code,{children:"'right'"}),", determining the direction of the rotation."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important:"})," The gadget assumes that its input is at most 64 bits in size."]}),"\n",(0,r.jsxs)(n.p,{children:["If the input exceeds 64 bits, the gadget is invalid and fails to prove correct execution of the rotation.\nTo safely use ",(0,r.jsx)(n.code,{children:"rotate64()"}),", you need to make sure that the value passed in is range-checked to 64 bits;\nfor example, using ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Gadgets#rangecheck64",children:"Gadgets.rangeCheck64"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You can find more details about the implementation in the ",(0,r.jsx)(n.a,{href:"https://o1-labs.github.io/proof-systems/specs/kimchi.html?highlight=gates#rotation",children:"Mina book"})]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-50",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"field-4",children:"field"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element to rotate."]}),"\n",(0,r.jsx)(n.h5,{id:"bits-4",children:"bits"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsxs)(n.p,{children:["amount of bits to rotate this ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element with."]}),"\n",(0,r.jsx)(n.h5,{id:"direction-1",children:"direction"}),"\n",(0,r.jsx)(n.p,{children:"left or right rotation direction."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"left"'})," | ",(0,r.jsx)(n.code,{children:'"right"'})]}),"\n",(0,r.jsx)(n.h4,{id:"returns-52",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"throws-13",children:"Throws"}),"\n",(0,r.jsx)(n.p,{children:"Throws an error if the input value exceeds 64 bits."}),"\n",(0,r.jsx)(n.h4,{id:"example-21",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const x = Provable.witness(Field, () => Field(0b001100));\nconst y = Gadgets.rotate64(x, 2, 'left'); // left rotation by 2 bits\nconst z = Gadgets.rotate64(x, 2, 'right'); // right rotation by 2 bits\ny.assertEquals(0b110000);\nz.assertEquals(0b000011);\n\nconst xLarge = Provable.witness(Field, () => Field(12345678901234567890123456789012345678n));\nGadgets.rotate64(xLarge, 32, \"left\"); // throws an error since input exceeds 64 bits\n"})}),"\n",(0,r.jsx)(n.h3,{id:"xor",children:"xor()"}),"\n",(0,r.jsxs)(n.p,{children:["Bitwise XOR gadget on ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," elements. Equivalent to the ",(0,r.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR",children:["bitwise XOR ",(0,r.jsx)(n.code,{children:"^"})," operator in JavaScript"]}),".\nA XOR gate works by comparing two bits and returning ",(0,r.jsx)(n.code,{children:"1"})," if two bits differ, and ",(0,r.jsx)(n.code,{children:"0"})," if two bits are equal."]}),"\n",(0,r.jsx)(n.p,{children:"This gadget builds a chain of XOR gates recursively. Each XOR gate can verify 16 bit at most. If your input elements exceed 16 bit, another XOR gate will be added to the chain."}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"length"})," parameter lets you define how many bits should be compared. ",(0,r.jsx)(n.code,{children:"length"})," is rounded to the nearest multiple of 16, ",(0,r.jsx)(n.code,{children:"paddedLength = ceil(length / 16) * 16"}),", and both input values are constrained to fit into ",(0,r.jsx)(n.code,{children:"paddedLength"})," bits. The output is guaranteed to have at most ",(0,r.jsx)(n.code,{children:"paddedLength"})," bits as well."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Specifying a larger ",(0,r.jsx)(n.code,{children:"length"})," parameter adds additional constraints."]}),"\n",(0,r.jsxs)(n.p,{children:["It is also important to mention that specifying a smaller ",(0,r.jsx)(n.code,{children:"length"})," allows the verifier to infer the length of the original input data (e.g. smaller than 16 bit if only one XOR gate has been used).\nA zkApp developer should consider these implications when choosing the ",(0,r.jsx)(n.code,{children:"length"})," parameter and carefully weigh the trade-off between increased amount of constraints and security."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important:"})," Both ",(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," elements need to fit into ",(0,r.jsx)(n.code,{children:"2^paddedLength - 1"}),". Otherwise, an error is thrown and no proof can be generated."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, with ",(0,r.jsx)(n.code,{children:"length = 2"})," (",(0,r.jsx)(n.code,{children:"paddedLength = 16"}),"), ",(0,r.jsx)(n.code,{children:"xor()"})," will fail for any input that is larger than ",(0,r.jsx)(n.code,{children:"2**16"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You can find more details about the implementation in the ",(0,r.jsx)(n.a,{href:"https://o1-labs.github.io/proof-systems/specs/kimchi.html?highlight=gates#xor-1",children:"Mina book"})]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-51",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"a-3",children:"a"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element to compare."]}),"\n",(0,r.jsx)(n.h5,{id:"b-2",children:"b"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/api-reference/variables/Field",children:"Field"})," element to compare."]}),"\n",(0,r.jsx)(n.h5,{id:"length-8",children:"length"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.p,{children:"amount of bits to compare."}),"\n",(0,r.jsx)(n.h4,{id:"returns-53",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,r.jsx)(n.code,{children:"Field"})})}),"\n",(0,r.jsx)(n.h4,{id:"throws-14",children:"Throws"}),"\n",(0,r.jsxs)(n.p,{children:["Throws an error if the input values exceed ",(0,r.jsx)(n.code,{children:"2^paddedLength - 1"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"example-22",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let a = Field(0b0101);\nlet b = Field(0b0011);\n\nlet c = Gadgets.xor(a, b, 4); // xor-ing 4 bits\nc.assertEquals(0b0110);\n"})})]})}function o(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>a});var s=i(96540);const r={},l=s.createContext(r);function d(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);