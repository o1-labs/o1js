"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[99192],{28453:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>a});var n=s(96540);const o={},r=n.createContext(o);function c(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),n.createElement(r.Provider,{value:t},e.children)}},84554:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"basic-types/structs","title":"Structs","description":"Putting together all of the basic types covered in the preceding sections, we can use Struct to create more complex provable types.","source":"@site/versioned_docs/version-2.4.0/basic-types/structs.mdx","sourceDirName":"basic-types","slug":"/basic-types/structs","permalink":"/o1js/2.4.0/basic-types/structs","draft":false,"unlisted":false,"editUrl":"https://github.com/versioned_docs/version-2.4.0/basic-types/structs.mdx","tags":[],"version":"2.4.0","frontMatter":{"title":"Structs"},"sidebar":"docs","previous":{"title":"Arrays","permalink":"/o1js/2.4.0/basic-types/arrays"},"next":{"title":"Hashing","permalink":"/o1js/2.4.0/basic-types/hashing"}}');var o=s(74848),r=s(28453);const c={title:"Structs"},a=void 0,i={},u=[];function l(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Putting together all of the basic types covered in the preceding sections, we can use ",(0,o.jsx)(t.code,{children:"Struct"})," to create more complex provable types.\n",(0,o.jsx)(t.code,{children:"Struct"})," is a generic function that takes a configuration of properties and types that returns a class with the same properties and types.\nThe struct is always provable, but the types in the configuration must also be provable."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",metastring:"file=../snippets/structs/structs.ts start=start_voting_struct end=end_voting_struct",children:"class Vote extends Struct({\n  hasVoted: Bool,\n  inFavor: Bool,\n}) {\n  static default() {\n    return new Vote({ hasVoted: Bool(false), inFavor: Bool(false) });\n  }\n}\n\nclass Voter extends Struct({\n  publicKey: PublicKey,\n  vote: Vote,\n}) {}\n\n// Example usage\nconst voter = new Voter({\n  publicKey: PrivateKey.random().toPublicKey(),\n  vote: Vote.default(),\n});\n\n// set vote\nvoter.vote.hasVoted = Bool(true);\nvoter.vote.inFavor = Bool(true);\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Read more at the language reference: ",(0,o.jsx)(t.a,{href:"/o1js/api-reference/functions/Struct",children:"Struct"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);