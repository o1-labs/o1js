"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[32997],{28453:(t,e,s)=>{s.d(e,{R:()=>c,x:()=>a});var n=s(96540);const o={},r=n.createContext(o);function c(t){const e=n.useContext(r);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:c(t.components),n.createElement(r.Provider,{value:e},t.children)}},81996:(t,e,s)=>{s.r(e),s.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"basic-types/structs","title":"Structs","description":"Putting together all of the basic types covered in the preceding sections, we can use Struct to create more complex provable types.","source":"@site/docs/basic-types/structs.mdx","sourceDirName":"basic-types","slug":"/basic-types/structs","permalink":"/o1js/basic-types/structs","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/basic-types/structs.mdx","tags":[],"version":"current","frontMatter":{"title":"Structs"},"sidebar":"docs","previous":{"title":"Arrays","permalink":"/o1js/basic-types/arrays"},"next":{"title":"Hashing","permalink":"/o1js/basic-types/hashing"}}');var o=s(74848),r=s(28453);const c={title:"Structs"},a=void 0,i={},u=[];function l(t){const e={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:["Putting together all of the basic types covered in the preceding sections, we can use ",(0,o.jsx)(e.code,{children:"Struct"})," to create more complex provable types.\n",(0,o.jsx)(e.code,{children:"Struct"})," is a generic function that takes a configuration of properties and types that returns a class with the same properties and types.\nThe struct is always provable, but the types in the configuration must also be provable."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",metastring:"file=../snippets/structs/structs.ts start=start_voting_struct end=end_voting_struct",children:"class Vote extends Struct({\n  hasVoted: Bool,\n  inFavor: Bool,\n}) {\n  static default() {\n    return new Vote({ hasVoted: Bool(false), inFavor: Bool(false) });\n  }\n}\n\nclass Voter extends Struct({\n  publicKey: PublicKey,\n  vote: Vote,\n}) {}\n\n// Example usage\nconst voter = new Voter({\n  publicKey: PrivateKey.random().toPublicKey(),\n  vote: Vote.default(),\n});\n\n// set vote\nvoter.vote.hasVoted = Bool(true);\nvoter.vote.inFavor = Bool(true);\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Read more at the language reference: ",(0,o.jsx)(e.a,{href:"/o1js/api-reference/functions/Struct",children:"Struct"}),"."]})]})}function p(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(l,{...t})}):l(t)}}}]);