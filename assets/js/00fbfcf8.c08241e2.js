"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[31612],{28453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>l});var t=n(96540);const r={},a=t.createContext(r);function i(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:s},e.children)}},82673:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"basic-types/merkle-trees","title":"Merkle Trees","description":"Merkle trees are a fundamental data structure for collections in o1js, as they allow for efficient proofs of data inclusion.","source":"@site/docs/basic-types/merkle-trees.mdx","sourceDirName":"basic-types","slug":"/basic-types/merkle-trees","permalink":"/o1js/basic-types/merkle-trees","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/basic-types/merkle-trees.mdx","tags":[],"version":"current","frontMatter":{"title":"Merkle Trees"},"sidebar":"docs","previous":{"title":"Keypairs and Signatures","permalink":"/o1js/basic-types/keypairs-and-signatures"},"next":{"title":"Arrays","permalink":"/o1js/basic-types/arrays"}}');var r=n(74848),a=n(28453);const i={title:"Merkle Trees"},l=void 0,o={},d=[{value:"IndexedMerkleMap",id:"indexedmerklemap",level:2},{value:"MerkleTree",id:"merkletree",level:2},{value:"MerkleWitness",id:"merklewitness",level:3},{value:"MerkleList",id:"merklelist",level:2}];function c(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.p,{children:"Merkle trees are a fundamental data structure for collections in o1js, as they allow for efficient proofs of data inclusion.\nThere are several classes of Merkle tree exported by o1js, with various properties."}),"\n",(0,r.jsx)(s.h2,{id:"indexedmerklemap",children:"IndexedMerkleMap"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"IndexedMerkleMap"})," is a wrapper around a basic ",(0,r.jsx)(s.a,{href:"/o1js/basic-types/merkle-trees#MerkleTree",children:"Merkle tree"})," that offers a convenient\ninterface, with a key-value like API for getting and setting values."]}),"\n",(0,r.jsxs)(s.p,{children:["Both the key and the value in of the map can be typed as ",(0,r.jsx)(s.code,{children:"Field"})," or ",(0,r.jsx)(s.code,{children:"BigInt"}),"."]}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"IndexedMerkleMap"})," has a maximum height of 52, which means it can store up to 2^52 (roughly four quadrillion) elements.  Therefore, it is not suitable for\nuse cases requiring collision resistance over a larger domain, but it is suitable for most applications.  For instance, an app with billions of users\ncould have a leaf for each user stored in an ",(0,r.jsx)(s.code,{children:"IndexedMerkleMap"}),"."]})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"file=../snippets/merkle-trees/merkle-trees.ts start=start_indexed_merkle_map end=end_indexed_merkle_map",children:"const { IndexedMerkleMap } = Experimental;\n\nconst height = 4; // 2 ^ 4 = 16 leaves\nclass MyIndexedMerkleMap extends IndexedMerkleMap(height) {}\n\nconst map = new MyIndexedMerkleMap();\nmap.insert(1n, 20n);\nmap.insert(2n, 30n);\n\nmap.get(1n); // 20n\nmap.getOption(2n).orElse(0n); // 30n, Use .getOption to safely access values that may not exist\nmap.getOption(3n).orElse(0n); // 0n, values default to 0n\n"})}),"\n",(0,r.jsx)(s.h2,{id:"merkletree",children:"MerkleTree"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"MerkleTree"})," class is a general sparse Merkle tree implementation in JavaScript (not provable).  It is used to build and store\ndata in a tree structure, and exposes methods for generating witnesses and roots to use within provable code."]}),"\n",(0,r.jsx)(s.h3,{id:"merklewitness",children:"MerkleWitness"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"MerkleWitness"})," class is a proof of inclusion for a specific leaf in a ",(0,r.jsx)(s.code,{children:"MerkleTree"}),".  The ",(0,r.jsx)(s.code,{children:"MerkleWitness"})," class ",(0,r.jsx)(s.em,{children:"is"})," provable, so\nit can be used as an input into a provable function.  The witness consists of the leaf index and the hashes of sibling nodes, needed\nto generate the root hash of the tree."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"file=../snippets/merkle-trees/merkle-trees.ts start=start_merkle_tree end=end_merkle_tree",children:"const tree = new MerkleTree(height);\ntree.setLeaf(0n, Field(10));\ntree.setLeaf(1n, Field(20));\n\ntree.getLeaf(0n); // Field(10)\ntree.getLeaf(1n); // Field(20)\ntree.getLeaf(2n); // Field(0), values default to Field(0)\n\nclass MyMerkleWitness extends MerkleWitness(height) {}\nconst w = new MyMerkleWitness(tree.getWitness(1n));\n"})}),"\n",(0,r.jsx)(s.h2,{id:"merklelist",children:"MerkleList"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"MerkleList"})," is a class which represents a dynamic list of elements that can be committed to a single hash.  This is a useful\ndata structure when editing a list is required within a proof.  To pass a list into a proof as an argument, a\n",(0,r.jsx)(s.a,{href:"/o1js/basic-types/arrays",children:"provable array"})," may be simpler."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",metastring:"file=../snippets/merkle-trees/merkle-trees.ts start=start_merkle_list end=end_merkle_list",children:"// Create a MerkleList with any provable type, e.g. Field\nclass MyList extends MerkleList.create(Field) {}\n\nlet list = MyList.empty();\nlist.push(Field(5));\nlet element = list.pop(); // Field(5)\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Read more at the language reference: ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/namespaces/Experimental/functions/IndexedMerkleMap",children:"IndexedMerkleMap"}),", ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/MerkleTree",children:"MerkleTree"}),", ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/BaseMerkleWitness",children:"MerkleWitness"}),", ",(0,r.jsx)(s.a,{href:"/o1js/api-reference/classes/MerkleList",children:"MerkleList"}),"."]})]})}function p(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);