"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[17301],{28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>a});var t=r(96540);const i={},s=t.createContext(i);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(s.Provider,{value:n},e.children)}},70151:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>l,frontMatter:()=>c,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"api-reference/namespaces/Experimental/functions/Recursive","title":"Recursive","description":"Defined in163","source":"@site/versioned_docs/version-2.4.0/api-reference/namespaces/Experimental/functions/Recursive.mdx","sourceDirName":"api-reference/namespaces/Experimental/functions","slug":"/api-reference/namespaces/Experimental/functions/Recursive","permalink":"/o1js/2.4.0/api-reference/namespaces/Experimental/functions/Recursive","draft":false,"unlisted":false,"editUrl":"https://github.com/versioned_docs/version-2.4.0/api-reference/namespaces/Experimental/functions/Recursive.mdx","tags":[],"version":"2.4.0","frontMatter":{},"sidebar":"docs","previous":{"title":"OffchainState","permalink":"/o1js/2.4.0/api-reference/namespaces/Experimental/functions/OffchainState"},"next":{"title":"createProvableBigInt","permalink":"/o1js/2.4.0/api-reference/namespaces/Experimental/functions/createProvableBigInt"}}');var i=r(74848),s=r(28453);const c={},a=void 0,p={},o=[{value:"Type Parameters",id:"type-parameters",level:2},{value:"Parameters",id:"parameters",level:2},{value:"zkprogram",id:"zkprogram",level:3},{value:"Returns",id:"returns",level:2}];function u(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"function Recursive<PublicInputType, PublicOutputType, PrivateInputs>(zkprogram: {\n  maxProofsVerified: () => Promise<0 | 1 | 2>;\n  name: string;\n  privateInputTypes: PrivateInputs;\n  publicInputType: PublicInputType;\n  publicOutputType: PublicOutputType;\n  rawMethods: { [Key in string | number | symbol]: (args: any) => Promise<{ publicOutput: InferProvable<PublicOutputType> }> };\n } & { [Key in string | number | symbol]: (args: any) => Promise<{ proof: Proof<InferProvable<PublicInputType>, InferProvable<PublicOutputType>> }> }): { [Key in keyof PrivateInputs]: RecursiveProver<InferProvable<PublicInputType>, PublicInputType, InferProvable<PublicOutputType>, PrivateInputs[Key]> & { if: ConditionalRecursiveProver<InferProvable<PublicInputType>, PublicInputType, InferProvable<PublicOutputType>, PrivateInputs[Key]> } }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Defined in: ",(0,i.jsx)(n.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/index.ts#L163",children:"index.ts:163"})]}),"\n",(0,i.jsx)(n.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,i.jsxs)(n.p,{children:["\u2022 ",(0,i.jsx)(n.strong,{children:"PublicInputType"})," ",(0,i.jsx)(n.em,{children:"extends"})," ",(0,i.jsx)(n.a,{href:"/o1js/2.4.0/api-reference/type-aliases/Provable",children:(0,i.jsx)(n.code,{children:"Provable"})}),"<",(0,i.jsx)(n.code,{children:"any"}),">"]}),"\n",(0,i.jsxs)(n.p,{children:["\u2022 ",(0,i.jsx)(n.strong,{children:"PublicOutputType"})," ",(0,i.jsx)(n.em,{children:"extends"})," ",(0,i.jsx)(n.a,{href:"/o1js/2.4.0/api-reference/type-aliases/Provable",children:(0,i.jsx)(n.code,{children:"Provable"})}),"<",(0,i.jsx)(n.code,{children:"any"}),">"]}),"\n",(0,i.jsxs)(n.p,{children:["\u2022 ",(0,i.jsx)(n.strong,{children:"PrivateInputs"})," ",(0,i.jsx)(n.em,{children:"extends"})," {}"]}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsx)(n.h3,{id:"zkprogram",children:"zkprogram"}),"\n",(0,i.jsxs)(n.p,{children:["{\n",(0,i.jsx)(n.code,{children:"maxProofsVerified"}),": () => ",(0,i.jsx)(n.code,{children:"Promise"}),"<",(0,i.jsx)(n.code,{children:"0"})," | ",(0,i.jsx)(n.code,{children:"1"})," | ",(0,i.jsx)(n.code,{children:"2"}),">;\n",(0,i.jsx)(n.code,{children:"name"}),": ",(0,i.jsx)(n.code,{children:"string"}),";\n",(0,i.jsx)(n.code,{children:"privateInputTypes"}),": ",(0,i.jsx)(n.code,{children:"PrivateInputs"}),";\n",(0,i.jsx)(n.code,{children:"publicInputType"}),": ",(0,i.jsx)(n.code,{children:"PublicInputType"}),";\n",(0,i.jsx)(n.code,{children:"publicOutputType"}),": ",(0,i.jsx)(n.code,{children:"PublicOutputType"}),";\n",(0,i.jsx)(n.code,{children:"rawMethods"}),": { [Key in string | number | symbol]: (args: any) => Promise<{ publicOutput: InferProvable<PublicOutputType> }> };\n} & { [Key in string | number | symbol]: (args: any) => Promise<{ proof: Proof<InferProvable<PublicInputType>, InferProvable<PublicOutputType>> }> }"]}),"\n",(0,i.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"{ [Key in keyof PrivateInputs]: RecursiveProver<InferProvable<PublicInputType>, PublicInputType, InferProvable<PublicOutputType>, PrivateInputs[Key]> & { if: ConditionalRecursiveProver<InferProvable<PublicInputType>, PublicInputType, InferProvable<PublicOutputType>, PrivateInputs[Key]> } }"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);