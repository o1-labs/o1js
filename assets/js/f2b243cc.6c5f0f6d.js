"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[47798],{28453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>l});var s=a(96540);const r={},i=s.createContext(r);function t(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(i.Provider,{value:n},e.children)}},60242:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api-reference/namespaces/Mina/type-aliases/PendingTransaction","title":"PendingTransaction","description":"Defined in172","source":"@site/versioned_docs/version-2.4.0/api-reference/namespaces/Mina/type-aliases/PendingTransaction.mdx","sourceDirName":"api-reference/namespaces/Mina/type-aliases","slug":"/api-reference/namespaces/Mina/type-aliases/PendingTransaction","permalink":"/o1js/2.4.0/api-reference/namespaces/Mina/type-aliases/PendingTransaction","draft":false,"unlisted":false,"editUrl":"https://github.com/versioned_docs/version-2.4.0/api-reference/namespaces/Mina/type-aliases/PendingTransaction.mdx","tags":[],"version":"2.4.0","frontMatter":{},"sidebar":"docs","previous":{"title":"NetworkConstants","permalink":"/o1js/2.4.0/api-reference/namespaces/Mina/type-aliases/NetworkConstants"},"next":{"title":"PendingTransactionPromise","permalink":"/o1js/2.4.0/api-reference/namespaces/Mina/type-aliases/PendingTransactionPromise"}}');var r=a(74848),i=a(28453);const t={},l=void 0,c={},o=[{value:"Type declaration",id:"type-declaration",level:2},{value:"data?",id:"data",level:3},{value:"errors",id:"errors",level:3},{value:"Example",id:"example",level:4},{value:"hash",id:"hash",level:3},{value:"Example",id:"example-1",level:4},{value:"status",id:"status",level:3},{value:"Example",id:"example-2",level:4},{value:"safeWait()",id:"safewait",level:3},{value:"Parameters",id:"parameters",level:4},{value:"options?",id:"options",level:5},{value:"interval",id:"interval",level:6},{value:"maxAttempts",id:"maxattempts",level:6},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example-3",level:4},{value:"setFee()",id:"setfee",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"newFee",id:"newfee",level:5},{value:"Returns",id:"returns-1",level:4},{value:"setFeePerSnarkCost()",id:"setfeepersnarkcost",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"newFeePerSnarkCost",id:"newfeepersnarkcost",level:5},{value:"Returns",id:"returns-2",level:4},{value:"wait()",id:"wait",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"options?",id:"options-1",level:5},{value:"interval",id:"interval-1",level:6},{value:"maxAttempts",id:"maxattempts-1",level:6},{value:"Returns",id:"returns-3",level:4},{value:"Throws",id:"throws",level:4},{value:"Example",id:"example-4",level:4}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'type PendingTransaction = Pick<TransactionCommon, "transaction" | "toJSON" | "toPretty"> & {\n  data: SendZkAppResponse;\n  errors: string[];\n  hash: string;\n  status: PendingTransactionStatus;\n  safeWait: Promise<\n     | RejectedTransaction\n     | IncludedTransaction>;\n  setFee: TransactionPromise<boolean, false>;\n  setFeePerSnarkCost: TransactionPromise<boolean, false>;\n  wait: Promise<IncludedTransaction>;\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Defined in: ",(0,r.jsx)(n.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/mina/v1/transaction.ts#L172",children:"lib/mina/v1/transaction.ts:172"})]}),"\n",(0,r.jsxs)(n.p,{children:["Represents a transaction that has been submitted to the blockchain but has not yet reached a final state.\nThe ",(0,r.jsx)(n.a,{href:"/o1js/2.4.0/api-reference/namespaces/Mina/type-aliases/PendingTransaction",children:"PendingTransaction"})," type extends certain functionalities from the base ",(0,r.jsx)(n.a,{href:"/o1js/2.4.0/api-reference/namespaces/Mina/type-aliases/Transaction",children:"Transaction"})," type,\nadding methods to monitor the transaction's progress towards being finalized (either included in a block or rejected)."]}),"\n",(0,r.jsx)(n.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,r.jsx)(n.h3,{id:"data",children:"data?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"optional data: SendZkAppResponse;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Optional. Contains response data from a ZkApp transaction submission."}),"\n",(0,r.jsx)(n.h3,{id:"errors",children:"errors"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"errors: string[];\n"})}),"\n",(0,r.jsx)(n.p,{children:"An array of error messages related to the transaction processing."}),"\n",(0,r.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"if (!pendingTransaction.status === 'rejected') {\n  console.error(`Transaction errors: ${pendingTransaction.errors.join(', ')}`);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"hash",children:"hash"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"hash: string;\n"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the transaction hash as a string identifier."}),"\n",(0,r.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const txHash = pendingTransaction.hash;\nconsole.log(`Transaction hash: ${txHash}`);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"status",children:"status"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"status: PendingTransactionStatus;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"if (pendingTransaction.status === 'pending') {\n  console.log('Transaction accepted for processing by the Mina daemon.');\n  try {\n    await pendingTransaction.wait();\n    console.log('Transaction successfully included in a block.');\n  } catch (error) {\n    console.error('Transaction was rejected or failed to be included in a block:', error);\n  }\n} else {\n  console.error('Transaction was not accepted for processing by the Mina daemon.');\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"safewait",children:"safeWait()"}),"\n",(0,r.jsx)(n.p,{children:"Waits for the transaction to be included in a block. This method polls the Mina daemon to check the transaction's status"}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"options",children:"options?"}),"\n",(0,r.jsx)(n.p,{children:"Configuration options for polling behavior."}),"\n",(0,r.jsx)(n.h6,{id:"interval",children:"interval"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.p,{children:"The time interval, in milliseconds, between each polling attempt."}),"\n",(0,r.jsx)(n.h6,{id:"maxattempts",children:"maxAttempts"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.p,{children:"The maximum number of polling attempts."}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Promise"}),"<\n| ",(0,r.jsx)(n.a,{href:"/o1js/2.4.0/api-reference/namespaces/Mina/type-aliases/RejectedTransaction",children:(0,r.jsx)(n.code,{children:"RejectedTransaction"})}),"\n| ",(0,r.jsx)(n.a,{href:"/o1js/2.4.0/api-reference/namespaces/Mina/type-aliases/IncludedTransaction",children:(0,r.jsx)(n.code,{children:"IncludedTransaction"})}),">"]}),"\n",(0,r.jsx)(n.p,{children:"A promise that resolves to the transaction's final state."}),"\n",(0,r.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const transaction = await pendingTransaction.wait({ maxAttempts: 5, interval: 1000 });\nconsole.log(transaction.status); // 'included' or 'rejected'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"setfee",children:"setFee()"}),"\n",(0,r.jsxs)(n.p,{children:["setFee is the same as (newFee) but for a ",(0,r.jsx)(n.a,{href:"/o1js/2.4.0/api-reference/namespaces/Mina/type-aliases/PendingTransaction",children:"PendingTransaction"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"newfee",children:"newFee"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/o1js/2.4.0/api-reference/classes/UInt64",children:(0,r.jsx)(n.code,{children:"UInt64"})})}),"\n",(0,r.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/2.4.0/api-reference/type-aliases/TransactionPromise",children:(0,r.jsx)(n.code,{children:"TransactionPromise"})}),"<",(0,r.jsx)(n.code,{children:"boolean"}),", ",(0,r.jsx)(n.code,{children:"false"}),">"]}),"\n",(0,r.jsx)(n.h3,{id:"setfeepersnarkcost",children:"setFeePerSnarkCost()"}),"\n",(0,r.jsxs)(n.p,{children:["setFeePerSnarkCost is the same as (newFeePerSnarkCost) but for a ",(0,r.jsx)(n.a,{href:"/o1js/2.4.0/api-reference/namespaces/Mina/type-aliases/PendingTransaction",children:"PendingTransaction"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"newfeepersnarkcost",children:"newFeePerSnarkCost"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/o1js/2.4.0/api-reference/type-aliases/TransactionPromise",children:(0,r.jsx)(n.code,{children:"TransactionPromise"})}),"<",(0,r.jsx)(n.code,{children:"boolean"}),", ",(0,r.jsx)(n.code,{children:"false"}),">"]}),"\n",(0,r.jsx)(n.h3,{id:"wait",children:"wait()"}),"\n",(0,r.jsx)(n.p,{children:"Waits for the transaction to be included in a block. This method polls the Mina daemon to check the transaction's status, and throws an error if the transaction is rejected."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"options-1",children:"options?"}),"\n",(0,r.jsx)(n.p,{children:"Configuration options for polling behavior."}),"\n",(0,r.jsx)(n.h6,{id:"interval-1",children:"interval"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.p,{children:"The interval, in milliseconds, between status checks."}),"\n",(0,r.jsx)(n.h6,{id:"maxattempts-1",children:"maxAttempts"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.p,{children:"The maximum number of attempts to check the transaction status."}),"\n",(0,r.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Promise"}),"<",(0,r.jsx)(n.a,{href:"/o1js/2.4.0/api-reference/namespaces/Mina/type-aliases/IncludedTransaction",children:(0,r.jsx)(n.code,{children:"IncludedTransaction"})}),">"]}),"\n",(0,r.jsx)(n.p,{children:"A promise that resolves to the transaction's final state or throws an error."}),"\n",(0,r.jsx)(n.h4,{id:"throws",children:"Throws"}),"\n",(0,r.jsx)(n.p,{children:"If the transaction is rejected or fails to finalize within the given attempts."}),"\n",(0,r.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"try {\n  const transaction = await pendingTransaction.wait({ maxAttempts: 10, interval: 2000 });\n  console.log('Transaction included in a block.');\n} catch (error) {\n  console.error('Transaction rejected or failed to finalize:', error);\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);