"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[6236],{28453:(a,e,t)=>{t.d(e,{R:()=>s,x:()=>o});var c=t(96540);const n={},d=c.createContext(n);function s(a){const e=c.useContext(d);return c.useMemo((function(){return"function"==typeof a?a(e):{...e,...a}}),[e,a])}function o(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(n):a.components||n:s(a.components),c.createElement(d.Provider,{value:e},a.children)}},63106:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>i});const c=JSON.parse('{"id":"tutorials/hmac/tests","title":"HMAC-SHA256 Tests","description":"Complete HMAC-SHA256 tests in o1js","source":"@site/docs/tutorials/hmac/03-tests.mdx","sourceDirName":"tutorials/hmac","slug":"/tutorials/hmac/tests","permalink":"/o1js/tutorials/hmac/tests","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/tutorials/hmac/03-tests.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"HMAC-SHA256 Tests","sidebar_label":"Tests","description":"Complete HMAC-SHA256 tests in o1js","pagination_prev":"tutorials/hmac/implementation"},"sidebar":"docs","previous":{"title":"Implementation","permalink":"/o1js/tutorials/hmac/implementation"},"next":{"title":"o1js API Reference","permalink":"/o1js/api-reference/Introduction"}}');var n=t(74848),d=t(28453);const s={title:"HMAC-SHA256 Tests",sidebar_label:"Tests",description:"Complete HMAC-SHA256 tests in o1js",pagination_prev:"tutorials/hmac/implementation"},o=void 0,r={},i=[];function m(a){const e={a:"a",code:"code",p:"p",pre:"pre",...(0,d.R)(),...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:["Here is our tests with ",(0,n.jsx)(e.a,{href:"https://datatracker.ietf.org/doc/html/rfc4231",children:"RFC4231"})," test vectors:"]}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",metastring:"file=../../snippets/hmac-sha256/hmac-sha256.test.ts",children:'import { describe, expect, it } from "vitest";\nimport { Bytes } from "o1js";\nimport { HMAC_SHA256 } from "./hmac-sha256";\n\ndescribe("HMAC-SHA256 RFC 4231 Test Vectors", () => {\n  // Test Case 1 - Basic test case with key length < block size\n  it("should pass RFC 4231 Test Case 1", () => {\n    const key = Bytes.fromHex("0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b");\n    const data = Bytes.fromString("Hi There");\n\n    const ourHmac = HMAC_SHA256.compute(key, data);\n    const expectedHmac =\n      "b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7";\n\n    expect(ourHmac.toHex()).toBe(expectedHmac);\n  });\n\n  // Test Case 2 - Test with key and data that is the ASCII string "what do ya want for nothing?"\n  it("should pass RFC 4231 Test Case 2", () => {\n    const key = Bytes.fromString("Jefe");\n    const data = Bytes.fromString("what do ya want for nothing?");\n\n    const ourHmac = HMAC_SHA256.compute(key, data);\n    const expectedHmac =\n      "5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843";\n\n    expect(ourHmac.toHex()).toBe(expectedHmac);\n  });\n\n  // Test Case 3 - Test with key and data that are long hex strings\n  it("should pass RFC 4231 Test Case 3", () => {\n    const key = Bytes.fromHex("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");\n    const data = Bytes.fromHex(\n      "dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"\n    );\n\n    const ourHmac = HMAC_SHA256.compute(key, data);\n    const expectedHmac =\n      "773ea91e36800e46854db8ebd09181a72959098b3ef8c122d9635514ced565fe";\n\n    expect(ourHmac.toHex()).toBe(expectedHmac);\n  });\n\n  // Test Case 4 - Test with key and data that are long hex strings\n  it("should pass RFC 4231 Test Case 4", () => {\n    const key = Bytes.fromHex(\n      "0102030405060708090a0b0c0d0e0f10111213141516171819"\n    );\n    const data = Bytes.fromHex(\n      "cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd"\n    );\n\n    const ourHmac = HMAC_SHA256.compute(key, data);\n    const expectedHmac =\n      "82558a389a443c0ea4cc819899f2083a85f0faa3e578f8077a2e3ff46729665b";\n\n    expect(ourHmac.toHex()).toBe(expectedHmac);\n  });\n\n  // Test Case 5 - Test with truncation to 128 bits\n  it("should pass RFC 4231 Test Case 5 (without truncation)", () => {\n    const key = Bytes.fromHex("0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c");\n    const data = Bytes.fromString("Test With Truncation");\n\n    const ourHmac = HMAC_SHA256.compute(key, data);\n    const expectedHmac =\n      "a3b6167473100ee06e0c796c2955552bfa6f7c0a6a8aef8b93f860aab0cd20c5";\n\n    expect(ourHmac.toHex()).toBe(expectedHmac);\n  });\n\n  // Test Case 6 - Test with key larger than block size\n  it("should pass RFC 4231 Test Case 6", () => {\n    const key = Bytes.fromHex(\n      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\n    );\n    const data = Bytes.fromString(\n      "Test Using Larger Than Block-Size Key - Hash Key First"\n    );\n\n    const ourHmac = HMAC_SHA256.compute(key, data);\n    const expectedHmac =\n      "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54";\n\n    expect(ourHmac.toHex()).toBe(expectedHmac);\n  });\n\n  // Test Case 7 - Test with key and data larger than block size\n  it("should pass RFC 4231 Test Case 7", () => {\n    const key = Bytes.fromHex(\n      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"\n    );\n    const data = Bytes.fromString(\n      "This is a test using a larger than block-size key and a larger than block-size data. The key needs to be hashed before being used by the HMAC algorithm."\n    );\n\n    const ourHmac = HMAC_SHA256.compute(key, data);\n    const expectedHmac =\n      "9b09ffa71b942fcb27635fbcd5b0e944bfdc63644f0713938a7f51535c3a35e2";\n\n    expect(ourHmac.toHex()).toBe(expectedHmac);\n  });\n});\n'})})]})}function p(a={}){const{wrapper:e}={...(0,d.R)(),...a.components};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(m,{...a})}):m(a)}}}]);