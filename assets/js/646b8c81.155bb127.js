"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[54915],{15348:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api-reference/type-aliases/Provable","title":"Provable","description":"Defined in27","source":"@site/docs/api-reference/type-aliases/Provable.mdx","sourceDirName":"api-reference/type-aliases","slug":"/api-reference/type-aliases/Provable","permalink":"/o1js/api-reference/type-aliases/Provable","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/api-reference/type-aliases/Provable.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Option","permalink":"/o1js/api-reference/type-aliases/Option"},"next":{"title":"ProvableExtended","permalink":"/o1js/api-reference/type-aliases/ProvableExtended"}}');var l=r(74848),a=r(28453);const i={},d=void 0,t={},c=[{value:"Type Parameters",id:"type-parameters",level:2},{value:"Type declaration",id:"type-declaration",level:2},{value:"check()",id:"check",level:3},{value:"Parameters",id:"parameters",level:4},{value:"value",id:"value",level:5},{value:"Returns",id:"returns",level:4},{value:"fromFields()",id:"fromfields",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"fields",id:"fields",level:5},{value:"aux",id:"aux",level:5},{value:"Returns",id:"returns-1",level:4},{value:"fromValue()",id:"fromvalue",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"x",id:"x",level:5},{value:"Returns",id:"returns-2",level:4},{value:"toAuxiliary()",id:"toauxiliary",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"value?",id:"value-1",level:5},{value:"Returns",id:"returns-3",level:4},{value:"toCanonical()?",id:"tocanonical",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"x",id:"x-1",level:5},{value:"Returns",id:"returns-4",level:4},{value:"toFields()",id:"tofields",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"value",id:"value-2",level:5},{value:"Returns",id:"returns-5",level:4},{value:"toValue()",id:"tovalue",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"x",id:"x-2",level:5},{value:"Returns",id:"returns-6",level:4},{value:"sizeInFields()",id:"sizeinfields",level:3},{value:"Returns",id:"returns-7",level:4}];function o(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type Provable<T, TValue> = {\n  check: (value: T) => void;\n  fromFields: (fields: Field[], aux: any[]) => T;\n  fromValue: (x: TValue | T) => T;\n  toAuxiliary: (value?: T) => any[];\n  toCanonical: (x: T) => T;\n  toFields: (value: T) => Field[];\n  toValue: (x: T) => TValue;\n  sizeInFields: number;\n};\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Defined in: ",(0,l.jsx)(n.a,{href:"https://github.com/o1-labs/o1js/blob/df1ff77af12d7cbbed4a6167f02815fad4f0dceb/src/lib/provable/types/provable-intf.ts#L27",children:"lib/provable/types/provable-intf.ts:27"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Provable<T>"})," is the general interface for provable types in o1js."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Provable<T>"})," describes how a type ",(0,l.jsx)(n.code,{children:"T"})," is made up of ",(0,l.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),' elements and "auxiliary" (non-provable) data.']}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Provable<T>"})," is the required input type in several methods in o1js.\nOne convenient way to create a ",(0,l.jsx)(n.code,{children:"Provable<T>"})," is using ",(0,l.jsx)(n.code,{children:"Struct"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["All built-in provable types in o1js (",(0,l.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:"Field"}),", ",(0,l.jsx)(n.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"}),", etc.) are instances of ",(0,l.jsx)(n.code,{children:"Provable<T>"})," as well."]}),"\n",(0,l.jsx)(n.p,{children:"Note: These methods are meant to be used by the library internally and are not directly when writing provable code."}),"\n",(0,l.jsx)(n.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,l.jsxs)(n.p,{children:["\u2022 ",(0,l.jsx)(n.strong,{children:"T"})]}),"\n",(0,l.jsxs)(n.p,{children:["\u2022 ",(0,l.jsx)(n.strong,{children:"TValue"})," = ",(0,l.jsx)(n.code,{children:"any"})]}),"\n",(0,l.jsx)(n.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,l.jsx)(n.h3,{id:"check",children:"check()"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"check: (value: T) => void;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Add assertions to the proof to check if ",(0,l.jsx)(n.code,{children:"value"})," is a valid member of type ",(0,l.jsx)(n.code,{children:"T"}),".\nThis function does not return anything, instead it creates any number of assertions to prove that ",(0,l.jsx)(n.code,{children:"value"})," is a valid member of the type ",(0,l.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["For instance, calling check function on the type ",(0,l.jsx)(n.a,{href:"/o1js/api-reference/classes/Bool",children:"Bool"})," asserts that the value of the element is either 1 or 0."]}),"\n",(0,l.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsx)(n.h5,{id:"value",children:"value"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"T"})}),"\n",(0,l.jsxs)(n.p,{children:["the element of type ",(0,l.jsx)(n.code,{children:"T"})," to put assertions on."]}),"\n",(0,l.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"void"})}),"\n",(0,l.jsx)(n.h3,{id:"fromfields",children:"fromFields()"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"fromFields: (fields: Field[], aux: any[]) => T;\n"})}),"\n",(0,l.jsxs)(n.p,{children:["A function that returns an element of type ",(0,l.jsx)(n.code,{children:"T"}),' from the given provable and "auxiliary" data.']}),"\n",(0,l.jsxs)(n.p,{children:["This function is the reverse operation of calling ",(0,l.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/Provable#tofields",children:"toFields"})," and ",(0,l.jsx)(n.a,{href:"/o1js/api-reference/type-aliases/Provable#toauxiliary",children:"toAuxiliary"})," methods on an element of type ",(0,l.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,l.jsx)(n.h5,{id:"fields",children:"fields"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,l.jsx)(n.code,{children:"Field"})}),"[]"]}),"\n",(0,l.jsxs)(n.p,{children:["an array of ",(0,l.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," elements describing the provable data of the new ",(0,l.jsx)(n.code,{children:"T"})," element."]}),"\n",(0,l.jsx)(n.h5,{id:"aux",children:"aux"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"any"}),"[]"]}),"\n",(0,l.jsxs)(n.p,{children:['an array of any type describing the "auxiliary" data of the new ',(0,l.jsx)(n.code,{children:"T"})," element, optional."]}),"\n",(0,l.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"T"})}),"\n",(0,l.jsxs)(n.p,{children:["An element of type ",(0,l.jsx)(n.code,{children:"T"}),' generated from the given provable and "auxiliary" data.']}),"\n",(0,l.jsx)(n.h3,{id:"fromvalue",children:"fromValue()"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"fromValue: (x: TValue | T) => T;\n"})}),"\n",(0,l.jsx)(n.p,{children:"Convert provable type from a normal JS type."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,l.jsx)(n.h5,{id:"x",children:"x"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"TValue"})," | ",(0,l.jsx)(n.code,{children:"T"})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"T"})}),"\n",(0,l.jsx)(n.h3,{id:"toauxiliary",children:"toAuxiliary()"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"toAuxiliary: (value?: T) => any[];\n"})}),"\n",(0,l.jsxs)(n.p,{children:["A function that takes ",(0,l.jsx)(n.code,{children:"value"})," (optional), an element of type ",(0,l.jsx)(n.code,{children:"T"}),', as argument and\nreturns an array of any type that make up the "auxiliary" (non-provable) data of ',(0,l.jsx)(n.code,{children:"value"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,l.jsx)(n.h5,{id:"value-1",children:"value?"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"T"})}),"\n",(0,l.jsxs)(n.p,{children:["the element of type ",(0,l.jsx)(n.code,{children:"T"})," to generate the auxiliary data array from, optional.\nIf not provided, a default value for auxiliary data is returned."]}),"\n",(0,l.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"any"}),"[]"]}),"\n",(0,l.jsxs)(n.p,{children:["An array of any type describing how this ",(0,l.jsx)(n.code,{children:"T"}),' element is made up of "auxiliary" (non-provable) data.']}),"\n",(0,l.jsx)(n.h3,{id:"tocanonical",children:"toCanonical()?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"optional toCanonical: (x: T) => T;\n"})}),"\n",(0,l.jsx)(n.p,{children:"Optional method which transforms a provable type into its canonical representation."}),"\n",(0,l.jsx)(n.p,{children:"This is needed for types that have multiple representations of the same underlying value,\nand might even not have perfect completeness for some of those representations."}),"\n",(0,l.jsxs)(n.p,{children:["An example is the ",(0,l.jsx)(n.code,{children:"ForeignField"})," class, which allows non-native field elements to exist in unreduced form.\nThe unreduced form is not perfectly complete, for example, addition of two unreduced field elements can cause a prover error."]}),"\n",(0,l.jsxs)(n.p,{children:["Specific protocols need to be able to protect themselves against incomplete operations at all costs.\nFor example, when using actions and reducer, the reducer must be able to produce a proof regardless of the input action.\n",(0,l.jsx)(n.code,{children:"toCanonical()"})," converts any input into a safe form and enables us to handle cases like this generically."]}),"\n",(0,l.jsxs)(n.p,{children:["Note: For most types, this method is the identity function.\nThe identity function will also be used when the ",(0,l.jsx)(n.code,{children:"toCanonical()"})," is not present on a type."]}),"\n",(0,l.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,l.jsx)(n.h5,{id:"x-1",children:"x"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"T"})}),"\n",(0,l.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"T"})}),"\n",(0,l.jsx)(n.h3,{id:"tofields",children:"toFields()"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"toFields: (value: T) => Field[];\n"})}),"\n",(0,l.jsxs)(n.p,{children:["A function that takes ",(0,l.jsx)(n.code,{children:"value"}),", an element of type ",(0,l.jsx)(n.code,{children:"T"}),", as argument and returns\nan array of ",(0,l.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," elements that make up the provable data of ",(0,l.jsx)(n.code,{children:"value"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,l.jsx)(n.h5,{id:"value-2",children:"value"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"T"})}),"\n",(0,l.jsxs)(n.p,{children:["the element of type ",(0,l.jsx)(n.code,{children:"T"})," to generate the ",(0,l.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," array from."]}),"\n",(0,l.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:(0,l.jsx)(n.code,{children:"Field"})}),"[]"]}),"\n",(0,l.jsxs)(n.p,{children:["A ",(0,l.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," array describing how this ",(0,l.jsx)(n.code,{children:"T"})," element is made up of ",(0,l.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," elements."]}),"\n",(0,l.jsx)(n.h3,{id:"tovalue",children:"toValue()"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"toValue: (x: T) => TValue;\n"})}),"\n",(0,l.jsx)(n.p,{children:"Convert provable type to a normal JS type."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,l.jsx)(n.h5,{id:"x-2",children:"x"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"T"})}),"\n",(0,l.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"TValue"})}),"\n",(0,l.jsx)(n.h3,{id:"sizeinfields",children:"sizeInFields()"}),"\n",(0,l.jsxs)(n.p,{children:["Return the size of the ",(0,l.jsx)(n.code,{children:"T"})," type in terms of ",(0,l.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type, as ",(0,l.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," is the primitive type."]}),"\n",(0,l.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})}),"\n",(0,l.jsxs)(n.p,{children:["A ",(0,l.jsx)(n.code,{children:"number"})," representing the size of the ",(0,l.jsx)(n.code,{children:"T"})," type in terms of ",(0,l.jsx)(n.a,{href:"/o1js/api-reference/classes/Field",children:"Field"})," type."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>d});var s=r(96540);const l={},a=s.createContext(l);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);