"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[94201],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(96540);const a={},o=i.createContext(a);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},64602:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"advanced-concepts/serialization","title":"Serialization","description":"Proofs and verification keys can be serialized to disk for convenience and interoperability.  Compiled","source":"@site/docs/advanced-concepts/serialization.mdx","sourceDirName":"advanced-concepts","slug":"/advanced-concepts/serialization","permalink":"/o1js/advanced-concepts/serialization","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/advanced-concepts/serialization.mdx","tags":[],"version":"current","frontMatter":{"title":"Serialization"},"sidebar":"docs","previous":{"title":"Full Proof Flow with ZkProgram","permalink":"/o1js/writing-constraint-systems/zk-program"},"next":{"title":"Recursion","permalink":"/o1js/advanced-concepts/recursion"}}');var a=t(74848),o=t(28453);const r={title:"Serialization"},s=void 0,c={},l=[{value:"Serializing Proofs and Verification Keys",id:"serializing-proofs-and-verification-keys",level:2},{value:"Using the Cache Protocol for ZkProgram and SmartContract",id:"using-the-cache-protocol-for-zkprogram-and-smartcontract",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Proofs and verification keys can be serialized to disk for convenience and interoperability.  Compiled\nconstraint systems also have a cache protocol which can be used to speed up the time it takes to generate\nand verify proofs.  In the following examples, pretend we have a dummy ",(0,a.jsx)(n.code,{children:"ZkProgram"})," like so:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"file=../snippets/serialization/serialization.ts start=start_dummy end=end_dummy",children:'const Dummy = ZkProgram({\n  name: "Dummy",\n  publicOutput: null,\n  methods: {\n    dummy: {\n      privateInputs: [],\n      method: async () => {\n        return { publicOutput: null };\n      },\n    },\n  },\n});\n'})}),"\n",(0,a.jsx)(n.h2,{id:"serializing-proofs-and-verification-keys",children:"Serializing Proofs and Verification Keys"}),"\n",(0,a.jsxs)(n.p,{children:["Proofs and verification keys in o1js are really representations of ",(0,a.jsx)(n.code,{children:"Pickles"})," artifacts that are passed through\nthe bindings layer into OCaml.  In JavaScript, we only store base64 encoded strings, which can be easily\nserialized to save for later use."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"file=../snippets/serialization/serialization.ts start=start_proofs_and_vks end=end_proofs_and_vks",children:'// Compile once to generate the Verification Key\nconst dummy = await Dummy.compile();\n\n// Serialize the verification key\nfs.writeFileSync(\n  "dummy_vk.json",\n  VerificationKey.toJSON(dummy.verificationKey)\n);\n\nconst proof = await Dummy.dummy();\n\n// Serialize the proof\nfs.writeFileSync("dummy_proof.json", JSON.stringify(proof.proof.toJSON()));\n'})}),"\n",(0,a.jsx)(n.h2,{id:"using-the-cache-protocol-for-zkprogram-and-smartcontract",children:"Using the Cache Protocol for ZkProgram and SmartContract"}),"\n",(0,a.jsxs)(n.p,{children:["When calling ",(0,a.jsx)(n.code,{children:"compile"})," on a ",(0,a.jsx)(n.code,{children:"ZkProgram"})," or ",(0,a.jsx)(n.code,{children:"SmartContract"}),", you can pass in a cache parameter.  The cache must\nbe an object that implements the Cache protocol.  o1js exports a file system cache implementation by default.\nHere's an example of how to use it:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"file=../snippets/serialization/serialization.ts start=start_cache end=end_cache",children:"// Pass in a cache to write the artifacts to disk\nconst cache = Cache.FileSystemDefault;\nawait Dummy.compile({ cache });\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Check out the ",(0,a.jsx)(n.a,{href:"/o1js/api-reference/variables/Cache",children:"api reference"})," for more details."]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);