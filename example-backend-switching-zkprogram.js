import { switchBackend, getCurrentBackend, Field, ZkProgram, Provable } from './dist/node/index.js';

async function testBackend(backendName) {
  console.log(`\nTesting with ${backendName} backend:`);
  console.log('=' + '='.repeat(backendName.length + 18));
  
  await switchBackend(backendName);
  console.log('Current backend:', getCurrentBackend());
  
  // Define a simple ZkProgram
  const SimpleProgram = ZkProgram({
    name: 'SimpleProgram',
    publicInput: Field,
    
    methods: {
      multiply: {
        privateInputs: [Field],
        method(publicInput, privateInput) {
          return publicInput.mul(privateInput);
        },
      },
      
      square: {
        privateInputs: [],
        method(publicInput) {
          return publicInput.mul(publicInput);
        },
      },
    },
  });

  console.log('\nCompiling ZkProgram...');
  const startTime = Date.now();
  
  try {
    const { verificationKey } = await SimpleProgram.compile();
    const compileTime = Date.now() - startTime;
    
    console.log('✅ Compilation successful!');
    console.log(`Compilation time: ${compileTime}ms`);
    console.log(`Verification key hash: ${verificationKey.hash}`);
    console.log(`Verification key data length: ${verificationKey.data.length}`);
    
    // Test proving
    console.log('\nTesting proof generation...');
    const publicInput = Field(5);
    const privateInput = Field(7);
    
    const proofStartTime = Date.now();
    const proof = await SimpleProgram.multiply(publicInput, privateInput);
    const proofTime = Date.now() - proofStartTime;
    
    console.log('✅ Proof generated!');
    console.log(`Proof generation time: ${proofTime}ms`);
    console.log(`Public input: ${publicInput}`);
    console.log(`Private input: ${privateInput}`);
    console.log(`Public output: ${proof.publicOutput}`);
    
    // Verify the proof
    const verifyStartTime = Date.now();
    const isValid = await SimpleProgram.verify(proof);
    const verifyTime = Date.now() - verifyStartTime;
    
    console.log(`\n✅ Proof verification: ${isValid ? 'PASSED' : 'FAILED'}`);
    console.log(`Verification time: ${verifyTime}ms`);
    
    return {
      backend: backendName,
      compilationTime: compileTime,
      proofTime: proofTime,
      verificationTime: verifyTime,
      verificationKeyHash: verificationKey.hash,
    };
    
  } catch (error) {
    console.error('❌ Error during compilation or proving:', error.message);
    return {
      backend: backendName,
      error: error.message,
    };
  }
}

async function main() {
  console.log('Backend Switching with ZkProgram Example');
  console.log('======================================');
  
  // Test both backends
  const snarkyResults = await testBackend('snarky');
  const sparkyResults = await testBackend('sparky');
  
  // Compare results
  console.log('\n\nComparison Summary:');
  console.log('==================');
  
  console.log('\nSnarky Backend:');
  if (!snarkyResults.error) {
    console.log(`  Compilation time: ${snarkyResults.compilationTime}ms`);
    console.log(`  Proof time: ${snarkyResults.proofTime}ms`);
    console.log(`  Verification time: ${snarkyResults.verificationTime}ms`);
    console.log(`  VK Hash: ${snarkyResults.verificationKeyHash}`);
  } else {
    console.log(`  Error: ${snarkyResults.error}`);
  }
  
  console.log('\nSparky Backend:');
  if (!sparkyResults.error) {
    console.log(`  Compilation time: ${sparkyResults.compilationTime}ms`);
    console.log(`  Proof time: ${sparkyResults.proofTime}ms`);
    console.log(`  Verification time: ${sparkyResults.verificationTime}ms`);
    console.log(`  VK Hash: ${sparkyResults.verificationKeyHash}`);
  } else {
    console.log(`  Error: ${sparkyResults.error}`);
  }
  
  // Check if verification keys match
  if (!snarkyResults.error && !sparkyResults.error) {
    console.log('\nVerification Key Compatibility:');
    const vkMatch = snarkyResults.verificationKeyHash === sparkyResults.verificationKeyHash;
    console.log(`  VK Hashes ${vkMatch ? '✅ MATCH' : '❌ DIFFER'}`);
    
    if (!vkMatch) {
      console.log('  Note: Different VK hashes mean proofs generated by one backend');
      console.log('        cannot be verified by the other backend.');
    }
  }
}

main().catch(console.error);