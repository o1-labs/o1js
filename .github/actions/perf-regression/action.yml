name: Performance Regression (Dump or Check)
description: Runs performance regression tests in dump or check mode. Auto mode determines the mode based on the PR label.

inputs:
  mode:
    description: "'dump' | 'check' | 'auto' (auto uses the PR label)"
    required: false
    default: auto
  label_name:
    description: "Label that enables dump mode when present (auto mode)"
    required: false
    default: dump-performance

  artifact_name:
    description: "Artifact name used to store the performance baseline JSON"
    required: false
    default: perf-regression-json
  baseline_path:
    description: "Path where the performance baseline JSON is stored"
    required: false
    default: tests/perf-regression/perf-regression.json

  workflow_name:
    description: "Workflow name to search for prior runs"
    required: false
    default: ""
  branch:
    description: "Branch to search prior runs on"
    required: false
    default: ""
  target_repo:
    description: "owner/repo to search in"
    required: false
    default: ""

  run_command:
    description: "Shell command to run performance tests (reads PERF_MODE env)"
    required: false
    default: sh run-ci-tests.sh

runs:
  using: "composite"
  steps:
    - name: Resolve workflow and repository context
      shell: bash
      env:
        IN_WORKFLOW: ${{ inputs.workflow_name }}
        IN_BRANCH: ${{ inputs.branch }}
        IN_REPO: ${{ inputs.target_repo }}
        WF_CTX: ${{ github.workflow }}
        HEAD_REF: ${{ github.head_ref }}
        REF_NAME: ${{ github.ref_name }}
        REPO_CTX: ${{ github.repository }}
      run: |
        set -euo pipefail
        WF_NAME="${IN_WORKFLOW:-$WF_CTX}"
        BRANCH="${IN_BRANCH:-${HEAD_REF:-$REF_NAME}}"
        REPO="${IN_REPO:-$REPO_CTX}"

        echo "WF_NAME=$WF_NAME" >> "$GITHUB_ENV"
        echo "BRANCH=$BRANCH" >> "$GITHUB_ENV"
        echo "TARGET_REPO=$REPO" >> "$GITHUB_ENV"
        echo "Resolved context:"
        echo "  Workflow: $WF_NAME"
        echo "  Branch: $BRANCH"
        echo "  Repository: $REPO"

    - name: Determine dump or check mode
      id: resolve-mode
      shell: bash
      env:
        MODE: ${{ inputs.mode }}
        LABEL_NAME: ${{ inputs.label_name }}
        GH_TOKEN: ${{ github.token }}
        EVENT_NAME: ${{ github.event_name }}
        OWNER_REPO: ${{ github.repository }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        set -euo pipefail
        MODE="${MODE:-auto}"
        if [[ "$MODE" == "dump" ]]; then
          PERF_MODE="--dump"
          REASON="explicit input"
        elif [[ "$MODE" == "check" ]]; then
          PERF_MODE="--check"
          REASON="explicit input"
        else
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            LABELS=$(gh api "repos/$OWNER_REPO/issues/$PR_NUMBER/labels" --jq '.[].name' | tr '\n' ' ')
            if echo "$LABELS" | grep -q -w "$LABEL_NAME"; then
              PERF_MODE="--dump"
              REASON="label $LABEL_NAME present"
            else
              PERF_MODE="--check"
              REASON="label $LABEL_NAME absent"
            fi
          else
            PERF_MODE="--check"
            REASON="non-PR event"
          fi
        fi

        echo "PERF_MODE=$PERF_MODE" | tee -a "$GITHUB_ENV"
        echo "perf_mode=$PERF_MODE" >> "$GITHUB_OUTPUT"
        echo "Mode: $PERF_MODE ($REASON)"

    - name: Find prior run with performance baseline artifact
      id: find-baseline
      if: ${{ steps.resolve-mode.outputs.perf_mode == '--check' }}
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
        TARGET_REPO: ${{ env.TARGET_REPO }}
        WORKFLOW_NAME: ${{ env.WF_NAME }}
        BRANCH: ${{ env.BRANCH }}
        ARTIFACT_NAME: ${{ inputs.artifact_name }}
      run: |
        set -euo pipefail
        echo "Searching $TARGET_REPO (workflow: $WORKFLOW_NAME, branch: $BRANCH) for artifact $ARTIFACT_NAME..."
        RUN_IDS=$(gh run list \
          --repo "$TARGET_REPO" \
          --workflow "$WORKFLOW_NAME" \
          --json databaseId,headBranch,status,conclusion \
          --limit 50 \
          --jq "[.[] | select(.status==\"completed\" and .headBranch==\"$BRANCH\") | .databaseId] | .[]" \
          || true)

        if [[ -z "${RUN_IDS:-}" ]]; then
          echo "No completed runs found on branch $BRANCH."
          exit 1
        fi

        FOUND=""
        for RID in $RUN_IDS; do
          HAS=$(gh api "repos/$TARGET_REPO/actions/runs/$RID/artifacts" \
            --jq ".artifacts | map(select(.name==\"$ARTIFACT_NAME\" and .expired==false)) | length")
          echo "Run $RID â†’ $HAS artifact(s)"
          if [[ "$HAS" -gt 0 ]]; then FOUND="$RID"; break; fi
        done

        if [[ -z "${FOUND:-}" ]]; then
          echo "No suitable run with artifact $ARTIFACT_NAME found."
          exit 1
        fi

        echo "run_id=$FOUND" >> "$GITHUB_OUTPUT"
        echo "Found performance baseline in run: $FOUND"

    - name: Download performance baseline artifact
      if: ${{ steps.resolve-mode.outputs.perf_mode == '--check' }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact_name }}
        run-id: ${{ steps.find-baseline.outputs.run_id }}
        path: tests/perf-regression
        github-token: ${{ github.token }}

    - name: Normalize performance baseline path
      if: ${{ steps.resolve-mode.outputs.perf_mode == '--check' }}
      shell: bash
      env:
        DEST: ${{ inputs.baseline_path }}
      run: |
        set -euo pipefail
        FILE="$(find tests/perf-regression -name 'perf-regression.json' -print -quit || true)"
        if [[ -z "${FILE:-}" ]]; then
          echo "ERROR: perf-regression.json not found."
          ls -R tests/perf-regression || true
          exit 1
        fi
        mkdir -p "$(dirname "$DEST")"
        [[ "$FILE" != "$DEST" ]] && mv -f "$FILE" "$DEST"
        echo "Performance Baseline ready at: $DEST"

    - name: Run performance regression tests
      shell: bash
      env:
        PERF_MODE: ${{ env.PERF_MODE }}
      run: ${{ inputs.run_command }}

    - name: Upload new performance baseline (dump mode)
      if: ${{ steps.resolve-mode.outputs.perf_mode == '--dump' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ inputs.baseline_path }}
        if-no-files-found: error
        retention-days: 30
