name: Build o1js
description: 'All of the building steps for o1js'

permissions:
  contents: write

inputs:
  proof_systems_commit:
    description: 'proof_systems commit to use'
    required: false
    default: ''
  cache_id:
    description: 'AWS access key ID for nix cache'
    required: false
    default: ''
  nar_secret:
    description: 'NAR signing secret key'
    required: false
    default: ''
  gcp_secret:
    description: 'GCP secret access key'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Create post-build hook for continuous cache upload
      shell: bash
      run: |
        # Create script with embedded credentials (no echoing)
        cat > /tmp/upload-to-cache.sh << EOF
        #!/bin/bash
        set -eu
        echo "=== Post-build hook triggered ==="
        if [ -n "\${OUT_PATHS:-}" ] && [ -n "${{ inputs.cache_id }}" ] && [ -n "${{ inputs.nar_secret }}" ]; then
          echo "Signing and uploading \$(echo \$OUT_PATHS | wc -w) derivations"
          export AWS_ACCESS_KEY_ID="${{ inputs.cache_id }}"
          export AWS_SECRET_ACCESS_KEY="${{ inputs.gcp_secret }}"
          # Create temporary key file
          temp_key=\$(mktemp)
          echo "${{ inputs.nar_secret }}" > "\$temp_key"
          # Sign the outputs
          nix store sign --key-file "\$temp_key" --recursive \$OUT_PATHS 2>/dev/null || true
          # Upload to cache
          nix copy --to "s3://mina-nix-cache?endpoint=https://storage.googleapis.com" \$OUT_PATHS 2>/dev/null || true
          # Clean up
          rm "\$temp_key"
          echo "Upload completed"
        else
          echo "Skipping upload - missing credentials or no outputs"
        fi
        EOF
        chmod +x /tmp/upload-to-cache.sh
    - uses: nixbuild/nix-quick-install-action@v32
      continue-on-error: true
      with:
        nix_conf: |
          keep-env-derivations = true
          keep-outputs = true
          require-sigs = false
          post-build-hook = /tmp/upload-to-cache.sh
    - name: Disable smudging
      shell: bash
      run: echo "GIT_LFS_SKIP_SMUDGE=1" >> $GITHUB_ENV
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: use proof_systems_commit if provided
      if: ${{ inputs.proof_systems_commit != '' }}
      shell: bash
      run: |
        git -C src/mina/src/lib/crypto/proof-systems fetch origin ${{ inputs.proof_systems_commit }}
        git -C src/mina/src/lib/crypto/proof-systems clean -fdx
        git -C src/mina/src/lib/crypto/proof-systems checkout ${{ inputs.proof_systems_commit }}
        git -C src/mina/src/lib/crypto/proof-systems clean -fdx
        git -C src/mina add src/lib/crypto/proof-systems

    - name: cache bindings
      uses: actions/cache@v4
      id: bindings-cache
      with:
        path: |
          src/bindings/compiled
          src/bindings/mina-transaction/gen
        key: bindings-${{ github.event.pull_request.head.sha || github.sha }}-${{ inputs.proof_systems_commit }}
    - name: Build the o1js bindings
      if: ${{ steps.bindings-cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        set -Eeu
        nix run .#generate-bindings --max-jobs auto
    - name: Cache dependencies and build
      uses: actions/cache@v4
      id: cache
      with:
        path: |
          ~/.npm
          node_modules
          dist
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.js') }}
    - name: Build examples
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        npm ci
        npm run build:examples
    - name: Build o1js clean
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        rm -fr dist
        npm ci
        npm run build

    - name: Cache repository
      uses: actions/cache@v4
      with:
        path: .
        key: repo-${{ github.sha }}
