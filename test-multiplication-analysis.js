#!/usr/bin/env node

/**
 * Multiplication Constraint Analysis
 * Analyzes the exact constraints generated by Snarky vs Sparky for multiplication
 */

import { Field, Provable } from './dist/node/index.js';
import { switchBackend, getCurrentBackend } from './dist/node/index.js';

// Hook into constraint generation to capture raw constraints
let capturedConstraints = [];

// Monkey patch to capture constraints
const originalAssertEqual = Field.prototype.assertEquals;
Field.prototype.assertEquals = function(other) {
    console.log(`assertEquals called: ${this} = ${other}`);
    return originalAssertEqual.call(this, other);
};

async function analyzeMultiplication() {
    console.log('ðŸ”¬ Analyzing Multiplication Constraint Generation');
    console.log('='.repeat(60));
    
    // Test 1: Simple multiplication a * b = c
    console.log('\nðŸ“Š Test 1: Simple multiplication (a * b = c)');
    
    await switchBackend('snarky');
    console.log('\nSnarky backend:');
    Provable.runAndCheck(() => {
        const a = Provable.witness(Field, () => Field(3));
        const b = Provable.witness(Field, () => Field(4));
        const c = a.mul(b);
        console.log(`a=${a}, b=${b}, c=${c}`);
    });
    
    await switchBackend('sparky');
    console.log('\nSparky backend:');
    Provable.runAndCheck(() => {
        const a = Provable.witness(Field, () => Field(3));
        const b = Provable.witness(Field, () => Field(4));
        const c = a.mul(b);
        console.log(`a=${a}, b=${b}, c=${c}`);
    });
    
    // Test 2: Square operation a * a = b
    console.log('\nðŸ“Š Test 2: Square operation (a * a = b)');
    
    await switchBackend('snarky');
    console.log('\nSnarky backend:');
    Provable.runAndCheck(() => {
        const a = Provable.witness(Field, () => Field(5));
        const b = a.mul(a);
        console.log(`a=${a}, b=${b} (aÂ²)`);
    });
    
    await switchBackend('sparky');
    console.log('\nSparky backend:');
    Provable.runAndCheck(() => {
        const a = Provable.witness(Field, () => Field(5));
        const b = a.mul(a);
        console.log(`a=${a}, b=${b} (aÂ²)`);
    });
    
    // Test 3: Multiplication with constant
    console.log('\nðŸ“Š Test 3: Multiplication with constant (a * 2 = b)');
    
    await switchBackend('snarky');
    console.log('\nSnarky backend:');
    Provable.runAndCheck(() => {
        const a = Provable.witness(Field, () => Field(7));
        const b = a.mul(Field(2));
        console.log(`a=${a}, b=${b} (a*2)`);
    });
    
    await switchBackend('sparky');
    console.log('\nSparky backend:');
    Provable.runAndCheck(() => {
        const a = Provable.witness(Field, () => Field(7));
        const b = a.mul(Field(2));
        console.log(`a=${a}, b=${b} (a*2)`);
    });
    
    // Test 4: Chain multiplication
    console.log('\nðŸ“Š Test 4: Chain multiplication (a * b * c)');
    
    await switchBackend('snarky');
    console.log('\nSnarky backend:');
    Provable.runAndCheck(() => {
        const a = Provable.witness(Field, () => Field(2));
        const b = Provable.witness(Field, () => Field(3));
        const c = Provable.witness(Field, () => Field(4));
        const result = a.mul(b).mul(c);
        console.log(`a=${a}, b=${b}, c=${c}, result=${result}`);
    });
    
    await switchBackend('sparky');
    console.log('\nSparky backend:');
    Provable.runAndCheck(() => {
        const a = Provable.witness(Field, () => Field(2));
        const b = Provable.witness(Field, () => Field(3));
        const c = Provable.witness(Field, () => Field(4));
        const result = a.mul(b).mul(c);
        console.log(`a=${a}, b=${b}, c=${c}, result=${result}`);
    });
}

// Run the analysis
analyzeMultiplication().then(() => {
    console.log('\nâœ… Multiplication analysis completed');
}).catch(error => {
    console.error('ðŸ’¥ Analysis failed:', error);
    process.exit(1);
});