# Docker Compose configuration for CI/CD Backend Compatibility Testing
# Provides orchestrated testing environment with result persistence

version: '3.8'

services:
  # Main test runner
  compatibility-tests:
    build:
      context: ../..
      dockerfile: scripts/ci/Dockerfile.ci
    environment:
      - TEST_LEVEL=${TEST_LEVEL:-quick}
      - VERBOSE=${VERBOSE:-false}
      - OUTPUT_DIR=/workspace/test-results
      - PERFORMANCE_DIR=/workspace/performance-reports
      - HISTORICAL_DIR=/workspace/historical-data
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - TEAMS_WEBHOOK_URL=${TEAMS_WEBHOOK_URL}
    volumes:
      - test-results:/workspace/test-results
      - performance-reports:/workspace/performance-reports
      - historical-data:/workspace/historical-data
      - compatibility-dashboard:/workspace/compatibility-dashboard
      - ./../../:/workspace/source:ro
    working_dir: /workspace
    command: node /usr/local/bin/run-compatibility-tests
    depends_on:
      - result-archiver

  # Quick test runner for fast feedback
  quick-tests:
    build:
      context: ../..
      dockerfile: scripts/ci/Dockerfile.ci
    environment:
      - TEST_LEVEL=quick
      - VERBOSE=${VERBOSE:-false}
    volumes:
      - test-results:/workspace/test-results
      - performance-reports:/workspace/performance-reports
    working_dir: /workspace
    command: node /usr/local/bin/run-compatibility-tests
    profiles:
      - quick

  # Comprehensive test runner for detailed analysis
  comprehensive-tests:
    build:
      context: ../..
      dockerfile: scripts/ci/Dockerfile.ci
    environment:
      - TEST_LEVEL=comprehensive
      - VERBOSE=${VERBOSE:-true}
    volumes:
      - test-results:/workspace/test-results
      - performance-reports:/workspace/performance-reports
      - historical-data:/workspace/historical-data
      - compatibility-dashboard:/workspace/compatibility-dashboard
    working_dir: /workspace
    command: node /usr/local/bin/run-compatibility-tests
    profiles:
      - comprehensive

  # Full analysis runner for deep investigation
  full-analysis:
    build:
      context: ../..
      dockerfile: scripts/ci/Dockerfile.ci
    environment:
      - TEST_LEVEL=full
      - VERBOSE=${VERBOSE:-true}
    volumes:
      - test-results:/workspace/test-results
      - performance-reports:/workspace/performance-reports
      - historical-data:/workspace/historical-data
      - compatibility-dashboard:/workspace/compatibility-dashboard
      - vk-analysis:/workspace/vk-analysis
      - constraint-analysis:/workspace/constraint-analysis
    working_dir: /workspace
    command: node /usr/local/bin/run-compatibility-tests
    profiles:
      - full

  # Result archival service
  result-archiver:
    image: alpine:latest
    volumes:
      - test-results:/data/test-results
      - performance-reports:/data/performance-reports
      - historical-data:/data/historical-data
      - compatibility-dashboard:/data/compatibility-dashboard
    command: |
      sh -c "
        echo 'Result archiver started'
        while true; do
          echo 'Archiving results at $(date)'
          # Compress old results to save space
          find /data -name '*.json' -mtime +7 -exec gzip {} \;
          # Clean up very old compressed files
          find /data -name '*.gz' -mtime +30 -delete
          sleep 3600
        done
      "
    restart: unless-stopped

  # Dashboard server for viewing results
  dashboard:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - compatibility-dashboard:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - compatibility-tests
    profiles:
      - dashboard

  # Performance monitoring service
  performance-monitor:
    build:
      context: ../..
      dockerfile: scripts/ci/Dockerfile.ci
    environment:
      - MONITOR_INTERVAL=${MONITOR_INTERVAL:-300}
    volumes:
      - performance-reports:/workspace/performance-reports
      - historical-data:/workspace/historical-data
    working_dir: /workspace
    command: |
      sh -c "
        while true; do
          echo 'Running performance monitoring at $(date)'
          npx ts-node src/test/pbt/ci/PerformanceMonitoring.ts || echo 'Performance monitoring failed'
          sleep ${MONITOR_INTERVAL:-300}
        done
      "
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  test-results:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./test-results
  
  performance-reports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./performance-reports
  
  historical-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./historical-data
  
  compatibility-dashboard:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./compatibility-dashboard
  
  vk-analysis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./vk-analysis
  
  constraint-analysis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./constraint-analysis

networks:
  default:
    name: o1js-compatibility-testing