import { Edwards25519, Eddsa, eddsa, Bytes32 } from './eddsa.js';
import assert from 'assert';

// create an example eddsa signature

let privateKey = Edwards25519.Scalar.random();
let publicKey = Edwards25519.generator.scale(privateKey);

let message = Bytes32.fromString("what's up");
let msg = message
  .toBytes()
  .reduce((acc, byte) => (acc << 8n) | BigInt(byte), 0n);
let signature = Eddsa.sign(msg, privateKey.toBigInt());

// investigate the constraint system generated by EdDSA verify

console.time('eddsa verify only (build constraint system)');
let csEddsa = await eddsa.analyzeMethods();
console.timeEnd('eddsa verify only (build constraint system)');
console.log(csEddsa.verifyEddsa.summary());

console.time('eddsa verify (prove)');
let { proof } = await eddsa.verifyEddsa(message, signature, publicKey);
console.timeEnd('eddsa verify (prove)');

proof.publicOutput.assertTrue('signature verifies');
assert(await eddsa.verify(proof), 'proof verifies');
