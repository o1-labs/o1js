/* tslint:disable */
/* eslint-disable */
export function __wasm_init_memory(): void;
export function __wbg_wasmpastafpplonkoracles_free(a: number): void;
export function __wbg_get_wasmpastafpplonkoracles_o(a: number, b: number): void;
export function __wbg_set_wasmpastafpplonkoracles_o(a: number, b: number, c: number): void;
export function __wbg_get_wasmpastafpplonkoracles_p_eval0(a: number, b: number): void;
export function __wbg_set_wasmpastafpplonkoracles_p_eval0(a: number, b: number, c: number): void;
export function __wbg_get_wasmpastafpplonkoracles_p_eval1(a: number, b: number): void;
export function __wbg_set_wasmpastafpplonkoracles_p_eval1(a: number, b: number, c: number): void;
export function __wbg_get_wasmpastafpplonkoracles_digest_before_evaluations(a: number, b: number): void;
export function __wbg_set_wasmpastafpplonkoracles_digest_before_evaluations(a: number, b: number, c: number): void;
export function wasmpastafpplonkoracles_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function wasmpastafpplonkoracles_opening_prechallenges(a: number, b: number): void;
export function wasmpastafpplonkoracles_set_opening_prechallenges(a: number, b: number, c: number): void;
export function caml_pasta_fp_plonk_oracles_create(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fp_plonk_oracles_dummy(): number;
export function caml_pasta_fp_plonk_oracles_deep_copy(a: number): number;
export function __wbg_wasmpastafpproofevaluations_free(a: number): void;
export function wasmpastafpproofevaluations_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number): number;
export function wasmpastafpproofevaluations_l(a: number, b: number): void;
export function wasmpastafpproofevaluations_r(a: number, b: number): void;
export function wasmpastafpproofevaluations_o(a: number, b: number): void;
export function wasmpastafpproofevaluations_z(a: number, b: number): void;
export function wasmpastafpproofevaluations_t(a: number, b: number): void;
export function wasmpastafpproofevaluations_f(a: number, b: number): void;
export function wasmpastafpproofevaluations_sigma1(a: number, b: number): void;
export function wasmpastafpproofevaluations_sigma2(a: number, b: number): void;
export function wasmpastafpproofevaluations_set_l(a: number, b: number, c: number): void;
export function wasmpastafpproofevaluations_set_r(a: number, b: number, c: number): void;
export function wasmpastafpproofevaluations_set_o(a: number, b: number, c: number): void;
export function wasmpastafpproofevaluations_set_z(a: number, b: number, c: number): void;
export function wasmpastafpproofevaluations_set_t(a: number, b: number, c: number): void;
export function wasmpastafpproofevaluations_set_f(a: number, b: number, c: number): void;
export function wasmpastafpproofevaluations_set_sigma1(a: number, b: number, c: number): void;
export function wasmpastafpproofevaluations_set_sigma2(a: number, b: number, c: number): void;
export function __wbg_wasmpastafpopeningproof_free(a: number): void;
export function __wbg_get_wasmpastafpopeningproof_z1(a: number, b: number): void;
export function __wbg_set_wasmpastafpopeningproof_z1(a: number, b: number, c: number): void;
export function __wbg_get_wasmpastafpopeningproof_z2(a: number, b: number): void;
export function __wbg_set_wasmpastafpopeningproof_z2(a: number, b: number, c: number): void;
export function wasmpastafpopeningproof_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function wasmpastafpopeningproof_lr_0(a: number, b: number): void;
export function wasmpastafpopeningproof_lr_1(a: number, b: number): void;
export function wasmpastafpopeningproof_delta(a: number): number;
export function wasmpastafpopeningproof_sg(a: number): number;
export function wasmpastafpopeningproof_set_lr_0(a: number, b: number, c: number): void;
export function wasmpastafpopeningproof_set_lr_1(a: number, b: number, c: number): void;
export function wasmpastafpopeningproof_set_delta(a: number, b: number): void;
export function wasmpastafpopeningproof_set_sg(a: number, b: number): void;
export function __wbg_wasmpastafpprovercommitments_free(a: number): void;
export function wasmpastafpprovercommitments_new(a: number, b: number, c: number, d: number, e: number): number;
export function wasmpastafpprovercommitments_l_comm(a: number): number;
export function wasmpastafpprovercommitments_r_comm(a: number): number;
export function wasmpastafpprovercommitments_o_comm(a: number): number;
export function wasmpastafpprovercommitments_z_comm(a: number): number;
export function wasmpastafpprovercommitments_t_comm(a: number): number;
export function wasmpastafpprovercommitments_set_l_comm(a: number, b: number): void;
export function wasmpastafpprovercommitments_set_r_comm(a: number, b: number): void;
export function wasmpastafpprovercommitments_set_o_comm(a: number, b: number): void;
export function wasmpastafpprovercommitments_set_z_comm(a: number, b: number): void;
export function wasmpastafpprovercommitments_set_t_comm(a: number, b: number): void;
export function __wbg_wasmvecvecpastafp_free(a: number): void;
export function wasmvecvecpastafp_create(a: number): number;
export function wasmvecvecpastafp_push(a: number, b: number, c: number): void;
export function wasmvecvecpastafp_get(a: number, b: number, c: number): void;
export function wasmvecvecpastafp_set(a: number, b: number, c: number, d: number): void;
export function __wbg_wasmpastafpproverproof_free(a: number): void;
export function wasmpastafpproverproof_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function wasmpastafpproverproof_commitments(a: number): number;
export function wasmpastafpproverproof_proof(a: number): number;
export function wasmpastafpproverproof_evals0(a: number): number;
export function wasmpastafpproverproof_evals1(a: number): number;
export function wasmpastafpproverproof_public_(a: number, b: number): void;
export function wasmpastafpproverproof_prev_challenges_scalars(a: number): number;
export function wasmpastafpproverproof_prev_challenges_comms(a: number, b: number): void;
export function wasmpastafpproverproof_set_commitments(a: number, b: number): void;
export function wasmpastafpproverproof_set_proof(a: number, b: number): void;
export function wasmpastafpproverproof_set_evals0(a: number, b: number): void;
export function wasmpastafpproverproof_set_evals1(a: number, b: number): void;
export function wasmpastafpproverproof_set_public_(a: number, b: number, c: number): void;
export function wasmpastafpproverproof_set_prev_challenges_scalars(a: number, b: number): void;
export function wasmpastafpproverproof_set_prev_challenges_comms(a: number, b: number, c: number): void;
export function caml_pasta_fp_plonk_proof_create(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function caml_pasta_fp_plonk_proof_verify(a: number, b: number, c: number, d: number): number;
export function __wbg_wasmvecvecvestapolycomm_free(a: number): void;
export function wasmvecvecvestapolycomm_push(a: number, b: number, c: number): void;
export function caml_pasta_fp_plonk_proof_batch_verify(a: number, b: number, c: number, d: number, e: number): number;
export function caml_pasta_fp_plonk_proof_dummy(): number;
export function caml_pasta_fp_plonk_proof_deep_copy(a: number): number;
export function wasmvecvecvestapolycomm_create(a: number): number;
export function caml_pasta_fp_size_in_bits(): number;
export function caml_pasta_fp_size(a: number): void;
export function caml_pasta_fp_add(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fp_sub(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fp_negate(a: number, b: number, c: number): void;
export function caml_pasta_fp_mul(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fp_div(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fp_inv(a: number, b: number, c: number): void;
export function caml_pasta_fp_square(a: number, b: number, c: number): void;
export function caml_pasta_fp_is_square(a: number, b: number): number;
export function caml_pasta_fp_sqrt(a: number, b: number, c: number): void;
export function caml_pasta_fp_of_int(a: number, b: number): void;
export function caml_pasta_fp_to_string(a: number, b: number, c: number): void;
export function caml_pasta_fp_of_string(a: number, b: number, c: number): void;
export function caml_pasta_fp_print(a: number, b: number): void;
export function caml_pasta_fp_compare(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fp_equal(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fp_random(a: number): void;
export function caml_pasta_fp_rng(a: number, b: number): void;
export function caml_pasta_fp_to_bigint(a: number, b: number, c: number): void;
export function caml_pasta_fp_of_bigint(a: number, b: number, c: number): void;
export function caml_pasta_fp_two_adic_root_of_unity(a: number): void;
export function caml_pasta_fp_domain_generator(a: number, b: number): void;
export function caml_pasta_fp_to_bytes(a: number, b: number, c: number): void;
export function caml_pasta_fp_of_bytes(a: number, b: number, c: number): void;
export function caml_pasta_fp_deep_copy(a: number, b: number, c: number): void;
export function caml_pasta_fq_size(a: number): void;
export function caml_pasta_fq_add(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fq_sub(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fq_negate(a: number, b: number, c: number): void;
export function caml_pasta_fq_mul(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fq_div(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fq_inv(a: number, b: number, c: number): void;
export function caml_pasta_fq_square(a: number, b: number, c: number): void;
export function caml_pasta_fq_is_square(a: number, b: number): number;
export function caml_pasta_fq_sqrt(a: number, b: number, c: number): void;
export function caml_pasta_fq_of_int(a: number, b: number): void;
export function caml_pasta_fq_to_string(a: number, b: number, c: number): void;
export function caml_pasta_fq_of_string(a: number, b: number, c: number): void;
export function caml_pasta_fq_print(a: number, b: number): void;
export function caml_pasta_fq_compare(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fq_equal(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fq_random(a: number): void;
export function caml_pasta_fq_rng(a: number, b: number): void;
export function caml_pasta_fq_to_bigint(a: number, b: number, c: number): void;
export function caml_pasta_fq_of_bigint(a: number, b: number, c: number): void;
export function caml_pasta_fq_two_adic_root_of_unity(a: number): void;
export function caml_pasta_fq_domain_generator(a: number, b: number): void;
export function caml_pasta_fq_to_bytes(a: number, b: number, c: number): void;
export function caml_pasta_fq_of_bytes(a: number, b: number, c: number): void;
export function caml_pasta_fq_deep_copy(a: number, b: number, c: number): void;
export function __wbg_wasmpastafqplonkoracles_free(a: number): void;
export function __wbg_get_wasmpastafqplonkoracles_o(a: number, b: number): void;
export function __wbg_set_wasmpastafqplonkoracles_o(a: number, b: number, c: number): void;
export function __wbg_get_wasmpastafqplonkoracles_p_eval0(a: number, b: number): void;
export function __wbg_set_wasmpastafqplonkoracles_p_eval0(a: number, b: number, c: number): void;
export function __wbg_get_wasmpastafqplonkoracles_p_eval1(a: number, b: number): void;
export function __wbg_set_wasmpastafqplonkoracles_p_eval1(a: number, b: number, c: number): void;
export function __wbg_get_wasmpastafqplonkoracles_digest_before_evaluations(a: number, b: number): void;
export function __wbg_set_wasmpastafqplonkoracles_digest_before_evaluations(a: number, b: number, c: number): void;
export function wasmpastafqplonkoracles_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function wasmpastafqplonkoracles_opening_prechallenges(a: number, b: number): void;
export function wasmpastafqplonkoracles_set_opening_prechallenges(a: number, b: number, c: number): void;
export function caml_pasta_fq_plonk_oracles_create(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fq_plonk_oracles_dummy(): number;
export function caml_pasta_fq_plonk_oracles_deep_copy(a: number): number;
export function caml_pasta_fq_size_in_bits(): number;
export function __wbg_wasmpastafpplonkdomain_free(a: number): void;
export function __wbg_get_wasmpastafpplonkdomain_log_size_of_group(a: number): number;
export function __wbg_set_wasmpastafpplonkdomain_log_size_of_group(a: number, b: number): void;
export function __wbg_get_wasmpastafpplonkdomain_group_gen(a: number, b: number): void;
export function __wbg_set_wasmpastafpplonkdomain_group_gen(a: number, b: number, c: number): void;
export function wasmpastafpplonkdomain_new(a: number, b: number, c: number): number;
export function __wbg_wasmpastafpplonkverificationevals_free(a: number): void;
export function wasmpastafpplonkverificationevals_sigma_comm0(a: number): number;
export function wasmpastafpplonkverificationevals_sigma_comm1(a: number): number;
export function wasmpastafpplonkverificationevals_sigma_comm2(a: number): number;
export function wasmpastafpplonkverificationevals_ql_comm(a: number): number;
export function wasmpastafpplonkverificationevals_qr_comm(a: number): number;
export function wasmpastafpplonkverificationevals_qo_comm(a: number): number;
export function wasmpastafpplonkverificationevals_qm_comm(a: number): number;
export function wasmpastafpplonkverificationevals_qc_comm(a: number): number;
export function wasmpastafpplonkverificationevals_rcm_comm0(a: number): number;
export function wasmpastafpplonkverificationevals_rcm_comm1(a: number): number;
export function wasmpastafpplonkverificationevals_rcm_comm2(a: number): number;
export function wasmpastafpplonkverificationevals_psm_comm(a: number): number;
export function wasmpastafpplonkverificationevals_add_comm(a: number): number;
export function wasmpastafpplonkverificationevals_mul1_comm(a: number): number;
export function wasmpastafpplonkverificationevals_mul2_comm(a: number): number;
export function wasmpastafpplonkverificationevals_emul1_comm(a: number): number;
export function wasmpastafpplonkverificationevals_emul2_comm(a: number): number;
export function wasmpastafpplonkverificationevals_emul3_comm(a: number): number;
export function wasmpastafpplonkverificationevals_set_sigma_comm0(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_sigma_comm1(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_sigma_comm2(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_ql_comm(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_qr_comm(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_qo_comm(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_qm_comm(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_qc_comm(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_rcm_comm0(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_rcm_comm1(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_rcm_comm2(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_psm_comm(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_add_comm(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_mul1_comm(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_mul2_comm(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_emul1_comm(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_emul2_comm(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_set_emul3_comm(a: number, b: number): void;
export function wasmpastafpplonkverificationevals_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number): number;
export function __wbg_wasmpastafpplonkverificationshifts_free(a: number): void;
export function __wbg_get_wasmpastafpplonkverificationshifts_o(a: number, b: number): void;
export function __wbg_set_wasmpastafpplonkverificationshifts_o(a: number, b: number, c: number): void;
export function wasmpastafpplonkverificationshifts_new(a: number, b: number, c: number, d: number): number;
export function __wbg_wasmpastafpplonkverifierindex_free(a: number): void;
export function __wbg_get_wasmpastafpplonkverifierindex_domain(a: number): number;
export function __wbg_set_wasmpastafpplonkverifierindex_domain(a: number, b: number): void;
export function __wbg_get_wasmpastafpplonkverifierindex_max_poly_size(a: number): number;
export function __wbg_set_wasmpastafpplonkverifierindex_max_poly_size(a: number, b: number): void;
export function __wbg_get_wasmpastafpplonkverifierindex_max_quot_size(a: number): number;
export function __wbg_set_wasmpastafpplonkverifierindex_max_quot_size(a: number, b: number): void;
export function __wbg_get_wasmpastafpplonkverifierindex_shifts(a: number): number;
export function __wbg_set_wasmpastafpplonkverifierindex_shifts(a: number, b: number): void;
export function wasmpastafpplonkverifierindex_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function wasmpastafpplonkverifierindex_urs(a: number): number;
export function wasmpastafpplonkverifierindex_set_urs(a: number, b: number): void;
export function wasmpastafpplonkverifierindex_evals(a: number): number;
export function wasmpastafpplonkverifierindex_set_evals(a: number, b: number): void;
export function caml_pasta_fp_plonk_verifier_index_read(a: number, b: number, c: number, d: number, e: number): number;
export function caml_pasta_fp_plonk_verifier_index_write(a: number, b: number, c: number, d: number): void;
export function caml_pasta_fp_plonk_verifier_index_create(a: number): number;
export function caml_pasta_fp_plonk_verifier_index_shifts(a: number): number;
export function caml_pasta_fp_plonk_verifier_index_dummy(): number;
export function caml_pasta_fp_plonk_verifier_index_deep_copy(a: number): number;
export function __wbg_get_wasmpastafqplonkdomain_group_gen(a: number, b: number): void;
export function __wbg_set_wasmpastafqplonkdomain_group_gen(a: number, b: number, c: number): void;
export function wasmpastafqplonkdomain_new(a: number, b: number, c: number): number;
export function __wbg_wasmpastafqplonkverificationevals_free(a: number): void;
export function __wbg_get_wasmpastafqplonkverificationshifts_o(a: number, b: number): void;
export function __wbg_set_wasmpastafqplonkverificationshifts_o(a: number, b: number, c: number): void;
export function wasmpastafqplonkverificationshifts_new(a: number, b: number, c: number, d: number): number;
export function __wbg_wasmpastafqplonkverifierindex_free(a: number): void;
export function wasmpastafqplonkverifierindex_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function wasmpastafqplonkverifierindex_evals(a: number): number;
export function wasmpastafqplonkverifierindex_set_evals(a: number, b: number): void;
export function caml_pasta_fq_plonk_verifier_index_read(a: number, b: number, c: number, d: number, e: number): number;
export function caml_pasta_fq_plonk_verifier_index_write(a: number, b: number, c: number, d: number): void;
export function caml_pasta_fq_plonk_verifier_index_create(a: number): number;
export function caml_pasta_fq_plonk_verifier_index_shifts(a: number): number;
export function caml_pasta_fq_plonk_verifier_index_dummy(): number;
export function caml_pasta_fq_plonk_verifier_index_deep_copy(a: number): number;
export function wasmpastafqplonkverificationevals_sigma_comm1(a: number): number;
export function wasmpastafqplonkverificationevals_sigma_comm2(a: number): number;
export function wasmpastafqplonkverificationevals_ql_comm(a: number): number;
export function wasmpastafqplonkverificationevals_qr_comm(a: number): number;
export function wasmpastafqplonkverificationevals_qo_comm(a: number): number;
export function wasmpastafqplonkverificationevals_qm_comm(a: number): number;
export function wasmpastafqplonkverificationevals_qc_comm(a: number): number;
export function wasmpastafqplonkverificationevals_rcm_comm0(a: number): number;
export function wasmpastafqplonkverificationevals_rcm_comm1(a: number): number;
export function wasmpastafqplonkverificationevals_rcm_comm2(a: number): number;
export function wasmpastafqplonkverificationevals_psm_comm(a: number): number;
export function wasmpastafqplonkverificationevals_add_comm(a: number): number;
export function wasmpastafqplonkverificationevals_mul1_comm(a: number): number;
export function wasmpastafqplonkverificationevals_mul2_comm(a: number): number;
export function wasmpastafqplonkverificationevals_emul1_comm(a: number): number;
export function wasmpastafqplonkverificationevals_emul2_comm(a: number): number;
export function wasmpastafqplonkverificationevals_emul3_comm(a: number): number;
export function __wbg_set_wasmpastafqplonkdomain_log_size_of_group(a: number, b: number): void;
export function __wbg_set_wasmpastafqplonkverifierindex_max_poly_size(a: number, b: number): void;
export function __wbg_get_wasmpastafqplonkverifierindex_shifts(a: number): number;
export function __wbg_get_wasmpastafqplonkverifierindex_max_quot_size(a: number): number;
export function wasmpastafqplonkverifierindex_urs(a: number): number;
export function wasmpastafqplonkverificationevals_set_sigma_comm1(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_sigma_comm2(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_ql_comm(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_qr_comm(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_qo_comm(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_qm_comm(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_qc_comm(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_rcm_comm0(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_rcm_comm1(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_rcm_comm2(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_psm_comm(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_add_comm(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_mul1_comm(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_mul2_comm(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_emul1_comm(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_emul2_comm(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_set_emul3_comm(a: number, b: number): void;
export function __wbg_set_wasmpastafqplonkverifierindex_domain(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_sigma_comm0(a: number): number;
export function __wbg_get_wasmpastafqplonkdomain_log_size_of_group(a: number): number;
export function __wbg_get_wasmpastafqplonkverifierindex_max_poly_size(a: number): number;
export function __wbg_set_wasmpastafpplonkverificationshifts_r(a: number, b: number, c: number): void;
export function __wbg_set_wasmpastafqplonkverificationshifts_r(a: number, b: number, c: number): void;
export function wasmpastafqplonkverificationevals_set_sigma_comm0(a: number, b: number): void;
export function __wbg_set_wasmpastafqplonkverifierindex_shifts(a: number, b: number): void;
export function __wbg_wasmpastafqplonkdomain_free(a: number): void;
export function __wbg_wasmpastafqplonkverificationshifts_free(a: number): void;
export function __wbg_set_wasmpastafqplonkverifierindex_max_quot_size(a: number, b: number): void;
export function wasmpastafqplonkverifierindex_set_urs(a: number, b: number): void;
export function wasmpastafqplonkverificationevals_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number): number;
export function __wbg_get_wasmpastafpplonkverificationshifts_r(a: number, b: number): void;
export function __wbg_get_wasmpastafqplonkverificationshifts_r(a: number, b: number): void;
export function __wbg_get_wasmpastafqplonkverifierindex_domain(a: number): number;
export function __wbg_wasmpallasgprojective_free(a: number): void;
export function __wbg_wasmpallasgaffine_free(a: number): void;
export function __wbg_get_wasmpallasgaffine_x(a: number, b: number): void;
export function __wbg_set_wasmpallasgaffine_x(a: number, b: number, c: number): void;
export function __wbg_get_wasmpallasgaffine_y(a: number, b: number): void;
export function __wbg_set_wasmpallasgaffine_y(a: number, b: number, c: number): void;
export function __wbg_get_wasmpallasgaffine_infinity(a: number): number;
export function __wbg_set_wasmpallasgaffine_infinity(a: number, b: number): void;
export function caml_pasta_pallas_one(): number;
export function caml_pasta_pallas_add(a: number, b: number): number;
export function caml_pasta_pallas_sub(a: number, b: number): number;
export function caml_pasta_pallas_negate(a: number): number;
export function caml_pasta_pallas_double(a: number): number;
export function caml_pasta_pallas_scale(a: number, b: number, c: number): number;
export function caml_pasta_pallas_random(): number;
export function caml_pasta_pallas_rng(a: number): number;
export function caml_pasta_pallas_endo_base(a: number): void;
export function caml_pasta_pallas_endo_scalar(a: number): void;
export function caml_pasta_pallas_to_affine(a: number): number;
export function caml_pasta_pallas_of_affine(a: number): number;
export function caml_pasta_pallas_of_affine_coordinates(a: number, b: number, c: number, d: number): number;
export function caml_pasta_pallas_affine_deep_copy(a: number): number;
export function caml_pasta_pallas_affine_one(): number;
export function __wbg_get_wasmvestagaffine_x(a: number, b: number): void;
export function __wbg_set_wasmvestagaffine_x(a: number, b: number, c: number): void;
export function __wbg_get_wasmvestagaffine_y(a: number, b: number): void;
export function __wbg_set_wasmvestagaffine_y(a: number, b: number, c: number): void;
export function caml_pasta_vesta_one(): number;
export function caml_pasta_vesta_add(a: number, b: number): number;
export function caml_pasta_vesta_sub(a: number, b: number): number;
export function caml_pasta_vesta_negate(a: number): number;
export function caml_pasta_vesta_double(a: number): number;
export function caml_pasta_vesta_scale(a: number, b: number, c: number): number;
export function caml_pasta_vesta_random(): number;
export function caml_pasta_vesta_rng(a: number): number;
export function caml_pasta_vesta_endo_base(a: number): void;
export function caml_pasta_vesta_endo_scalar(a: number): void;
export function caml_pasta_vesta_to_affine(a: number): number;
export function caml_pasta_vesta_of_affine(a: number): number;
export function caml_pasta_vesta_of_affine_coordinates(a: number, b: number, c: number, d: number): number;
export function caml_pasta_vesta_affine_one(): number;
export function __wbg_set_wasmvestagaffine_infinity(a: number, b: number): void;
export function __wbg_get_wasmvestagaffine_infinity(a: number): number;
export function caml_pasta_vesta_affine_deep_copy(a: number): number;
export function __wbg_wasmvestagprojective_free(a: number): void;
export function __wbg_wasmvestagaffine_free(a: number): void;
export function __wbg_wasmpastafpurs_free(a: number): void;
export function caml_pasta_fp_urs_create(a: number): number;
export function caml_pasta_fp_urs_write(a: number, b: number, c: number, d: number): void;
export function caml_pasta_fp_urs_read(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fp_urs_lagrange_commitment(a: number, b: number, c: number): number;
export function caml_pasta_fp_urs_commit_evaluations(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fp_urs_b_poly_commitment(a: number, b: number, c: number): number;
export function caml_pasta_fp_urs_batch_accumulator_check(a: number, b: number, c: number, d: number, e: number): number;
export function caml_pasta_fp_urs_h(a: number): number;
export function caml_pasta_fq_urs_create(a: number): number;
export function caml_pasta_fq_urs_write(a: number, b: number, c: number, d: number): void;
export function caml_pasta_fq_urs_read(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fq_urs_lagrange_commitment(a: number, b: number, c: number): number;
export function caml_pasta_fq_urs_commit_evaluations(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fq_urs_b_poly_commitment(a: number, b: number, c: number): number;
export function caml_pasta_fq_urs_batch_accumulator_check(a: number, b: number, c: number, d: number, e: number): number;
export function __wbg_wasmpastafqplonkgatevector_free(a: number): void;
export function __wbg_wasmpastafqplonkgate_free(a: number): void;
export function __wbg_get_wasmpastafqplonkgate_typ(a: number): number;
export function __wbg_set_wasmpastafqplonkgate_typ(a: number, b: number): void;
export function __wbg_get_wasmpastafqplonkgate_wires(a: number): number;
export function __wbg_set_wasmpastafqplonkgate_wires(a: number, b: number): void;
export function wasmpastafqplonkgate_new(a: number, b: number, c: number, d: number): number;
export function wasmpastafqplonkgate_c(a: number, b: number): void;
export function wasmpastafqplonkgate_set_c(a: number, b: number, c: number): void;
export function caml_pasta_fq_plonk_gate_vector_create(): number;
export function caml_pasta_fq_plonk_gate_vector_add(a: number, b: number): void;
export function caml_pasta_fq_plonk_gate_vector_get(a: number, b: number): number;
export function caml_pasta_fq_plonk_gate_vector_wrap(a: number, b: number, c: number): void;
export function __wbg_wasmpastafqplonkindex_free(a: number): void;
export function caml_pasta_fq_plonk_index_create(a: number, b: number, c: number): number;
export function caml_pasta_fq_plonk_index_max_degree(a: number): number;
export function caml_pasta_fq_plonk_index_public_inputs(a: number): number;
export function caml_pasta_fq_plonk_index_domain_d1_size(a: number): number;
export function caml_pasta_fq_plonk_index_domain_d4_size(a: number): number;
export function caml_pasta_fq_plonk_index_domain_d8_size(a: number): number;
export function caml_pasta_fq_plonk_index_read(a: number, b: number, c: number, d: number, e: number): number;
export function caml_pasta_fq_plonk_index_write(a: number, b: number, c: number, d: number): void;
export function caml_pasta_fq_urs_h(a: number): number;
export function __wbg_wasmpastafqurs_free(a: number): void;
export function __wbg_wasmpastafpplonkgatevector_free(a: number): void;
export function __wbg_wasmpastafpplonkgate_free(a: number): void;
export function __wbg_get_wasmpastafpplonkgate_typ(a: number): number;
export function __wbg_set_wasmpastafpplonkgate_typ(a: number, b: number): void;
export function __wbg_get_wasmpastafpplonkgate_wires(a: number): number;
export function __wbg_set_wasmpastafpplonkgate_wires(a: number, b: number): void;
export function wasmpastafpplonkgate_new(a: number, b: number, c: number, d: number): number;
export function wasmpastafpplonkgate_c(a: number, b: number): void;
export function wasmpastafpplonkgate_set_c(a: number, b: number, c: number): void;
export function caml_pasta_fp_plonk_gate_vector_create(): number;
export function caml_pasta_fp_plonk_gate_vector_add(a: number, b: number): void;
export function caml_pasta_fp_plonk_gate_vector_get(a: number, b: number): number;
export function caml_pasta_fp_plonk_gate_vector_wrap(a: number, b: number, c: number): void;
export function __wbg_wasmpastafpplonkindex_free(a: number): void;
export function caml_pasta_fp_plonk_index_create(a: number, b: number, c: number): number;
export function caml_pasta_fp_plonk_index_max_degree(a: number): number;
export function caml_pasta_fp_plonk_index_public_inputs(a: number): number;
export function caml_pasta_fp_plonk_index_domain_d1_size(a: number): number;
export function caml_pasta_fp_plonk_index_domain_d4_size(a: number): number;
export function caml_pasta_fp_plonk_index_domain_d8_size(a: number): number;
export function caml_pasta_fp_plonk_index_read(a: number, b: number, c: number, d: number, e: number): number;
export function caml_pasta_fp_plonk_index_write(a: number, b: number, c: number, d: number): void;
export function wasmpastavestapolycomm_new(a: number, b: number, c: number): number;
export function wasmpastavestapolycomm_unshifted(a: number, b: number): void;
export function wasmpastavestapolycomm_set_unshifted(a: number, b: number, c: number): void;
export function __wbg_wasmpastapallaspolycomm_free(a: number): void;
export function __wbg_get_wasmpastapallaspolycomm_shifted(a: number): number;
export function __wbg_set_wasmpastapallaspolycomm_shifted(a: number, b: number): void;
export function wasmpastapallaspolycomm_new(a: number, b: number, c: number): number;
export function wasmpastapallaspolycomm_unshifted(a: number, b: number): void;
export function wasmpastapallaspolycomm_set_unshifted(a: number, b: number, c: number): void;
export function __wbg_wasmplonkwire_free(a: number): void;
export function __wbg_get_wasmplonkwire_row(a: number): number;
export function __wbg_set_wasmplonkwire_row(a: number, b: number): void;
export function __wbg_get_wasmplonkwire_col(a: number): number;
export function __wbg_set_wasmplonkwire_col(a: number, b: number): void;
export function wasmplonkwire_new(a: number, b: number): number;
export function __wbg_wasmplonkwires_free(a: number): void;
export function __wbg_get_wasmplonkwires_l(a: number): number;
export function __wbg_set_wasmplonkwires_l(a: number, b: number): void;
export function __wbg_get_wasmplonkwires_r(a: number): number;
export function __wbg_set_wasmplonkwires_r(a: number, b: number): void;
export function __wbg_get_wasmplonkwires_o(a: number): number;
export function __wbg_set_wasmplonkwires_o(a: number, b: number): void;
export function wasmplonkwires_new(a: number, b: number, c: number, d: number): number;
export function __wbg_wasmpastavestapolycomm_free(a: number): void;
export function __wbg_set_wasmpastavestapolycomm_shifted(a: number, b: number): void;
export function __wbg_get_wasmpastavestapolycomm_shifted(a: number): number;
export function __wbg_get_wasmplonkwires_row(a: number): number;
export function __wbg_set_wasmplonkwires_row(a: number, b: number): void;
export function caml_bigint_256_of_numeral(a: number, b: number, c: number, d: number, e: number): void;
export function caml_bigint_256_of_decimal_string(a: number, b: number, c: number): void;
export function caml_bigint_256_num_limbs(): number;
export function caml_bigint_256_bytes_per_limb(): number;
export function caml_bigint_256_div(a: number, b: number, c: number, d: number, e: number): void;
export function caml_bigint_256_compare(a: number, b: number, c: number, d: number): number;
export function caml_bigint_256_print(a: number, b: number): void;
export function caml_bigint_256_to_string(a: number, b: number, c: number): void;
export function caml_bigint_256_test_bit(a: number, b: number, c: number): number;
export function caml_bigint_256_to_bytes(a: number, b: number, c: number): void;
export function caml_bigint_256_of_bytes(a: number, b: number, c: number): void;
export function caml_bigint_256_deep_copy(a: number, b: number, c: number): void;
export function greet(a: number, b: number): void;
export function console_log(a: number, b: number): void;
export function create_zero_u32_ptr(): number;
export function free_u32_ptr(a: number): void;
export function set_u32_ptr(a: number, b: number): void;
export function wait_until_non_zero(a: number): number;
export function __wbg_wasmpastafqproofevaluations_free(a: number): void;
export function wasmpastafqproofevaluations_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number): number;
export function wasmpastafqproofevaluations_l(a: number, b: number): void;
export function wasmpastafqproofevaluations_r(a: number, b: number): void;
export function wasmpastafqproofevaluations_o(a: number, b: number): void;
export function wasmpastafqproofevaluations_z(a: number, b: number): void;
export function wasmpastafqproofevaluations_t(a: number, b: number): void;
export function wasmpastafqproofevaluations_f(a: number, b: number): void;
export function wasmpastafqproofevaluations_sigma1(a: number, b: number): void;
export function wasmpastafqproofevaluations_sigma2(a: number, b: number): void;
export function wasmpastafqproofevaluations_set_l(a: number, b: number, c: number): void;
export function wasmpastafqproofevaluations_set_r(a: number, b: number, c: number): void;
export function wasmpastafqproofevaluations_set_o(a: number, b: number, c: number): void;
export function wasmpastafqproofevaluations_set_z(a: number, b: number, c: number): void;
export function wasmpastafqproofevaluations_set_t(a: number, b: number, c: number): void;
export function wasmpastafqproofevaluations_set_f(a: number, b: number, c: number): void;
export function wasmpastafqproofevaluations_set_sigma1(a: number, b: number, c: number): void;
export function wasmpastafqproofevaluations_set_sigma2(a: number, b: number, c: number): void;
export function __wbg_wasmpastafqopeningproof_free(a: number): void;
export function __wbg_get_wasmpastafqopeningproof_z1(a: number, b: number): void;
export function __wbg_set_wasmpastafqopeningproof_z1(a: number, b: number, c: number): void;
export function __wbg_get_wasmpastafqopeningproof_z2(a: number, b: number): void;
export function __wbg_set_wasmpastafqopeningproof_z2(a: number, b: number, c: number): void;
export function wasmpastafqopeningproof_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function wasmpastafqopeningproof_lr_0(a: number, b: number): void;
export function wasmpastafqopeningproof_lr_1(a: number, b: number): void;
export function wasmpastafqopeningproof_delta(a: number): number;
export function wasmpastafqopeningproof_sg(a: number): number;
export function wasmpastafqopeningproof_set_lr_0(a: number, b: number, c: number): void;
export function wasmpastafqopeningproof_set_lr_1(a: number, b: number, c: number): void;
export function wasmpastafqopeningproof_set_delta(a: number, b: number): void;
export function wasmpastafqopeningproof_set_sg(a: number, b: number): void;
export function __wbg_wasmpastafqprovercommitments_free(a: number): void;
export function wasmpastafqprovercommitments_new(a: number, b: number, c: number, d: number, e: number): number;
export function wasmpastafqprovercommitments_l_comm(a: number): number;
export function wasmpastafqprovercommitments_r_comm(a: number): number;
export function wasmpastafqprovercommitments_o_comm(a: number): number;
export function wasmpastafqprovercommitments_z_comm(a: number): number;
export function wasmpastafqprovercommitments_t_comm(a: number): number;
export function wasmpastafqprovercommitments_set_l_comm(a: number, b: number): void;
export function wasmpastafqprovercommitments_set_r_comm(a: number, b: number): void;
export function wasmpastafqprovercommitments_set_o_comm(a: number, b: number): void;
export function wasmpastafqprovercommitments_set_z_comm(a: number, b: number): void;
export function wasmpastafqprovercommitments_set_t_comm(a: number, b: number): void;
export function __wbg_wasmvecvecpastafq_free(a: number): void;
export function wasmvecvecpastafq_push(a: number, b: number, c: number): void;
export function wasmvecvecpastafq_get(a: number, b: number, c: number): void;
export function wasmvecvecpastafq_set(a: number, b: number, c: number, d: number): void;
export function __wbg_wasmpastafqproverproof_free(a: number): void;
export function wasmpastafqproverproof_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function wasmpastafqproverproof_commitments(a: number): number;
export function wasmpastafqproverproof_proof(a: number): number;
export function wasmpastafqproverproof_evals0(a: number): number;
export function wasmpastafqproverproof_evals1(a: number): number;
export function wasmpastafqproverproof_public_(a: number, b: number): void;
export function wasmpastafqproverproof_prev_challenges_scalars(a: number): number;
export function wasmpastafqproverproof_prev_challenges_comms(a: number, b: number): void;
export function wasmpastafqproverproof_set_commitments(a: number, b: number): void;
export function wasmpastafqproverproof_set_proof(a: number, b: number): void;
export function wasmpastafqproverproof_set_evals0(a: number, b: number): void;
export function wasmpastafqproverproof_set_evals1(a: number, b: number): void;
export function wasmpastafqproverproof_set_public_(a: number, b: number, c: number): void;
export function wasmpastafqproverproof_set_prev_challenges_scalars(a: number, b: number): void;
export function wasmpastafqproverproof_set_prev_challenges_comms(a: number, b: number, c: number): void;
export function caml_pasta_fq_plonk_proof_create(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function caml_pasta_fq_plonk_proof_verify(a: number, b: number, c: number, d: number): number;
export function __wbg_wasmvecvecpallaspolycomm_free(a: number): void;
export function wasmvecvecpallaspolycomm_create(a: number): number;
export function wasmvecvecpallaspolycomm_push(a: number, b: number, c: number): void;
export function caml_pasta_fq_plonk_proof_batch_verify(a: number, b: number, c: number, d: number, e: number): number;
export function caml_pasta_fq_plonk_proof_dummy(): number;
export function caml_pasta_fq_plonk_proof_deep_copy(a: number): number;
export function wasmvecvecpastafq_create(a: number): number;
export function __wbg_wbg_rayon_poolbuilder_free(a: number): void;
export function wbg_rayon_poolbuilder_numThreads(a: number): number;
export function wbg_rayon_poolbuilder_receiver(a: number): number;
export function wbg_rayon_poolbuilder_build(a: number): void;
export function initThreadPool(a: number, b: number): number;
export function wbg_rayon_start_worker(a: number): void;
export const memory: WebAssembly.Memory;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_start(): void;
