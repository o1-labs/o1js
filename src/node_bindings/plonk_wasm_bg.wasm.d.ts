/* tslint:disable */
/* eslint-disable */
export function __wbg_wasmgpallas_free(a: number): void;
export function __wbg_get_wasmgpallas_x(a: number, b: number): void;
export function __wbg_set_wasmgpallas_x(a: number, b: number, c: number): void;
export function __wbg_get_wasmgpallas_y(a: number, b: number): void;
export function __wbg_set_wasmgpallas_y(a: number, b: number, c: number): void;
export function __wbg_get_wasmgpallas_infinity(a: number): number;
export function __wbg_set_wasmgpallas_infinity(a: number, b: number): void;
export function __wbg_get_wasmgvesta_x(a: number, b: number): void;
export function __wbg_set_wasmgvesta_x(a: number, b: number, c: number): void;
export function __wbg_get_wasmgvesta_y(a: number, b: number): void;
export function __wbg_set_wasmgvesta_y(a: number, b: number, c: number): void;
export function caml_pallas_affine_one(): number;
export function caml_vesta_affine_one(): number;
export function caml_pasta_fp_poseidon_block_cipher(a: number, b: number, c: number): void;
export function caml_pasta_fq_poseidon_block_cipher(a: number, b: number, c: number): void;
export function __wbg_wasmgvesta_free(a: number): void;
export function __wbg_set_wasmgvesta_infinity(a: number, b: number): void;
export function __wbg_get_wasmgvesta_infinity(a: number): number;
export function caml_pallas_one(): number;
export function caml_pallas_add(a: number, b: number): number;
export function caml_pallas_sub(a: number, b: number): number;
export function caml_pallas_negate(a: number): number;
export function caml_pallas_double(a: number): number;
export function caml_pallas_scale(a: number, b: number, c: number): number;
export function caml_pallas_random(): number;
export function caml_pallas_rng(a: number): number;
export function caml_pallas_endo_base(a: number): void;
export function caml_pallas_endo_scalar(a: number): void;
export function caml_pallas_to_affine(a: number): number;
export function caml_pallas_of_affine(a: number): number;
export function caml_pallas_of_affine_coordinates(a: number, b: number, c: number, d: number): number;
export function caml_pallas_affine_deep_copy(a: number): number;
export function caml_vesta_one(): number;
export function caml_vesta_add(a: number, b: number): number;
export function caml_vesta_sub(a: number, b: number): number;
export function caml_vesta_negate(a: number): number;
export function caml_vesta_double(a: number): number;
export function caml_vesta_scale(a: number, b: number, c: number): number;
export function caml_vesta_random(): number;
export function caml_vesta_rng(a: number): number;
export function caml_vesta_endo_base(a: number): void;
export function caml_vesta_endo_scalar(a: number): void;
export function caml_vesta_to_affine(a: number): number;
export function caml_vesta_of_affine(a: number): number;
export function caml_vesta_of_affine_coordinates(a: number, b: number, c: number, d: number): number;
export function caml_vesta_affine_deep_copy(a: number): number;
export function __wbg_wasmgatewires_free(a: number): void;
export function __wbg_get_wasmgatewires_0(a: number): number;
export function __wbg_set_wasmgatewires_0(a: number, b: number): void;
export function __wbg_get_wasmgatewires_1(a: number): number;
export function __wbg_set_wasmgatewires_1(a: number, b: number): void;
export function __wbg_get_wasmgatewires_2(a: number): number;
export function __wbg_set_wasmgatewires_2(a: number, b: number): void;
export function __wbg_get_wasmgatewires_3(a: number): number;
export function __wbg_set_wasmgatewires_3(a: number, b: number): void;
export function __wbg_get_wasmgatewires_4(a: number): number;
export function __wbg_set_wasmgatewires_4(a: number, b: number): void;
export function __wbg_get_wasmgatewires_5(a: number): number;
export function __wbg_set_wasmgatewires_5(a: number, b: number): void;
export function __wbg_get_wasmgatewires_6(a: number): number;
export function __wbg_set_wasmgatewires_6(a: number, b: number): void;
export function wasmgatewires_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function __wbg_wasmfpsrs_free(a: number): void;
export function caml_fp_srs_create(a: number): number;
export function caml_fp_srs_add_lagrange_basis(a: number, b: number): void;
export function caml_fp_srs_write(a: number, b: number, c: number, d: number, e: number): void;
export function caml_fp_srs_read(a: number, b: number, c: number, d: number, e: number): void;
export function caml_fp_srs_lagrange_commitment(a: number, b: number, c: number, d: number): void;
export function caml_fp_srs_commit_evaluations(a: number, b: number, c: number, d: number, e: number): void;
export function caml_fp_srs_b_poly_commitment(a: number, b: number, c: number, d: number): void;
export function caml_fp_srs_batch_accumulator_check(a: number, b: number, c: number, d: number, e: number): number;
export function caml_fp_srs_batch_accumulator_generate(a: number, b: number, c: number, d: number, e: number): void;
export function caml_fp_srs_h(a: number): number;
export function __wbg_wasmfqsrs_free(a: number): void;
export function caml_fq_srs_create(a: number): number;
export function caml_fq_srs_add_lagrange_basis(a: number, b: number): void;
export function caml_fq_srs_lagrange_commitment(a: number, b: number, c: number, d: number): void;
export function caml_fq_srs_commit_evaluations(a: number, b: number, c: number, d: number, e: number): void;
export function caml_fq_srs_b_poly_commitment(a: number, b: number, c: number, d: number): void;
export function caml_fq_srs_batch_accumulator_check(a: number, b: number, c: number, d: number, e: number): number;
export function caml_fq_srs_batch_accumulator_generate(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_wasmvecvecfp_free(a: number): void;
export function wasmvecvecfp_create(a: number): number;
export function wasmvecvecfp_push(a: number, b: number, c: number): void;
export function wasmvecvecfp_get(a: number, b: number, c: number): void;
export function wasmvecvecfp_set(a: number, b: number, c: number, d: number): void;
export function __wbg_wasmfpproofevaluations_free(a: number): void;
export function wasmfpproofevaluations_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function wasmfpproofevaluations_w(a: number): number;
export function wasmfpproofevaluations_z(a: number, b: number): void;
export function wasmfpproofevaluations_s(a: number): number;
export function wasmfpproofevaluations_generic_selector(a: number, b: number): void;
export function wasmfpproofevaluations_poseidon_selector(a: number, b: number): void;
export function wasmfpproofevaluations_set_w(a: number, b: number): void;
export function wasmfpproofevaluations_set_s(a: number, b: number): void;
export function wasmfpproofevaluations_set_z(a: number, b: number, c: number): void;
export function wasmfpproofevaluations_set_generic_selector(a: number, b: number, c: number): void;
export function wasmfpproofevaluations_set_poseidon_selector(a: number, b: number, c: number): void;
export function __wbg_wasmfpprovercommitments_free(a: number): void;
export function wasmfpprovercommitments_new(a: number, b: number, c: number, d: number): number;
export function wasmfpprovercommitments_w_comm(a: number, b: number): void;
export function wasmfpprovercommitments_z_comm(a: number): number;
export function wasmfpprovercommitments_t_comm(a: number): number;
export function wasmfpprovercommitments_set_w_comm(a: number, b: number, c: number): void;
export function wasmfpprovercommitments_set_z_comm(a: number, b: number): void;
export function wasmfpprovercommitments_set_t_comm(a: number, b: number): void;
export function __wbg_wasmfpopeningproof_free(a: number): void;
export function __wbg_get_wasmfpopeningproof_z1(a: number, b: number): void;
export function __wbg_set_wasmfpopeningproof_z1(a: number, b: number, c: number): void;
export function __wbg_get_wasmfpopeningproof_z2(a: number, b: number): void;
export function __wbg_set_wasmfpopeningproof_z2(a: number, b: number, c: number): void;
export function wasmfpopeningproof_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function wasmfpopeningproof_lr_0(a: number, b: number): void;
export function wasmfpopeningproof_lr_1(a: number, b: number): void;
export function wasmfpopeningproof_delta(a: number): number;
export function wasmfpopeningproof_sg(a: number): number;
export function wasmfpopeningproof_set_lr_0(a: number, b: number, c: number): void;
export function wasmfpopeningproof_set_lr_1(a: number, b: number, c: number): void;
export function wasmfpopeningproof_set_delta(a: number, b: number): void;
export function wasmfpopeningproof_set_sg(a: number, b: number): void;
export function __wbg_wasmfpproverproof_free(a: number): void;
export function __wbg_get_wasmfpproverproof_ft_eval1(a: number, b: number): void;
export function __wbg_set_wasmfpproverproof_ft_eval1(a: number, b: number, c: number): void;
export function wasmfpproverproof_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): number;
export function wasmfpproverproof_commitments(a: number): number;
export function wasmfpproverproof_proof(a: number): number;
export function wasmfpproverproof_evals0(a: number): number;
export function wasmfpproverproof_evals1(a: number): number;
export function wasmfpproverproof_public_(a: number, b: number): void;
export function wasmfpproverproof_prev_challenges_scalars(a: number): number;
export function wasmfpproverproof_prev_challenges_comms(a: number, b: number): void;
export function wasmfpproverproof_set_commitments(a: number, b: number): void;
export function wasmfpproverproof_set_proof(a: number, b: number): void;
export function wasmfpproverproof_set_evals0(a: number, b: number): void;
export function wasmfpproverproof_set_evals1(a: number, b: number): void;
export function wasmfpproverproof_set_public_(a: number, b: number, c: number): void;
export function wasmfpproverproof_set_prev_challenges_scalars(a: number, b: number): void;
export function wasmfpproverproof_set_prev_challenges_comms(a: number, b: number, c: number): void;
export function wasmfpproverproof_serialize(a: number, b: number): void;
export function caml_pasta_fp_plonk_proof_create(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function caml_pasta_fp_plonk_proof_verify(a: number, b: number): number;
export function __wbg_wasmvecvecfppolycomm_free(a: number): void;
export function wasmvecvecfppolycomm_push(a: number, b: number, c: number): void;
export function caml_pasta_fp_plonk_proof_batch_verify(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fp_plonk_proof_dummy(): number;
export function caml_pasta_fp_plonk_proof_deep_copy(a: number): number;
export function wasmvecvecfq_push(a: number, b: number, c: number): void;
export function wasmvecvecfq_get(a: number, b: number, c: number): void;
export function wasmvecvecfq_set(a: number, b: number, c: number, d: number): void;
export function wasmfqproofevaluations_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function wasmfqproofevaluations_w(a: number): number;
export function wasmfqproofevaluations_z(a: number, b: number): void;
export function wasmfqproofevaluations_s(a: number): number;
export function wasmfqproofevaluations_generic_selector(a: number, b: number): void;
export function wasmfqproofevaluations_poseidon_selector(a: number, b: number): void;
export function wasmfqproofevaluations_set_z(a: number, b: number, c: number): void;
export function wasmfqproofevaluations_set_generic_selector(a: number, b: number, c: number): void;
export function wasmfqproofevaluations_set_poseidon_selector(a: number, b: number, c: number): void;
export function wasmfqprovercommitments_new(a: number, b: number, c: number, d: number): number;
export function wasmfqprovercommitments_w_comm(a: number, b: number): void;
export function wasmfqprovercommitments_set_w_comm(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqopeningproof_z1(a: number, b: number): void;
export function __wbg_set_wasmfqopeningproof_z1(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqopeningproof_z2(a: number, b: number): void;
export function __wbg_set_wasmfqopeningproof_z2(a: number, b: number, c: number): void;
export function wasmfqopeningproof_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function wasmfqopeningproof_lr_0(a: number, b: number): void;
export function wasmfqopeningproof_lr_1(a: number, b: number): void;
export function wasmfqopeningproof_set_lr_0(a: number, b: number, c: number): void;
export function wasmfqopeningproof_set_lr_1(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqproverproof_ft_eval1(a: number, b: number): void;
export function __wbg_set_wasmfqproverproof_ft_eval1(a: number, b: number, c: number): void;
export function wasmfqproverproof_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): number;
export function wasmfqproverproof_commitments(a: number): number;
export function wasmfqproverproof_evals0(a: number): number;
export function wasmfqproverproof_evals1(a: number): number;
export function wasmfqproverproof_public_(a: number, b: number): void;
export function wasmfqproverproof_prev_challenges_scalars(a: number): number;
export function wasmfqproverproof_prev_challenges_comms(a: number, b: number): void;
export function wasmfqproverproof_set_public_(a: number, b: number, c: number): void;
export function wasmfqproverproof_set_prev_challenges_comms(a: number, b: number, c: number): void;
export function wasmfqproverproof_serialize(a: number, b: number): void;
export function caml_pasta_fq_plonk_proof_create(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function caml_pasta_fq_plonk_proof_verify(a: number, b: number): number;
export function wasmvecvecfqpolycomm_push(a: number, b: number, c: number): void;
export function caml_pasta_fq_plonk_proof_batch_verify(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fq_plonk_proof_dummy(): number;
export function wasmfqopeningproof_sg(a: number): number;
export function wasmfqproofevaluations_set_s(a: number, b: number): void;
export function wasmfqproverproof_set_prev_challenges_scalars(a: number, b: number): void;
export function caml_fq_srs_write(a: number, b: number, c: number, d: number, e: number): void;
export function wasmfqprovercommitments_set_z_comm(a: number, b: number): void;
export function wasmfqopeningproof_set_delta(a: number, b: number): void;
export function __wbg_wasmfqopeningproof_free(a: number): void;
export function wasmfqproverproof_set_evals0(a: number, b: number): void;
export function wasmfqproverproof_set_evals1(a: number, b: number): void;
export function wasmfqprovercommitments_z_comm(a: number): number;
export function wasmfqopeningproof_set_sg(a: number, b: number): void;
export function wasmfqproverproof_set_commitments(a: number, b: number): void;
export function wasmfqproverproof_set_proof(a: number, b: number): void;
export function wasmfqproverproof_proof(a: number): number;
export function wasmfqprovercommitments_t_comm(a: number): number;
export function caml_pasta_fq_plonk_proof_deep_copy(a: number): number;
export function wasmfqopeningproof_delta(a: number): number;
export function caml_fq_srs_h(a: number): number;
export function __wbg_wasmfqprovercommitments_free(a: number): void;
export function __wbg_wasmfqproofevaluations_free(a: number): void;
export function wasmfqproofevaluations_set_w(a: number, b: number): void;
export function wasmfqprovercommitments_set_t_comm(a: number, b: number): void;
export function wasmvecvecfppolycomm_create(a: number): number;
export function wasmvecvecfq_create(a: number): number;
export function wasmvecvecfqpolycomm_create(a: number): number;
export function __wbg_wasmvecvecfqpolycomm_free(a: number): void;
export function __wbg_wasmfqproverproof_free(a: number): void;
export function caml_fq_srs_read(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_wasmvecvecfq_free(a: number): void;
export function __wbg_wasmfpdomain_free(a: number): void;
export function __wbg_get_wasmfpdomain_log_size_of_group(a: number): number;
export function __wbg_set_wasmfpdomain_log_size_of_group(a: number, b: number): void;
export function __wbg_get_wasmfpdomain_group_gen(a: number, b: number): void;
export function __wbg_set_wasmfpdomain_group_gen(a: number, b: number, c: number): void;
export function wasmfpdomain_new(a: number, b: number, c: number): number;
export function __wbg_wasmfpplonkverificationevals_free(a: number): void;
export function wasmfpplonkverificationevals_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function wasmfpplonkverificationevals_sigma_comm(a: number, b: number): void;
export function wasmfpplonkverificationevals_set_sigma_comm(a: number, b: number, c: number): void;
export function wasmfpplonkverificationevals_coefficients_comm(a: number, b: number): void;
export function wasmfpplonkverificationevals_set_coefficients_comm(a: number, b: number, c: number): void;
export function wasmfpplonkverificationevals_generic_comm(a: number): number;
export function wasmfpplonkverificationevals_set_generic_comm(a: number, b: number): void;
export function wasmfpplonkverificationevals_psm_comm(a: number): number;
export function wasmfpplonkverificationevals_set_psm_comm(a: number, b: number): void;
export function wasmfpplonkverificationevals_complete_add_comm(a: number): number;
export function wasmfpplonkverificationevals_set_complete_add_comm(a: number, b: number): void;
export function wasmfpplonkverificationevals_mul_comm(a: number): number;
export function wasmfpplonkverificationevals_set_mul_comm(a: number, b: number): void;
export function wasmfpplonkverificationevals_emul_comm(a: number): number;
export function wasmfpplonkverificationevals_set_emul_comm(a: number, b: number): void;
export function wasmfpplonkverificationevals_endomul_scalar_comm(a: number): number;
export function wasmfpplonkverificationevals_set_endomul_scalar_comm(a: number, b: number): void;
export function wasmfpplonkverificationevals_chacha_comm(a: number, b: number): void;
export function wasmfpplonkverificationevals_set_chacha_comm(a: number, b: number, c: number): void;
export function __wbg_wasmfpshifts_free(a: number): void;
export function __wbg_get_wasmfpshifts_s1(a: number, b: number): void;
export function __wbg_set_wasmfpshifts_s1(a: number, b: number, c: number): void;
export function __wbg_get_wasmfpshifts_s2(a: number, b: number): void;
export function __wbg_set_wasmfpshifts_s2(a: number, b: number, c: number): void;
export function __wbg_get_wasmfpshifts_s3(a: number, b: number): void;
export function __wbg_set_wasmfpshifts_s3(a: number, b: number, c: number): void;
export function __wbg_get_wasmfpshifts_s4(a: number, b: number): void;
export function __wbg_set_wasmfpshifts_s4(a: number, b: number, c: number): void;
export function __wbg_get_wasmfpshifts_s5(a: number, b: number): void;
export function __wbg_set_wasmfpshifts_s5(a: number, b: number, c: number): void;
export function __wbg_get_wasmfpshifts_s6(a: number, b: number): void;
export function __wbg_set_wasmfpshifts_s6(a: number, b: number, c: number): void;
export function wasmfpshifts_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number): number;
export function __wbg_wasmfpplonkverifierindex_free(a: number): void;
export function __wbg_get_wasmfpplonkverifierindex_domain(a: number): number;
export function __wbg_set_wasmfpplonkverifierindex_domain(a: number, b: number): void;
export function __wbg_get_wasmfpplonkverifierindex_max_poly_size(a: number): number;
export function __wbg_set_wasmfpplonkverifierindex_max_poly_size(a: number, b: number): void;
export function __wbg_get_wasmfpplonkverifierindex_max_quot_size(a: number): number;
export function __wbg_set_wasmfpplonkverifierindex_max_quot_size(a: number, b: number): void;
export function __wbg_get_wasmfpplonkverifierindex_public_(a: number): number;
export function __wbg_set_wasmfpplonkverifierindex_public_(a: number, b: number): void;
export function __wbg_get_wasmfpplonkverifierindex_prev_challenges(a: number): number;
export function __wbg_set_wasmfpplonkverifierindex_prev_challenges(a: number, b: number): void;
export function __wbg_get_wasmfpplonkverifierindex_shifts(a: number): number;
export function __wbg_set_wasmfpplonkverifierindex_shifts(a: number, b: number): void;
export function wasmfpplonkverifierindex_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function wasmfpplonkverifierindex_srs(a: number): number;
export function wasmfpplonkverifierindex_set_srs(a: number, b: number): void;
export function wasmfpplonkverifierindex_evals(a: number): number;
export function wasmfpplonkverifierindex_set_evals(a: number, b: number): void;
export function caml_pasta_fp_plonk_verifier_index_read(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function caml_pasta_fp_plonk_verifier_index_write(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fp_plonk_verifier_index_serialize(a: number, b: number): void;
export function caml_pasta_fp_plonk_verifier_index_deserialize(a: number, b: number, c: number): number;
export function caml_pasta_fp_plonk_verifier_index_create(a: number): number;
export function caml_pasta_fp_plonk_verifier_index_shifts(a: number): number;
export function caml_pasta_fp_plonk_verifier_index_dummy(): number;
export function caml_pasta_fp_plonk_verifier_index_deep_copy(a: number): number;
export function __wbg_set_wasmfpshifts_s0(a: number, b: number, c: number): void;
export function __wbg_get_wasmfpshifts_s0(a: number, b: number): void;
export function __wbg_wasmfqdomain_free(a: number): void;
export function __wbg_get_wasmfqdomain_log_size_of_group(a: number): number;
export function __wbg_set_wasmfqdomain_log_size_of_group(a: number, b: number): void;
export function __wbg_get_wasmfqdomain_group_gen(a: number, b: number): void;
export function __wbg_set_wasmfqdomain_group_gen(a: number, b: number, c: number): void;
export function wasmfqdomain_new(a: number, b: number, c: number): number;
export function __wbg_wasmfqplonkverificationevals_free(a: number): void;
export function wasmfqplonkverificationevals_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function wasmfqplonkverificationevals_sigma_comm(a: number, b: number): void;
export function wasmfqplonkverificationevals_set_sigma_comm(a: number, b: number, c: number): void;
export function wasmfqplonkverificationevals_coefficients_comm(a: number, b: number): void;
export function wasmfqplonkverificationevals_set_coefficients_comm(a: number, b: number, c: number): void;
export function wasmfqplonkverificationevals_generic_comm(a: number): number;
export function wasmfqplonkverificationevals_set_generic_comm(a: number, b: number): void;
export function wasmfqplonkverificationevals_psm_comm(a: number): number;
export function wasmfqplonkverificationevals_set_psm_comm(a: number, b: number): void;
export function wasmfqplonkverificationevals_complete_add_comm(a: number): number;
export function wasmfqplonkverificationevals_set_complete_add_comm(a: number, b: number): void;
export function wasmfqplonkverificationevals_mul_comm(a: number): number;
export function wasmfqplonkverificationevals_set_mul_comm(a: number, b: number): void;
export function wasmfqplonkverificationevals_emul_comm(a: number): number;
export function wasmfqplonkverificationevals_set_emul_comm(a: number, b: number): void;
export function wasmfqplonkverificationevals_endomul_scalar_comm(a: number): number;
export function wasmfqplonkverificationevals_set_endomul_scalar_comm(a: number, b: number): void;
export function wasmfqplonkverificationevals_chacha_comm(a: number, b: number): void;
export function wasmfqplonkverificationevals_set_chacha_comm(a: number, b: number, c: number): void;
export function __wbg_wasmfqshifts_free(a: number): void;
export function __wbg_get_wasmfqshifts_s1(a: number, b: number): void;
export function __wbg_set_wasmfqshifts_s1(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqshifts_s2(a: number, b: number): void;
export function __wbg_set_wasmfqshifts_s2(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqshifts_s3(a: number, b: number): void;
export function __wbg_set_wasmfqshifts_s3(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqshifts_s4(a: number, b: number): void;
export function __wbg_set_wasmfqshifts_s4(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqshifts_s5(a: number, b: number): void;
export function __wbg_set_wasmfqshifts_s5(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqshifts_s6(a: number, b: number): void;
export function __wbg_set_wasmfqshifts_s6(a: number, b: number, c: number): void;
export function wasmfqshifts_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number): number;
export function __wbg_wasmfqplonkverifierindex_free(a: number): void;
export function __wbg_get_wasmfqplonkverifierindex_domain(a: number): number;
export function __wbg_set_wasmfqplonkverifierindex_domain(a: number, b: number): void;
export function __wbg_get_wasmfqplonkverifierindex_max_poly_size(a: number): number;
export function __wbg_set_wasmfqplonkverifierindex_max_poly_size(a: number, b: number): void;
export function __wbg_get_wasmfqplonkverifierindex_max_quot_size(a: number): number;
export function __wbg_set_wasmfqplonkverifierindex_max_quot_size(a: number, b: number): void;
export function __wbg_get_wasmfqplonkverifierindex_public_(a: number): number;
export function __wbg_set_wasmfqplonkverifierindex_public_(a: number, b: number): void;
export function __wbg_get_wasmfqplonkverifierindex_prev_challenges(a: number): number;
export function __wbg_set_wasmfqplonkverifierindex_prev_challenges(a: number, b: number): void;
export function __wbg_get_wasmfqplonkverifierindex_shifts(a: number): number;
export function __wbg_set_wasmfqplonkverifierindex_shifts(a: number, b: number): void;
export function wasmfqplonkverifierindex_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function wasmfqplonkverifierindex_srs(a: number): number;
export function wasmfqplonkverifierindex_set_srs(a: number, b: number): void;
export function wasmfqplonkverifierindex_evals(a: number): number;
export function wasmfqplonkverifierindex_set_evals(a: number, b: number): void;
export function caml_pasta_fq_plonk_verifier_index_read(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function caml_pasta_fq_plonk_verifier_index_write(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fq_plonk_verifier_index_serialize(a: number, b: number): void;
export function caml_pasta_fq_plonk_verifier_index_deserialize(a: number, b: number, c: number): number;
export function caml_pasta_fq_plonk_verifier_index_create(a: number): number;
export function caml_pasta_fq_plonk_verifier_index_shifts(a: number): number;
export function caml_pasta_fq_plonk_verifier_index_dummy(): number;
export function caml_pasta_fq_plonk_verifier_index_deep_copy(a: number): number;
export function __wbg_wasmfprandomoracles_free(a: number): void;
export function __wbg_get_wasmfprandomoracles_joint_combiner_chal(a: number, b: number): void;
export function __wbg_set_wasmfprandomoracles_joint_combiner_chal(a: number, b: number, c: number): void;
export function __wbg_get_wasmfprandomoracles_joint_combiner(a: number, b: number): void;
export function __wbg_set_wasmfprandomoracles_joint_combiner(a: number, b: number, c: number): void;
export function __wbg_get_wasmfprandomoracles_beta(a: number, b: number): void;
export function __wbg_set_wasmfprandomoracles_beta(a: number, b: number, c: number): void;
export function __wbg_get_wasmfprandomoracles_gamma(a: number, b: number): void;
export function __wbg_set_wasmfprandomoracles_gamma(a: number, b: number, c: number): void;
export function __wbg_get_wasmfprandomoracles_alpha_chal(a: number, b: number): void;
export function __wbg_set_wasmfprandomoracles_alpha_chal(a: number, b: number, c: number): void;
export function __wbg_get_wasmfprandomoracles_alpha(a: number, b: number): void;
export function __wbg_set_wasmfprandomoracles_alpha(a: number, b: number, c: number): void;
export function __wbg_get_wasmfprandomoracles_zeta(a: number, b: number): void;
export function __wbg_set_wasmfprandomoracles_zeta(a: number, b: number, c: number): void;
export function __wbg_get_wasmfprandomoracles_v(a: number, b: number): void;
export function __wbg_set_wasmfprandomoracles_v(a: number, b: number, c: number): void;
export function __wbg_get_wasmfprandomoracles_u(a: number, b: number): void;
export function __wbg_set_wasmfprandomoracles_u(a: number, b: number, c: number): void;
export function __wbg_get_wasmfprandomoracles_zeta_chal(a: number, b: number): void;
export function __wbg_set_wasmfprandomoracles_zeta_chal(a: number, b: number, c: number): void;
export function __wbg_get_wasmfprandomoracles_v_chal(a: number, b: number): void;
export function __wbg_set_wasmfprandomoracles_v_chal(a: number, b: number, c: number): void;
export function __wbg_get_wasmfprandomoracles_u_chal(a: number, b: number): void;
export function __wbg_set_wasmfprandomoracles_u_chal(a: number, b: number, c: number): void;
export function wasmfprandomoracles_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number, s: number, t: number, u: number, v: number, w: number, x: number): number;
export function __wbg_wasmfporacles_free(a: number): void;
export function __wbg_get_wasmfporacles_o(a: number): number;
export function __wbg_set_wasmfporacles_o(a: number, b: number): void;
export function __wbg_get_wasmfporacles_p_eval0(a: number, b: number): void;
export function __wbg_set_wasmfporacles_p_eval0(a: number, b: number, c: number): void;
export function __wbg_get_wasmfporacles_p_eval1(a: number, b: number): void;
export function __wbg_set_wasmfporacles_p_eval1(a: number, b: number, c: number): void;
export function __wbg_get_wasmfporacles_digest_before_evaluations(a: number, b: number): void;
export function __wbg_set_wasmfporacles_digest_before_evaluations(a: number, b: number, c: number): void;
export function wasmfporacles_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function wasmfporacles_opening_prechallenges(a: number, b: number): void;
export function wasmfporacles_set_opening_prechallenges(a: number, b: number, c: number): void;
export function fp_oracles_create(a: number, b: number, c: number, d: number, e: number): void;
export function fp_oracles_dummy(): number;
export function fp_oracles_deep_copy(a: number): number;
export function __wbg_get_wasmfqrandomoracles_joint_combiner_chal(a: number, b: number): void;
export function __wbg_set_wasmfqrandomoracles_joint_combiner_chal(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqrandomoracles_joint_combiner(a: number, b: number): void;
export function __wbg_set_wasmfqrandomoracles_joint_combiner(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqrandomoracles_beta(a: number, b: number): void;
export function __wbg_set_wasmfqrandomoracles_beta(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqrandomoracles_gamma(a: number, b: number): void;
export function __wbg_set_wasmfqrandomoracles_gamma(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqrandomoracles_alpha_chal(a: number, b: number): void;
export function __wbg_set_wasmfqrandomoracles_alpha_chal(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqrandomoracles_alpha(a: number, b: number): void;
export function __wbg_set_wasmfqrandomoracles_alpha(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqrandomoracles_zeta(a: number, b: number): void;
export function __wbg_set_wasmfqrandomoracles_zeta(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqrandomoracles_v(a: number, b: number): void;
export function __wbg_set_wasmfqrandomoracles_v(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqrandomoracles_u(a: number, b: number): void;
export function __wbg_set_wasmfqrandomoracles_u(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqrandomoracles_zeta_chal(a: number, b: number): void;
export function __wbg_set_wasmfqrandomoracles_zeta_chal(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqrandomoracles_v_chal(a: number, b: number): void;
export function __wbg_set_wasmfqrandomoracles_v_chal(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqrandomoracles_u_chal(a: number, b: number): void;
export function __wbg_set_wasmfqrandomoracles_u_chal(a: number, b: number, c: number): void;
export function wasmfqrandomoracles_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number, s: number, t: number, u: number, v: number, w: number, x: number): number;
export function __wbg_get_wasmfqoracles_p_eval0(a: number, b: number): void;
export function __wbg_set_wasmfqoracles_p_eval0(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqoracles_p_eval1(a: number, b: number): void;
export function __wbg_set_wasmfqoracles_p_eval1(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqoracles_digest_before_evaluations(a: number, b: number): void;
export function __wbg_set_wasmfqoracles_digest_before_evaluations(a: number, b: number, c: number): void;
export function wasmfqoracles_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function wasmfqoracles_opening_prechallenges(a: number, b: number): void;
export function wasmfqoracles_set_opening_prechallenges(a: number, b: number, c: number): void;
export function fq_oracles_create(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_wasmfqrandomoracles_free(a: number): void;
export function __wbg_get_wasmfqoracles_o(a: number): number;
export function __wbg_wasmfqoracles_free(a: number): void;
export function __wbg_set_wasmfqshifts_s0(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqshifts_s0(a: number, b: number): void;
export function fq_oracles_dummy(): number;
export function __wbg_set_wasmfqoracles_o(a: number, b: number): void;
export function fq_oracles_deep_copy(a: number): number;
export function __wbg_wasmpallasgprojective_free(a: number): void;
export function __wbg_wasmvestagprojective_free(a: number): void;
export function __wbg_wasmfpgatevector_free(a: number): void;
export function __wbg_wasmfpgate_free(a: number): void;
export function __wbg_get_wasmfpgate_typ(a: number): number;
export function __wbg_set_wasmfpgate_typ(a: number, b: number): void;
export function __wbg_get_wasmfpgate_wires(a: number): number;
export function __wbg_set_wasmfpgate_wires(a: number, b: number): void;
export function wasmfpgate_new(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fp_plonk_gate_vector_create(): number;
export function caml_pasta_fp_plonk_gate_vector_add(a: number, b: number): void;
export function caml_pasta_fp_plonk_gate_vector_get(a: number, b: number): number;
export function caml_pasta_fp_plonk_gate_vector_wrap(a: number, b: number, c: number): void;
export function caml_pasta_fp_plonk_gate_vector_digest(a: number, b: number): void;
export function wasmfqgate_new(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fq_plonk_gate_vector_add(a: number, b: number): void;
export function caml_pasta_fq_plonk_gate_vector_get(a: number, b: number): number;
export function caml_pasta_fq_plonk_gate_vector_wrap(a: number, b: number, c: number): void;
export function caml_pasta_fq_plonk_gate_vector_digest(a: number, b: number): void;
export function __wbg_wasmpastafpplonkindex_free(a: number): void;
export function caml_pasta_fp_plonk_index_create(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fp_plonk_index_max_degree(a: number): number;
export function caml_pasta_fp_plonk_index_public_inputs(a: number): number;
export function caml_pasta_fp_plonk_index_domain_d1_size(a: number): number;
export function caml_pasta_fp_plonk_index_domain_d4_size(a: number): number;
export function caml_pasta_fp_plonk_index_domain_d8_size(a: number): number;
export function caml_pasta_fp_plonk_index_read(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function caml_pasta_fp_plonk_index_write(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fp_plonk_index_serialize(a: number, b: number): void;
export function caml_pasta_fq_plonk_index_create(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fq_plonk_index_read(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function caml_pasta_fq_plonk_index_write(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fq_plonk_index_serialize(a: number, b: number): void;
export function wasmfppolycomm_new(a: number, b: number, c: number): number;
export function wasmfppolycomm_unshifted(a: number, b: number): void;
export function wasmfppolycomm_set_unshifted(a: number, b: number, c: number): void;
export function __wbg_wasmfppolycomm_free(a: number): void;
export function __wbg_get_wasmfppolycomm_shifted(a: number): number;
export function __wbg_set_wasmfppolycomm_shifted(a: number, b: number): void;
export function wasmfqpolycomm_new(a: number, b: number, c: number): number;
export function wasmfqpolycomm_unshifted(a: number, b: number): void;
export function wasmfqpolycomm_set_unshifted(a: number, b: number, c: number): void;
export function __wbg_get_wasmfqgate_typ(a: number): number;
export function __wbg_get_wasmfqgate_wires(a: number): number;
export function __wbg_wasmfqpolycomm_free(a: number): void;
export function caml_pasta_fq_plonk_index_max_degree(a: number): number;
export function __wbg_set_wasmfqgate_typ(a: number, b: number): void;
export function __wbg_wasmfqgate_free(a: number): void;
export function caml_pasta_fq_plonk_index_public_inputs(a: number): number;
export function __wbg_set_wasmfqpolycomm_shifted(a: number, b: number): void;
export function caml_pasta_fq_plonk_gate_vector_create(): number;
export function caml_pasta_fq_plonk_index_domain_d1_size(a: number): number;
export function __wbg_set_wasmfqgate_wires(a: number, b: number): void;
export function caml_pasta_fq_plonk_index_domain_d4_size(a: number): number;
export function caml_pasta_fq_plonk_index_domain_d8_size(a: number): number;
export function __wbg_wasmfqgatevector_free(a: number): void;
export function __wbg_get_wasmfqpolycomm_shifted(a: number): number;
export function __wbg_wasmpastafqplonkindex_free(a: number): void;
export function greet(a: number, b: number): void;
export function console_log(a: number, b: number): void;
export function create_zero_u32_ptr(): number;
export function free_u32_ptr(a: number): void;
export function set_u32_ptr(a: number, b: number): void;
export function wait_until_non_zero(a: number): number;
export function caml_bigint_256_of_numeral(a: number, b: number, c: number, d: number, e: number): void;
export function caml_bigint_256_of_decimal_string(a: number, b: number, c: number): void;
export function caml_bigint_256_num_limbs(): number;
export function caml_bigint_256_bytes_per_limb(): number;
export function caml_bigint_256_div(a: number, b: number, c: number, d: number, e: number): void;
export function caml_bigint_256_compare(a: number, b: number, c: number, d: number): number;
export function caml_bigint_256_print(a: number, b: number): void;
export function caml_bigint_256_to_string(a: number, b: number, c: number): void;
export function caml_bigint_256_test_bit(a: number, b: number, c: number): number;
export function caml_bigint_256_to_bytes(a: number, b: number, c: number): void;
export function caml_bigint_256_of_bytes(a: number, b: number, c: number): void;
export function caml_bigint_256_deep_copy(a: number, b: number, c: number): void;
export function caml_pasta_fp_size_in_bits(): number;
export function caml_pasta_fp_size(a: number): void;
export function caml_pasta_fp_add(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fp_sub(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fp_negate(a: number, b: number, c: number): void;
export function caml_pasta_fp_mul(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fp_div(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fp_inv(a: number, b: number, c: number): void;
export function caml_pasta_fp_square(a: number, b: number, c: number): void;
export function caml_pasta_fp_is_square(a: number, b: number): number;
export function caml_pasta_fp_sqrt(a: number, b: number, c: number): void;
export function caml_pasta_fp_of_int(a: number, b: number): void;
export function caml_pasta_fp_to_string(a: number, b: number, c: number): void;
export function caml_pasta_fp_of_string(a: number, b: number, c: number): void;
export function caml_pasta_fp_print(a: number, b: number): void;
export function caml_pasta_fp_compare(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fp_equal(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fp_random(a: number): void;
export function caml_pasta_fp_rng(a: number, b: number): void;
export function caml_pasta_fp_to_bigint(a: number, b: number, c: number): void;
export function caml_pasta_fp_of_bigint(a: number, b: number, c: number): void;
export function caml_pasta_fp_two_adic_root_of_unity(a: number): void;
export function caml_pasta_fp_domain_generator(a: number, b: number): void;
export function caml_pasta_fp_to_bytes(a: number, b: number, c: number): void;
export function caml_pasta_fp_of_bytes(a: number, b: number, c: number): void;
export function caml_pasta_fp_deep_copy(a: number, b: number, c: number): void;
export function caml_pasta_fq_size(a: number): void;
export function caml_pasta_fq_add(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fq_sub(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fq_negate(a: number, b: number, c: number): void;
export function caml_pasta_fq_mul(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fq_div(a: number, b: number, c: number, d: number, e: number): void;
export function caml_pasta_fq_inv(a: number, b: number, c: number): void;
export function caml_pasta_fq_square(a: number, b: number, c: number): void;
export function caml_pasta_fq_is_square(a: number, b: number): number;
export function caml_pasta_fq_sqrt(a: number, b: number, c: number): void;
export function caml_pasta_fq_of_int(a: number, b: number): void;
export function caml_pasta_fq_to_string(a: number, b: number, c: number): void;
export function caml_pasta_fq_of_string(a: number, b: number, c: number): void;
export function caml_pasta_fq_print(a: number, b: number): void;
export function caml_pasta_fq_compare(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fq_equal(a: number, b: number, c: number, d: number): number;
export function caml_pasta_fq_random(a: number): void;
export function caml_pasta_fq_rng(a: number, b: number): void;
export function caml_pasta_fq_to_bigint(a: number, b: number, c: number): void;
export function caml_pasta_fq_of_bigint(a: number, b: number, c: number): void;
export function caml_pasta_fq_two_adic_root_of_unity(a: number): void;
export function caml_pasta_fq_domain_generator(a: number, b: number): void;
export function caml_pasta_fq_to_bytes(a: number, b: number, c: number): void;
export function caml_pasta_fq_of_bytes(a: number, b: number, c: number): void;
export function caml_pasta_fq_deep_copy(a: number, b: number, c: number): void;
export function caml_pasta_fq_size_in_bits(): number;
export function __wbg_wire_free(a: number): void;
export function __wbg_get_wire_row(a: number): number;
export function __wbg_set_wire_row(a: number, b: number): void;
export function __wbg_get_wire_col(a: number): number;
export function __wbg_set_wire_col(a: number, b: number): void;
export function wire_create(a: number, b: number): number;
export function __wbg_wbg_rayon_poolbuilder_free(a: number): void;
export function wbg_rayon_poolbuilder_numThreads(a: number): number;
export function wbg_rayon_poolbuilder_receiver(a: number): number;
export function wbg_rayon_poolbuilder_build(a: number): void;
export function initThreadPool(a: number, b: number): number;
export function wbg_rayon_start_worker(a: number): void;
export const memory: WebAssembly.Memory;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_thread_destroy(): void;
export function __wbindgen_start(): void;
