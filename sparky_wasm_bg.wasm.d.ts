/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const snarky_setOptimizationMode: (a: number, b: number, c: number) => void;
export const snarky_getOptimizationMode: (a: number) => void;
export const snarky_field: (a: number) => number;
export const snarky_constraintSystem: (a: number) => number;
export const snarky_gatesRaw: (a: number, b: number, c: number, d: number, e: number) => void;
export const snarky_runReset: (a: number) => void;
export const snarky_setOptimizationFailureMode: (a: number, b: number) => void;
export const snarky_getOptimizationStats: (a: number) => number;
export const snarky_resetOptimizationStats: (a: number) => void;
export const snarkyfieldcompat_constant: (a: number, b: number, c: number) => void;
export const snarkyfieldcompat_exists: (a: number, b: number, c: number) => void;
export const snarkyfieldcompat_add: (a: number, b: number, c: number, d: number) => void;
export const snarkyfieldcompat_mul: (a: number, b: number, c: number, d: number) => void;
export const snarkyfieldcompat_sub: (a: number, b: number, c: number, d: number) => void;
export const snarkyfieldcompat_scale: (a: number, b: number, c: number, d: number) => void;
export const snarkyfieldcompat_square: (a: number, b: number, c: number) => void;
export const snarkyfieldcompat_assertEqual: (a: number, b: number, c: number, d: number) => void;
export const snarkyfieldcompat_assertMul: (a: number, b: number, c: number, d: number, e: number) => void;
export const snarkyfieldcompat_assertSquare: (a: number, b: number, c: number, d: number) => void;
export const snarkyfieldcompat_assertBoolean: (a: number, b: number, c: number) => void;
export const snarkyfieldcompat_readVar: (a: number, b: number, c: number) => void;
export const snarkyfieldcompat_inv: (a: number, b: number, c: number) => void;
export const snarkyfieldcompat_emitIfConstraint: (a: number, b: number, c: number, d: number, e: number) => void;
export const snarkyfieldcompat_emitBooleanAnd: (a: number, b: number, c: number, d: number) => void;
export const snarkyruncompat_enterConstraintSystem: (a: number) => number;
export const snarkyruncompat_enterGenerateWitness: (a: number) => number;
export const snarkyruncompat_witnessMode: (a: number) => void;
export const snarkyruncompat_inProver: (a: number) => number;
export const snarkyruncompat_asProver: (a: number, b: number, c: number) => void;
export const snarkyruncompat_setEvalConstraints: (a: number, b: number) => void;
export const snarkyruncompat_constraintMode: (a: number) => void;
export const snarkyruncompat_enterAsProver: (a: number, b: number) => number;
export const snarkyruncompat_existsOne: (a: number, b: number, c: number) => void;
export const snarkyruncompat_exists: (a: number, b: number, c: number, d: number) => void;
export const sparkyrunstate_allocVar: (a: number) => number;
export const sparkyrunstate_storeFieldElt: (a: number, b: number, c: number) => void;
export const __wbg_snarkyconstraintsystemcompat_free: (a: number, b: number) => void;
export const snarkyconstraintsystemcompat_rows: (a: number, b: number) => number;
export const snarkyconstraintsystemcompat_digest: (a: number, b: number) => number;
export const snarkyconstraintsystemcompat_toJson: (a: number, b: number) => number;
export const snarkygatescompat_zero: (a: number, b: number, c: number, d: number, e: number) => void;
export const snarkygatescompat_xor: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number) => void;
export const snarkygatescompat_lookup: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
export const snarkygatescompat_addFixedLookupTable: (a: number, b: number, c: number, d: number) => void;
export const snarkygatescompat_addRuntimeTableConfig: (a: number, b: number, c: number, d: number) => void;
export const snarkygatescompat_rangeCheck0: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
export const poseidoncompat_update: (a: number, b: number, c: number, d: number) => void;
export const poseidoncompat_hashToGroup: (a: number, b: number, c: number) => void;
export const poseidoncompat_spongeCreate: (a: number, b: number, c: number) => void;
export const poseidoncompat_spongeAbsorb: (a: number, b: number, c: number, d: number) => void;
export const poseidoncompat_spongeSqueeze: (a: number, b: number, c: number) => void;
export const __wbg_modehandle_free: (a: number, b: number) => void;
export const initSparky: () => number;
export const modehandle_exit: (a: number) => void;
export const snarky_poseidon: (a: number) => number;
export const snarky_run: (a: number) => number;
export const snarky_gates: (a: number) => number;
export const snarkyruncompat_state: (a: number) => number;
export const snarkyruncompat_inProverBlock: (a: number) => number;
export const main: () => void;
export const snarky_new: () => number;
export const runstate_new: () => number;
export const __wbg_sparkyrunstate_free: (a: number, b: number) => void;
export const __wbg_snarkyfieldcompat_free: (a: number, b: number) => void;
export const __wbg_runstate_free: (a: number, b: number) => void;
export const __wbg_snarkyruncompat_free: (a: number, b: number) => void;
export const snarkyruncompat_reset: (a: number) => void;
export const snarkyruncompat_getConstraintSystem: (a: number) => number;
export const __wbg_snarky_free: (a: number, b: number) => void;
export const __wbg_poseidoncompat_free: (a: number, b: number) => void;
export const __wbg_snarkygatescompat_free: (a: number, b: number) => void;
export const __wbindgen_export_0: (a: number) => void;
export const __wbindgen_export_1: (a: number, b: number, c: number) => void;
export const __wbindgen_export_2: (a: number, b: number) => number;
export const __wbindgen_export_3: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_add_to_stack_pointer: (a: number) => number;
export const __wbindgen_start: () => void;
