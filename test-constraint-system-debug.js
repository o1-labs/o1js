/**
 * Test to examine the actual constraint systems generated by Sparky
 * to see if different circuits collapse into identical constraint systems
 */

import { Field, ZkProgram } from './dist/node/index.js';
import { switchBackend, getCurrentBackend } from './dist/node/index.js';

async function testConstraintSystems() {
  console.log('üîç Testing constraint system generation in Sparky...\n');

  // Switch to Sparky backend
  await switchBackend('sparky');
  console.log(`Backend: ${getCurrentBackend()}\n`);

  // Define different circuits
  const SimpleAddition = ZkProgram({
    name: 'SimpleAddition',
    publicInput: Field,
    methods: {
      add: {
        privateInputs: [Field],
        async method(publicInput, privateInput) {
          publicInput.assertEquals(privateInput.add(Field(1)));
        },
      },
    },
  });

  const SimpleMultiplication = ZkProgram({
    name: 'SimpleMultiplication', 
    publicInput: Field,
    methods: {
      multiply: {
        privateInputs: [Field],
        async method(publicInput, privateInput) {
          publicInput.assertEquals(privateInput.mul(Field(2)));
        },
      },
    },
  });

  const VerySimple = ZkProgram({
    name: 'VerySimple',
    publicInput: Field,
    methods: {
      justAssert: {
        privateInputs: [],
        async method(publicInput) {
          publicInput.assertEquals(Field(42));
        },
      },
    },
  });

  const circuits = [
    { name: 'SimpleAddition', program: SimpleAddition },
    { name: 'SimpleMultiplication', program: SimpleMultiplication },
    { name: 'VerySimple', program: VerySimple },
  ];

  console.log('üß™ Analyzing constraint systems...\n');

  for (const circuit of circuits) {
    console.log(`\n=== ${circuit.name} ===`);
    
    // Access the Sparky backend directly to get constraint system info
    const snarky = globalThis.__snarky?.Snarky;
    if (!snarky) {
      console.log('‚ùå No Snarky backend found');
      continue;
    }

    // Reset constraint system before each circuit
    if (snarky.constraintSystem && snarky.constraintSystem.reset) {
      snarky.constraintSystem.reset();
      console.log('üîÑ Reset constraint system');
    }

    // Compile and capture constraint system
    console.log('Compiling...');
    const { verificationKey } = await circuit.program.compile();
    
    console.log('üìä Constraint System Analysis:');
    
    // Try to get constraint count
    if (snarky.constraintCount) {
      const count = snarky.constraintCount();
      console.log(`  Constraint count: ${count}`);
    }
    
    // Try to get constraint system data
    if (snarky.constraintSystem) {
      const cs = snarky.constraintSystem;
      console.log(`  Constraint system type: ${typeof cs}`);
      
      if (cs.gates) {
        console.log(`  Number of gates: ${cs.gates.length}`);
        cs.gates.forEach((gate, i) => {
          console.log(`    Gate ${i}: type=${gate.typ}, wires=${gate.wires?.length || 0}, coeffs=${gate.coeffs?.length || 0}`);
          if (gate.coeffs && gate.coeffs.length > 0) {
            console.log(`      First coeff: ${gate.coeffs[0]}`);
            console.log(`      Last coeff: ${gate.coeffs[gate.coeffs.length - 1]}`);
          }
        });
      }
      
      if (cs.public_input_size !== undefined) {
        console.log(`  Public input size: ${cs.public_input_size}`);
      }
      
      // Try to serialize the constraint system for comparison
      try {
        const csString = JSON.stringify(cs);
        console.log(`  CS JSON length: ${csString.length}`);
        console.log(`  CS hash: ${csString.substring(0, 100)}...`);
      } catch (e) {
        console.log(`  CS serialization failed: ${e.message}`);
      }
    }
    
    // VK analysis
    const vkString = JSON.stringify(verificationKey);
    console.log(`  VK length: ${vkString.length}`);
    console.log(`  VK hash: ${vkString.substring(0, 100)}...`);
  }

  // Compare constraint systems
  console.log('\nüîç Constraint System Comparison:');
  console.log('If the constraint systems are identical, that explains why VKs are the same!');
}

// Run the test
testConstraintSystems().catch(console.error);