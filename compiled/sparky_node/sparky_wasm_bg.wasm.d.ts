/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const __wbg_wasmstatecontext_free: (a: number, b: number) => void;
export const wasmstatecontext_new: () => number;
export const wasmstatecontext_newWitnessGeneration: () => number;
export const wasmstatecontext_newProver: () => number;
export const wasmstatecontext_getMode: (a: number, b: number) => void;
export const wasmstatecontext_setMode: (a: number, b: number, c: number, d: number) => void;
export const wasmstatecontext_reset: (a: number) => void;
export const wasmstatecontext_fork: (a: number) => number;
export const wasmstatecontext_forkWithMode: (a: number, b: number, c: number, d: number) => void;
export const wasmstatecontext_allocVar: (a: number) => number;
export const wasmstatecontext_setVariableValue: (a: number, b: number, c: number, d: number, e: number) => void;
export const wasmstatecontext_getVariableValue: (a: number, b: number, c: number) => void;
export const wasmstatecontext_shouldGenerateConstraints: (a: number) => number;
export const wasmstatecontext_shouldComputeWitness: (a: number) => number;
export const wasmstatecontext_inConstraintMode: (a: number) => number;
export const wasmstatecontext_inWitnessMode: (a: number) => number;
export const wasmstatecontext_inProverMode: (a: number) => number;
export const wasmstatecontext_getConstraintCount: (a: number) => number;
export const wasmstatecontext_getConstraintSystemJson: (a: number, b: number) => void;
export const wasmmigration_initGlobalContext: (a: number, b: number, c: number) => void;
export const __wbg_wasmfeatures_free: (a: number, b: number) => void;
export const __wbg_get_wasmfeatures_bulk_memory: (a: number) => number;
export const __wbg_set_wasmfeatures_bulk_memory: (a: number, b: number) => void;
export const __wbg_get_wasmfeatures_multi_value: (a: number) => number;
export const __wbg_set_wasmfeatures_multi_value: (a: number, b: number) => void;
export const __wbg_get_wasmfeatures_reference_types: (a: number) => number;
export const __wbg_set_wasmfeatures_reference_types: (a: number, b: number) => void;
export const __wbg_get_wasmfeatures_simd: (a: number) => number;
export const __wbg_set_wasmfeatures_simd: (a: number, b: number) => void;
export const __wbg_get_wasmfeatures_threads: (a: number) => number;
export const __wbg_set_wasmfeatures_threads: (a: number, b: number) => void;
export const wasmfeatures_detect: () => number;
export const __wbg_optimizationhints_free: (a: number, b: number) => void;
export const optimizationhints_markHot: (a: number, b: number) => void;
export const optimizationhints_prefetchSequential: (a: number, b: number) => void;
export const optimizationhints_optimizeForSize: () => void;
export const __wbg_fieldvar_free: (a: number, b: number) => void;
export const fieldvar_type: (a: number, b: number) => void;
export const fieldvar_value: (a: number) => number;
export const fieldvar_index: (a: number) => number;
export const fieldvar_new: (a: number, b: number, c: number, d: number) => number;
export const fieldvar_constant: (a: number) => number;
export const fieldvar_variable: (a: number, b: number) => number;
export const fieldvar_linearCombination: (a: number, b: number) => number;
export const __wbg_constraint_free: (a: number, b: number) => void;
export const constraint_type: (a: number, b: number) => void;
export const constraint_left: (a: number) => number;
export const constraint_right: (a: number) => number;
export const constraint_output: (a: number) => number;
export const constraint_annotation: (a: number, b: number) => void;
export const constraint_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => number;
export const constraint_equality: (a: number, b: number, c: number, d: number) => number;
export const constraint_multiplication: (a: number, b: number, c: number, d: number, e: number) => number;
export const constraint_boolean: (a: number, b: number, c: number) => number;
export const __wbg_ecpoint_free: (a: number, b: number) => void;
export const ecpoint_x: (a: number) => number;
export const ecpoint_y: (a: number) => number;
export const ecpoint_is_infinity: (a: number) => number;
export const ecpoint_new: (a: number, b: number, c: number) => number;
export const ecpoint_infinity: () => number;
export const ecpoint_finite: (a: number, b: number) => number;
export const __wbg_rangeconstraint_free: (a: number, b: number) => void;
export const rangeconstraint_value: (a: number) => number;
export const rangeconstraint_type: (a: number, b: number) => void;
export const rangeconstraint_new: (a: number, b: number, c: number, d: number) => number;
export const rangeconstraint_standard: (a: number, b: number) => number;
export const rangeconstraint_compact: (a: number, b: number) => number;
export const __wbg_batchresult_free: (a: number, b: number) => void;
export const batchresult_results: (a: number) => number;
export const batchresult_processing_time_ms: (a: number) => number;
export const batchresult_operation_count: (a: number) => number;
export const batchresult_new: (a: number, b: number, c: number) => number;
export const __wbg_circuitresult_free: (a: number, b: number) => void;
export const circuitresult_constraint_system: (a: number) => number;
export const circuitresult_num_variables: (a: number) => number;
export const circuitresult_new: (a: number, b: number, c: number, d: number) => number;
export const __wbg_memorystats_free: (a: number, b: number) => void;
export const memorystats_total_allocated_kb: (a: number) => number;
export const memorystats_current_usage_kb: (a: number) => number;
export const memorystats_peak_usage_kb: (a: number) => number;
export const memorystats_constraint_count: (a: number) => number;
export const memorystats_new: (a: number, b: number, c: number, d: number, e: number) => number;
export const __wbg_performancemetrics_free: (a: number, b: number) => void;
export const performancemetrics_operation_name: (a: number, b: number) => void;
export const performancemetrics_average_time_ms: (a: number) => number;
export const performancemetrics_min_time_ms: (a: number) => number;
export const performancemetrics_max_time_ms: (a: number) => number;
export const performancemetrics_operation_count: (a: number) => number;
export const performancemetrics_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => number;
export const performancemetrics_fromSingle: (a: number, b: number, c: number) => number;
export const snarky_new: () => number;
export const snarky_runInProver: (a: number) => number;
export const snarky_runAsProver: (a: number, b: number, c: number) => void;
export const snarky_runSetEvalConstraints: (a: number, b: number) => void;
export const snarky_runConstraintMode: (a: number) => void;
export const snarky_runWitnessMode: (a: number) => void;
export const snarky_runReset: (a: number) => void;
export const snarky_runEnterConstraintSystem: (a: number) => number;
export const snarky_runEnterGenerateWitness: (a: number) => number;
export const snarky_runEnterAsProver: (a: number, b: number) => number;
export const snarky_constraintSystemRows: (a: number, b: number) => number;
export const snarky_constraintSystemDigest: (a: number, b: number, c: number) => void;
export const snarky_constraintSystemToJson: (a: number, b: number) => number;
export const snarky_fieldAssertEqual: (a: number, b: number, c: number, d: number) => void;
export const snarky_fieldAssertMul: (a: number, b: number, c: number, d: number, e: number) => void;
export const snarky_fieldAssertSquare: (a: number, b: number, c: number, d: number) => void;
export const snarky_fieldAssertBoolean: (a: number, b: number, c: number) => void;
export const snarky_fieldReadVar: (a: number, b: number, c: number) => void;
export const snarky_fieldExists: (a: number, b: number, c: number) => void;
export const snarky_fieldConstant: (a: number, b: number, c: number) => void;
export const snarky_fieldAdd: (a: number, b: number, c: number, d: number) => void;
export const snarky_fieldScale: (a: number, b: number, c: number, d: number) => void;
export const snarky_fieldMul: (a: number, b: number, c: number, d: number) => void;
export const snarky_fieldSub: (a: number, b: number, c: number, d: number) => void;
export const snarky_fieldSquare: (a: number, b: number, c: number) => void;
export const snarky_fieldInv: (a: number, b: number, c: number) => void;
export const snarky_gatesZero: (a: number, b: number, c: number, d: number, e: number) => void;
export const snarky_gatesGeneric: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
export const snarky_gatesEcAdd: (a: number, b: number, c: number, d: number) => void;
export const snarky_gatesEcDouble: (a: number, b: number, c: number) => void;
export const snarky_gatesEcScalarMult: (a: number, b: number, c: number, d: number) => void;
export const snarky_gatesRangeCheck64: (a: number, b: number, c: number) => void;
export const snarky_gatesRangeCheck32: (a: number, b: number, c: number) => void;
export const snarky_gatesRangeCheck16: (a: number, b: number, c: number) => void;
export const snarky_gatesRangeCheckN: (a: number, b: number, c: number, d: number) => void;
export const snarky_gatesRangeCheck0: (a: number, b: number, c: number) => void;
export const snarky_gatesRangeCheck1: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number, s: number, t: number, u: number, v: number, w: number, x: number, y: number, z: number, a1: number, b1: number, c1: number, d1: number, e1: number, f1: number) => void;
export const snarky_gatesRaw: (a: number, b: number, c: number, d: number, e: number) => void;
export const snarky_foreignFieldFromHex: (a: number, b: number, c: number) => void;
export const snarky_foreignFieldFromDecimal: (a: number, b: number, c: number) => void;
export const snarky_foreignFieldRangeCheck: (a: number, b: number, c: number) => void;
export const snarky_foreignFieldAdd: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
export const snarky_foreignFieldMul: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number, s: number, t: number, u: number) => void;
export const snarky_testSecp256k1Field: (a: number, b: number) => void;
export const snarky_circuit: (a: number) => number;
export const snarky_exists: (a: number, b: number, c: number, d: number) => void;
export const snarky_existsOne: (a: number, b: number, c: number) => void;
export const snarkyruncompat_getConstraintSystem: (a: number) => number;
export const snarkyconstraintsystemcompat_toJson: (a: number, b: number) => number;
export const runstate_new: () => number;
export const runstate_allocVar: (a: number) => number;
export const runstate_storeFieldElt: (a: number, b: number, c: number, d: number) => void;
export const runstate_getVariableValue: (a: number, b: number, c: number) => void;
export const __wbg_modehandle_free: (a: number, b: number) => void;
export const modehandle_exit: (a: number) => void;
export const createExplicitStateContext: (a: number, b: number, c: number) => void;
export const snarky_runInProverBlock: (a: number) => number;
export const snarkyruncompat_inProverBlock: (a: number) => number;
export const rangeconstraint_num_bits: (a: number) => number;
export const circuitresult_num_constraints: (a: number) => number;
export const circuitresult_compilation_time_ms: (a: number) => number;
export const memorystats_variable_count: (a: number) => number;
export const performancemetrics_total_time_ms: (a: number) => number;
export const wasmstatecontext_newConstraintGeneration: () => number;
export const wasmmigration_resetGlobalContext: () => void;
export const wasmmigration_dropGlobalContext: () => void;
export const main: () => void;
export const snarkyfieldcompat_add: (a: number, b: number, c: number, d: number) => void;
export const snarkyfieldcompat_scale: (a: number, b: number, c: number, d: number) => void;
export const snarkyfieldcompat_mul: (a: number, b: number, c: number, d: number) => void;
export const snarkyfieldcompat_sub: (a: number, b: number, c: number, d: number) => void;
export const snarkygatescompat_ecAdd: (a: number, b: number, c: number, d: number) => void;
export const snarkygatescompat_ecScalarMult: (a: number, b: number, c: number, d: number) => void;
export const snarky_runState: (a: number) => number;
export const snarky_run: (a: number) => number;
export const snarky_field: (a: number) => number;
export const snarky_gates: (a: number) => number;
export const snarky_constraintSystem: (a: number) => number;
export const snarkyruncompat_state: (a: number) => number;
export const snarkyruncompat_existsOne: (a: number, b: number, c: number) => void;
export const snarkygatescompat_rangeCheck1: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number, s: number, t: number, u: number, v: number, w: number, x: number, y: number, z: number, a1: number, b1: number, c1: number, d1: number, e1: number, f1: number) => void;
export const snarkygatescompat_generic: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
export const snarkygatescompat_foreignFieldAdd: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
export const snarkyconstraintsystemcompat_digest: (a: number, b: number, c: number) => void;
export const snarkyfieldcompat_assertMul: (a: number, b: number, c: number, d: number, e: number) => void;
export const snarkygatescompat_zero: (a: number, b: number, c: number, d: number, e: number) => void;
export const snarkygatescompat_raw: (a: number, b: number, c: number, d: number, e: number) => void;
export const snarkyfieldcompat_assertEqual: (a: number, b: number, c: number, d: number) => void;
export const snarkyfieldcompat_assertSquare: (a: number, b: number, c: number, d: number) => void;
export const snarkygatescompat_rangeCheckN: (a: number, b: number, c: number, d: number) => void;
export const __wbg_wasmmigration_free: (a: number, b: number) => void;
export const __wbg_snarkyfieldcompat_free: (a: number, b: number) => void;
export const __wbg_snarkyconstraintsystemcompat_free: (a: number, b: number) => void;
export const snarkyfieldcompat_inv: (a: number, b: number, c: number) => void;
export const snarkyfieldcompat_square: (a: number, b: number, c: number) => void;
export const snarkyfieldcompat_constant: (a: number, b: number, c: number) => void;
export const snarkyfieldcompat_exists: (a: number, b: number, c: number) => void;
export const snarkyfieldcompat_readVar: (a: number, b: number, c: number) => void;
export const snarkyfieldcompat_assertBoolean: (a: number, b: number, c: number) => void;
export const snarkyconstraintsystemcompat_rows: (a: number, b: number) => number;
export const __wbg_snarky_free: (a: number, b: number) => void;
export const __wbg_snarkycircuitcompat_free: (a: number, b: number) => void;
export const __wbg_runstate_free: (a: number, b: number) => void;
export const snarkygatescompat_testSecp256k1Field: (a: number, b: number) => void;
export const snarkygatescompat_foreignFieldMul: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number, s: number, t: number, u: number) => void;
export const snarkygatescompat_foreignFieldRangeCheck: (a: number, b: number, c: number) => void;
export const snarkygatescompat_foreignFieldFromDecimal: (a: number, b: number, c: number) => void;
export const snarkygatescompat_foreignFieldFromHex: (a: number, b: number, c: number) => void;
export const snarkygatescompat_rangeCheck0: (a: number, b: number, c: number) => void;
export const snarkygatescompat_rangeCheck16: (a: number, b: number, c: number) => void;
export const snarkygatescompat_rangeCheck32: (a: number, b: number, c: number) => void;
export const snarkygatescompat_rangeCheck64: (a: number, b: number, c: number) => void;
export const snarkygatescompat_ecDouble: (a: number, b: number, c: number) => void;
export const __wbg_snarkygatescompat_free: (a: number, b: number) => void;
export const snarkyruncompat_exists: (a: number, b: number, c: number, d: number) => void;
export const snarkyruncompat_enterAsProver: (a: number, b: number) => number;
export const snarkyruncompat_enterGenerateWitness: (a: number) => number;
export const snarkyruncompat_enterConstraintSystem: (a: number) => number;
export const snarkyruncompat_reset: (a: number) => void;
export const snarkyruncompat_witnessMode: (a: number) => void;
export const snarkyruncompat_constraintMode: (a: number) => void;
export const snarkyruncompat_setEvalConstraints: (a: number, b: number) => void;
export const snarkyruncompat_asProver: (a: number, b: number, c: number) => void;
export const snarkyruncompat_inProver: (a: number) => number;
export const __wbg_snarkyruncompat_free: (a: number, b: number) => void;
export const __wbindgen_export_0: (a: number) => void;
export const __wbindgen_export_1: (a: number, b: number, c: number) => void;
export const __wbindgen_export_2: (a: number, b: number) => number;
export const __wbindgen_export_3: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_add_to_stack_pointer: (a: number) => number;
export const __wbindgen_start: () => void;
