#!/usr/bin/env node

/**
 * Debug script to investigate constraint system generation issue
 * Created: January 5, 2025, 00:50 UTC
 */

import { Field, Bool, Provable, switchBackend, getCurrentBackend } from './dist/node/index.js';
import { Snarky, initializeBindings } from './dist/node/bindings.js';

async function debugConstraintSystem() {
  console.log('üîç Debugging constraint system generation issue\n');
  
  try {
    // First, ensure bindings are initialized
    await initializeBindings('snarky');
    console.log('‚úÖ Bindings initialized for snarky');
    console.log(`üìç Current backend: ${getCurrentBackend()}`);
    
    // Check if Snarky is available
    console.log('\nüîç Checking Snarky object:');
    console.log('  ‚Ä¢ typeof Snarky:', typeof Snarky);
    console.log('  ‚Ä¢ Snarky keys:', Snarky ? Object.keys(Snarky).slice(0, 10).join(', ') + '...' : 'null');
    
    // Check if constraintSystem exists
    if (Snarky && Snarky.constraintSystem) {
      console.log('  ‚Ä¢ Snarky.constraintSystem exists:', true);
      console.log('  ‚Ä¢ constraintSystem methods:', Object.keys(Snarky.constraintSystem).join(', '));
    } else {
      console.log('  ‚Ä¢ Snarky.constraintSystem exists:', false);
    }
    
    // Try to create a simple Field
    console.log('\nüîç Testing Field creation:');
    try {
      const a = Field(10);
      console.log('  ‚úÖ Field(10) created successfully');
      console.log('  ‚Ä¢ Field value:', a.toString());
    } catch (e) {
      console.error('  ‚ùå Field creation failed:', e.message);
    }
    
    // Try to run a simple constraint system
    console.log('\nüîç Testing constraint system generation:');
    try {
      const cs = await Provable.constraintSystem(() => {
        console.log('    ‚Ä¢ Inside constraint system function');
        const a = Field(10);
        const b = Field(20);
        const c = a.add(b);
        return c;
      });
      
      console.log('  ‚úÖ Constraint system generated');
      console.log('  ‚Ä¢ CS type:', typeof cs);
      console.log('  ‚Ä¢ CS keys:', cs ? Object.keys(cs).join(', ') : 'null');
      console.log('  ‚Ä¢ CS rows:', cs && cs.rows ? cs.rows : 'N/A');
      console.log('  ‚Ä¢ CS gates:', cs && cs.gates ? cs.gates.length : 'N/A');
      
      // Try to convert to JSON
      if (Snarky && Snarky.constraintSystem && Snarky.constraintSystem.toJson) {
        console.log('\nüîç Testing toJson conversion:');
        try {
          const json = Snarky.constraintSystem.toJson(cs);
          console.log('  ‚úÖ toJson succeeded');
          console.log('  ‚Ä¢ JSON keys:', json ? Object.keys(json).join(', ') : 'null');
          console.log('  ‚Ä¢ Gates count:', json && json.gates ? json.gates.length : 'N/A');
        } catch (e) {
          console.error('  ‚ùå toJson failed:', e.message);
          console.error('  ‚Ä¢ Stack:', e.stack);
        }
      }
      
    } catch (e) {
      console.error('  ‚ùå Constraint system generation failed:', e.message);
      console.error('  ‚Ä¢ Stack:', e.stack);
    }
    
    // Try with witness variables
    console.log('\nüîç Testing with witness variables:');
    try {
      const cs = await Provable.constraintSystem(() => {
        console.log('    ‚Ä¢ Creating witness variables');
        const a = Provable.witness(Field, () => Field(10));
        const b = Provable.witness(Field, () => Field(20));
        const c = a.add(b);
        c.assertEquals(c);
        return c;
      });
      
      console.log('  ‚úÖ Constraint system with witnesses generated');
      console.log('  ‚Ä¢ CS rows:', cs && cs.rows ? cs.rows : 'N/A');
      
    } catch (e) {
      console.error('  ‚ùå Witness constraint system failed:', e.message);
    }
    
    // Now test with Sparky
    console.log('\n\nüîÑ Switching to Sparky backend...');
    await switchBackend('sparky');
    console.log(`üìç Current backend: ${getCurrentBackend()}`);
    
    console.log('\nüîç Testing Sparky constraint system:');
    try {
      const cs = await Provable.constraintSystem(() => {
        const a = Provable.witness(Field, () => Field(10));
        const b = Provable.witness(Field, () => Field(20));
        const c = a.add(b);
        c.assertEquals(c);
        return c;
      });
      
      console.log('  ‚úÖ Sparky constraint system generated');
      console.log('  ‚Ä¢ CS type:', typeof cs);
      console.log('  ‚Ä¢ CS keys:', cs ? Object.keys(cs).join(', ') : 'null');
      console.log('  ‚Ä¢ CS rows:', cs && cs.rows ? cs.rows : 'N/A');
      console.log('  ‚Ä¢ CS gates:', cs && cs.gates ? cs.gates.length : 'N/A');
      
    } catch (e) {
      console.error('  ‚ùå Sparky constraint system failed:', e.message);
    }
    
  } catch (error) {
    console.error('‚ùå Fatal error:', error.message);
    console.error(error.stack);
  }
}

// Run the debug script
debugConstraintSystem().catch(console.error);